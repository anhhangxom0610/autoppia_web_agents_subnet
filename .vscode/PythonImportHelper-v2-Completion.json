[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "RequestException",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "BackendEvent",
        "importPath": "autoppia_iwa.src.backend_demo_web.classes",
        "description": "autoppia_iwa.src.backend_demo_web.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.backend_demo_web.classes",
        "documentation": {}
    },
    {
        "label": "BackendEvent",
        "importPath": "autoppia_iwa.src.backend_demo_web.classes",
        "description": "autoppia_iwa.src.backend_demo_web.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.backend_demo_web.classes",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "create_model",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "create_model",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "SecretStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TasksGenerationOutput",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskPromptForUrl",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TasksGenerationOutput",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED_FOR_TASK_TEST",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED_FOR_TASK_TEST",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED_FOR_TASK_TEST",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED_FOR_TASK_TEST",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED_FOR_TASK_TEST",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED_FOR_TASK_TEST",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events_test_for_subnet",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MODEL",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROME_PATH",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROMEDRIVER_PATH",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROFILE",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROFILE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROME_PATH",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROMEDRIVER_PATH",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROFILE",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROFILE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "ANALYSIS_COLLECTION",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "GENERATE_MILESTONES",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LLM_PROVIDER",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LLM_THRESHOLD",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LOCAL_MODEL_ENDPOINT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "MONGODB_NAME",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "MONGODB_URL",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MAX_TOKENS",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MODEL",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_TEMPERATURE",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "TASKS_COLLECTION",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "ILLMService",
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "ILLMService",
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "OpenAIService",
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "OpenAIService",
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "ILLMService",
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "ILLMService",
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "extract_html",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "extract_html",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "extract_html",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "extract_html",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "clean_html",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "extract_html",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "instantiate_test",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "instantiate_test",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "instantiate_test",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "instantiate_test",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "instantiate_test",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "instantiate_test",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "instantiate_test",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "SinglePageAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "SinglePageAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "LLMWebAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "LLMWebAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "print_exception",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "BaseMongoRepository",
        "importPath": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "description": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "OpinionBaseOnHTML",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "OpinionBaseOnScreenshot",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckEventEmittedTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckPageViewEventTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "FindInHtmlTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckEventEmittedTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "FindInHtmlTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "ClickAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "NavigateAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ClickAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "GetDropDownOptions",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "NavigateAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ScrollAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SelectDropDownOption",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SendKeysIWAAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "TypeAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "NavigateAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ClickAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "NavigateAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ClickAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "Selector",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseActionWithSelector",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "Selector",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "Selector",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "open",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "ndarray",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "dtype",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "floating",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "complexfloating",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "ElementHandle",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "FrameLocator",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "BackendDemoWebService",
        "importPath": "autoppia_iwa.src.backend_demo_web.backend_demo_web_service",
        "description": "autoppia_iwa.src.backend_demo_web.backend_demo_web_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.backend_demo_web.backend_demo_web_service",
        "documentation": {}
    },
    {
        "label": "BackendDemoWebService",
        "importPath": "autoppia_iwa.src.backend_demo_web.backend_demo_web_service",
        "description": "autoppia_iwa.src.backend_demo_web.backend_demo_web_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.backend_demo_web.backend_demo_web_service",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "TestEvaluated",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "TestEvaluated",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "FeedbackGenerator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "description": "autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "documentation": {}
    },
    {
        "label": "TestRunner",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.test_runner",
        "description": "autoppia_iwa.src.evaluation.evaluator.test_runner",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.test_runner",
        "documentation": {}
    },
    {
        "label": "IEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.interfaces",
        "description": "autoppia_iwa.src.evaluation.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.interfaces",
        "documentation": {}
    },
    {
        "label": "PlaywrightBrowserExecutor",
        "importPath": "autoppia_iwa.src.execution.browser_executor",
        "description": "autoppia_iwa.src.execution.browser_executor",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.browser_executor",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "action_logger",
        "importPath": "autoppia_iwa.src.execution.actions.utils",
        "description": "autoppia_iwa.src.execution.actions.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.utils",
        "documentation": {}
    },
    {
        "label": "log_action",
        "importPath": "autoppia_iwa.src.execution.actions.utils",
        "description": "autoppia_iwa.src.execution.actions.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.utils",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "iscoroutinefunction",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "signature",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "update_wrapper",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "tiktoken",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tiktoken",
        "description": "tiktoken",
        "detail": "tiktoken",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "RateLimitError",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "RateLimitError",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "ILLMService",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLMService",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLMService",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "BaseOpenAIResponseFormat",
        "importPath": "autoppia_iwa.src.llms.domain.openai.classes",
        "description": "autoppia_iwa.src.llms.domain.openai.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.openai.classes",
        "documentation": {}
    },
    {
        "label": "OpenAILLMModelMixin",
        "importPath": "autoppia_iwa.src.llms.domain.openai.classes",
        "description": "autoppia_iwa.src.llms.domain.openai.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.openai.classes",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "markdownify",
        "importPath": "markdownify",
        "description": "markdownify",
        "isExtraImport": true,
        "detail": "markdownify",
        "documentation": {}
    },
    {
        "label": "ActionGenerator",
        "importPath": "autoppia_iwa.src.web_agents.autoppia_agent.actions_generation.actions_generator",
        "description": "autoppia_iwa.src.web_agents.autoppia_agent.actions_generation.actions_generator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.autoppia_agent.actions_generation.actions_generator",
        "documentation": {}
    },
    {
        "label": "ActionGenerator",
        "importPath": "autoppia_iwa.src.web_agents.autoppia_agent.actions_generation.actions_generator",
        "description": "autoppia_iwa.src.web_agents.autoppia_agent.actions_generation.actions_generator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.autoppia_agent.actions_generation.actions_generator",
        "documentation": {}
    },
    {
        "label": "HighLevelWorkflowGenerator",
        "importPath": "autoppia_iwa.src.web_agents.autoppia_agent.milestones_generation.milestones_generator",
        "description": "autoppia_iwa.src.web_agents.autoppia_agent.milestones_generation.milestones_generator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.autoppia_agent.milestones_generation.milestones_generator",
        "documentation": {}
    },
    {
        "label": "HighLevelWorkflowGenerator",
        "importPath": "autoppia_iwa.src.web_agents.autoppia_agent.milestones_generation.milestones_generator",
        "description": "autoppia_iwa.src.web_agents.autoppia_agent.milestones_generation.milestones_generator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.autoppia_agent.milestones_generation.milestones_generator",
        "documentation": {}
    },
    {
        "label": "IWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "IWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "ActionModel",
        "importPath": "browser_use.controller.registry.views",
        "description": "browser_use.controller.registry.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.registry.views",
        "documentation": {}
    },
    {
        "label": "ActionModel",
        "importPath": "browser_use.controller.registry.views",
        "description": "browser_use.controller.registry.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.registry.views",
        "documentation": {}
    },
    {
        "label": "ActionModel",
        "importPath": "browser_use.controller.registry.views",
        "description": "browser_use.controller.registry.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.registry.views",
        "documentation": {}
    },
    {
        "label": "ActionModel",
        "importPath": "browser_use.controller.registry.views",
        "description": "browser_use.controller.registry.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.registry.views",
        "documentation": {}
    },
    {
        "label": "ActionModel",
        "importPath": "browser_use.controller.registry.views",
        "description": "browser_use.controller.registry.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.registry.views",
        "documentation": {}
    },
    {
        "label": "ActionRegistry",
        "importPath": "browser_use.controller.registry.views",
        "description": "browser_use.controller.registry.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.registry.views",
        "documentation": {}
    },
    {
        "label": "RegisteredAction",
        "importPath": "browser_use.controller.registry.views",
        "description": "browser_use.controller.registry.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.registry.views",
        "documentation": {}
    },
    {
        "label": "ActionModel",
        "importPath": "browser_use.controller.registry.views",
        "description": "browser_use.controller.registry.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.registry.views",
        "documentation": {}
    },
    {
        "label": "DOMHistoryElement",
        "importPath": "browser_use.dom.history_tree_processor.view",
        "description": "browser_use.dom.history_tree_processor.view",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.view",
        "documentation": {}
    },
    {
        "label": "DOMHistoryElement",
        "importPath": "browser_use.dom.history_tree_processor.view",
        "description": "browser_use.dom.history_tree_processor.view",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.view",
        "documentation": {}
    },
    {
        "label": "HashedDomElement",
        "importPath": "browser_use.dom.history_tree_processor.view",
        "description": "browser_use.dom.history_tree_processor.view",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.view",
        "documentation": {}
    },
    {
        "label": "Coordinates",
        "importPath": "browser_use.dom.history_tree_processor.view",
        "description": "browser_use.dom.history_tree_processor.view",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.view",
        "documentation": {}
    },
    {
        "label": "CoordinateSet",
        "importPath": "browser_use.dom.history_tree_processor.view",
        "description": "browser_use.dom.history_tree_processor.view",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.view",
        "documentation": {}
    },
    {
        "label": "HashedDomElement",
        "importPath": "browser_use.dom.history_tree_processor.view",
        "description": "browser_use.dom.history_tree_processor.view",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.view",
        "documentation": {}
    },
    {
        "label": "ViewportInfo",
        "importPath": "browser_use.dom.history_tree_processor.view",
        "description": "browser_use.dom.history_tree_processor.view",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.view",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "SystemPrompt",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use",
        "description": "browser_use",
        "isExtraImport": true,
        "detail": "browser_use",
        "documentation": {}
    },
    {
        "label": "AgentHistory",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentOutput",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentStepInfo",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentStepInfo",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentError",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistory",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentOutput",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentStepInfo",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentBrain",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistory",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentOutput",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "ActionModel",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "importPath": "browser_use.agent.views",
        "description": "browser_use.agent.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContextConfig",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContextConfig",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContextConfig",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContextConfig",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContextConfig",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContextConfig",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContextConfig",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContextWindowSize",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContextConfig",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContextConfig",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "importPath": "browser_use.browser.context",
        "description": "browser_use.browser.context",
        "isExtraImport": true,
        "detail": "browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "AzureChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "AzureChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "AzureChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "AzureChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "AzureChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "AzureChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "AzureChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "AzureChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "AzureChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "AzureChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ActionAdapter",
        "importPath": "autoppia_iwa.src.web_agents.browser_use.action_adapter",
        "description": "autoppia_iwa.src.web_agents.browser_use.action_adapter",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.browser_use.action_adapter",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebCrawlerConfig",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "PromptLLMTemplate",
        "importPath": "autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "description": "autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "OpenAIUtilsMixin",
        "importPath": "autoppia_iwa.src.llms.domain.openai.utils",
        "description": "autoppia_iwa.src.llms.domain.openai.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.openai.utils",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "statistics",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statistics",
        "description": "statistics",
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "demo_web_projects",
        "importPath": "autoppia_iwa.src.backend_demo_web.config",
        "description": "autoppia_iwa.src.backend_demo_web.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.backend_demo_web.config",
        "documentation": {}
    },
    {
        "label": "get_demo_webs_projects",
        "importPath": "autoppia_iwa.src.backend_demo_web.config",
        "description": "autoppia_iwa.src.backend_demo_web.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.backend_demo_web.config",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "BrowserUseWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.browser_use.agent",
        "description": "autoppia_iwa.src.web_agents.browser_use.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.browser_use.agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.src.web_agents.random.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "containers",
        "importPath": "dependency_injector",
        "description": "dependency_injector",
        "isExtraImport": true,
        "detail": "dependency_injector",
        "documentation": {}
    },
    {
        "label": "providers",
        "importPath": "dependency_injector",
        "description": "dependency_injector",
        "isExtraImport": true,
        "detail": "dependency_injector",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "MessageHistory",
        "importPath": "browser_use.agent.message_manager.views",
        "description": "browser_use.agent.message_manager.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.message_manager.views",
        "documentation": {}
    },
    {
        "label": "MessageMetadata",
        "importPath": "browser_use.agent.message_manager.views",
        "description": "browser_use.agent.message_manager.views",
        "isExtraImport": true,
        "detail": "browser_use.agent.message_manager.views",
        "documentation": {}
    },
    {
        "label": "AgentMessagePrompt",
        "importPath": "browser_use.agent.prompts",
        "description": "browser_use.agent.prompts",
        "isExtraImport": true,
        "detail": "browser_use.agent.prompts",
        "documentation": {}
    },
    {
        "label": "SystemPrompt",
        "importPath": "browser_use.agent.prompts",
        "description": "browser_use.agent.prompts",
        "isExtraImport": true,
        "detail": "browser_use.agent.prompts",
        "documentation": {}
    },
    {
        "label": "SystemPrompt",
        "importPath": "browser_use.agent.prompts",
        "description": "browser_use.agent.prompts",
        "isExtraImport": true,
        "detail": "browser_use.agent.prompts",
        "documentation": {}
    },
    {
        "label": "AgentMessagePrompt",
        "importPath": "browser_use.agent.prompts",
        "description": "browser_use.agent.prompts",
        "isExtraImport": true,
        "detail": "browser_use.agent.prompts",
        "documentation": {}
    },
    {
        "label": "SystemPrompt",
        "importPath": "browser_use.agent.prompts",
        "description": "browser_use.agent.prompts",
        "isExtraImport": true,
        "detail": "browser_use.agent.prompts",
        "documentation": {}
    },
    {
        "label": "BrowserState",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserState",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "TabInfo",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserState",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserState",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserStateHistory",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserState",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserStateHistory",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "TabInfo",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserStateHistory",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserError",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserState",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "TabInfo",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "URLNotAllowedError",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserState",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserState",
        "importPath": "browser_use.browser.views",
        "description": "browser_use.browser.views",
        "isExtraImport": true,
        "detail": "browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BaseChatModel",
        "importPath": "langchain_core.language_models",
        "description": "langchain_core.language_models",
        "isExtraImport": true,
        "detail": "langchain_core.language_models",
        "documentation": {}
    },
    {
        "label": "AIMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "BaseMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "SystemMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "ToolMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "AIMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "SystemMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "BaseMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "SystemMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "BaseMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "SystemMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "MessageManager",
        "importPath": "browser_use.agent.message_manager.service",
        "description": "browser_use.agent.message_manager.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.message_manager.service",
        "documentation": {}
    },
    {
        "label": "MessageManager",
        "importPath": "browser_use.agent.message_manager.service",
        "description": "browser_use.agent.message_manager.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.message_manager.service",
        "documentation": {}
    },
    {
        "label": "DOMElementNode",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "DOMTextNode",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "DOMElementNode",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "SelectorMap",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "ElementTreeSerializer",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "DOMElementNode",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "SelectorMap",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "DOMState",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "SelectorMap",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "DOMElementNode",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "CoordinateSet",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "DOMBaseNode",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "DOMElementNode",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "DOMState",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "DOMTextNode",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "SelectorMap",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "ViewportInfo",
        "importPath": "browser_use.dom.views",
        "description": "browser_use.dom.views",
        "isExtraImport": true,
        "detail": "browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "ChatAnthropic",
        "importPath": "langchain_anthropic",
        "description": "langchain_anthropic",
        "isExtraImport": true,
        "detail": "langchain_anthropic",
        "documentation": {}
    },
    {
        "label": "ChatAnthropic",
        "importPath": "langchain_anthropic",
        "description": "langchain_anthropic",
        "isExtraImport": true,
        "detail": "langchain_anthropic",
        "documentation": {}
    },
    {
        "label": "ChatAnthropic",
        "importPath": "langchain_anthropic",
        "description": "langchain_anthropic",
        "isExtraImport": true,
        "detail": "langchain_anthropic",
        "documentation": {}
    },
    {
        "label": "ChatAnthropic",
        "importPath": "langchain_anthropic",
        "description": "langchain_anthropic",
        "isExtraImport": true,
        "detail": "langchain_anthropic",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserContextConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "browser_use.browser.browser",
        "description": "browser_use.browser.browser",
        "isExtraImport": true,
        "detail": "browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use.controller.service",
        "description": "browser_use.controller.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use.controller.service",
        "description": "browser_use.controller.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use.controller.service",
        "description": "browser_use.controller.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use.controller.service",
        "description": "browser_use.controller.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use.controller.service",
        "description": "browser_use.controller.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use.controller.service",
        "description": "browser_use.controller.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use.controller.service",
        "description": "browser_use.controller.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use.controller.service",
        "description": "browser_use.controller.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use.controller.service",
        "description": "browser_use.controller.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use.controller.service",
        "description": "browser_use.controller.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "browser_use.controller.service",
        "description": "browser_use.controller.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "DOMHistoryElement",
        "importPath": "browser_use.dom.history_tree_processor.service",
        "description": "browser_use.dom.history_tree_processor.service",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.service",
        "documentation": {}
    },
    {
        "label": "HistoryTreeProcessor",
        "importPath": "browser_use.dom.history_tree_processor.service",
        "description": "browser_use.dom.history_tree_processor.service",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.service",
        "documentation": {}
    },
    {
        "label": "DOMElementNode",
        "importPath": "browser_use.dom.history_tree_processor.service",
        "description": "browser_use.dom.history_tree_processor.service",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.service",
        "documentation": {}
    },
    {
        "label": "DOMHistoryElement",
        "importPath": "browser_use.dom.history_tree_processor.service",
        "description": "browser_use.dom.history_tree_processor.service",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.service",
        "documentation": {}
    },
    {
        "label": "HistoryTreeProcessor",
        "importPath": "browser_use.dom.history_tree_processor.service",
        "description": "browser_use.dom.history_tree_processor.service",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.service",
        "documentation": {}
    },
    {
        "label": "DOMHistoryElement",
        "importPath": "browser_use.dom.history_tree_processor.service",
        "description": "browser_use.dom.history_tree_processor.service",
        "isExtraImport": true,
        "detail": "browser_use.dom.history_tree_processor.service",
        "documentation": {}
    },
    {
        "label": "ProductTelemetry",
        "importPath": "browser_use.telemetry.service",
        "description": "browser_use.telemetry.service",
        "isExtraImport": true,
        "detail": "browser_use.telemetry.service",
        "documentation": {}
    },
    {
        "label": "ProductTelemetry",
        "importPath": "browser_use.telemetry.service",
        "description": "browser_use.telemetry.service",
        "isExtraImport": true,
        "detail": "browser_use.telemetry.service",
        "documentation": {}
    },
    {
        "label": "AgentEndTelemetryEvent",
        "importPath": "browser_use.telemetry.views",
        "description": "browser_use.telemetry.views",
        "isExtraImport": true,
        "detail": "browser_use.telemetry.views",
        "documentation": {}
    },
    {
        "label": "AgentRunTelemetryEvent",
        "importPath": "browser_use.telemetry.views",
        "description": "browser_use.telemetry.views",
        "isExtraImport": true,
        "detail": "browser_use.telemetry.views",
        "documentation": {}
    },
    {
        "label": "AgentStepTelemetryEvent",
        "importPath": "browser_use.telemetry.views",
        "description": "browser_use.telemetry.views",
        "isExtraImport": true,
        "detail": "browser_use.telemetry.views",
        "documentation": {}
    },
    {
        "label": "ControllerRegisteredFunctionsTelemetryEvent",
        "importPath": "browser_use.telemetry.views",
        "description": "browser_use.telemetry.views",
        "isExtraImport": true,
        "detail": "browser_use.telemetry.views",
        "documentation": {}
    },
    {
        "label": "RegisteredFunction",
        "importPath": "browser_use.telemetry.views",
        "description": "browser_use.telemetry.views",
        "isExtraImport": true,
        "detail": "browser_use.telemetry.views",
        "documentation": {}
    },
    {
        "label": "BaseTelemetryEvent",
        "importPath": "browser_use.telemetry.views",
        "description": "browser_use.telemetry.views",
        "isExtraImport": true,
        "detail": "browser_use.telemetry.views",
        "documentation": {}
    },
    {
        "label": "time_execution_async",
        "importPath": "browser_use.utils",
        "description": "browser_use.utils",
        "isExtraImport": true,
        "detail": "browser_use.utils",
        "documentation": {}
    },
    {
        "label": "time_execution_sync",
        "importPath": "browser_use.utils",
        "description": "browser_use.utils",
        "isExtraImport": true,
        "detail": "browser_use.utils",
        "documentation": {}
    },
    {
        "label": "time_execution_sync",
        "importPath": "browser_use.utils",
        "description": "browser_use.utils",
        "isExtraImport": true,
        "detail": "browser_use.utils",
        "documentation": {}
    },
    {
        "label": "time_execution_async",
        "importPath": "browser_use.utils",
        "description": "browser_use.utils",
        "isExtraImport": true,
        "detail": "browser_use.utils",
        "documentation": {}
    },
    {
        "label": "time_execution_sync",
        "importPath": "browser_use.utils",
        "description": "browser_use.utils",
        "isExtraImport": true,
        "detail": "browser_use.utils",
        "documentation": {}
    },
    {
        "label": "time_execution_sync",
        "importPath": "browser_use.utils",
        "description": "browser_use.utils",
        "isExtraImport": true,
        "detail": "browser_use.utils",
        "documentation": {}
    },
    {
        "label": "singleton",
        "importPath": "browser_use.utils",
        "description": "browser_use.utils",
        "isExtraImport": true,
        "detail": "browser_use.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "browser_use.utils",
        "description": "browser_use.utils",
        "isExtraImport": true,
        "detail": "browser_use.utils",
        "documentation": {}
    },
    {
        "label": "ResourceExhausted",
        "importPath": "google.api_core.exceptions",
        "description": "google.api_core.exceptions",
        "isExtraImport": true,
        "detail": "google.api_core.exceptions",
        "documentation": {}
    },
    {
        "label": "BaseChatModel",
        "importPath": "langchain_core.language_models.chat_models",
        "description": "langchain_core.language_models.chat_models",
        "isExtraImport": true,
        "detail": "langchain_core.language_models.chat_models",
        "documentation": {}
    },
    {
        "label": "BaseChatModel",
        "importPath": "langchain_core.language_models.chat_models",
        "description": "langchain_core.language_models.chat_models",
        "isExtraImport": true,
        "detail": "langchain_core.language_models.chat_models",
        "documentation": {}
    },
    {
        "label": "BaseChatModel",
        "importPath": "langchain_core.language_models.chat_models",
        "description": "langchain_core.language_models.chat_models",
        "isExtraImport": true,
        "detail": "langchain_core.language_models.chat_models",
        "documentation": {}
    },
    {
        "label": "BaseChatModel",
        "importPath": "langchain_core.language_models.chat_models",
        "description": "langchain_core.language_models.chat_models",
        "isExtraImport": true,
        "detail": "langchain_core.language_models.chat_models",
        "documentation": {}
    },
    {
        "label": "observe",
        "importPath": "lmnr",
        "description": "lmnr",
        "isExtraImport": true,
        "detail": "lmnr",
        "documentation": {}
    },
    {
        "label": "Registry",
        "importPath": "browser_use.controller.registry.service",
        "description": "browser_use.controller.registry.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.registry.service",
        "documentation": {}
    },
    {
        "label": "Registry",
        "importPath": "browser_use.controller.registry.service",
        "description": "browser_use.controller.registry.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.registry.service",
        "documentation": {}
    },
    {
        "label": "Registry",
        "importPath": "browser_use.controller.registry.service",
        "description": "browser_use.controller.registry.service",
        "isExtraImport": true,
        "detail": "browser_use.controller.registry.service",
        "documentation": {}
    },
    {
        "label": "ClickElementAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "DoneAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "ExtractPageContentAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "ClickElementAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "DoneAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "ExtractPageContentAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "GoToUrlAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "InputTextAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "NoParamsAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "OpenTabAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "ScrollAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "SearchGoogleAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "SendKeysAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "SwitchTabAction",
        "importPath": "browser_use.controller.views",
        "description": "browser_use.controller.views",
        "isExtraImport": true,
        "detail": "browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "ProxySettings",
        "importPath": "playwright._impl._api_structures",
        "description": "playwright._impl._api_structures",
        "isExtraImport": true,
        "detail": "playwright._impl._api_structures",
        "documentation": {}
    },
    {
        "label": "DomService",
        "importPath": "browser_use.dom.service",
        "description": "browser_use.dom.service",
        "isExtraImport": true,
        "detail": "browser_use.dom.service",
        "documentation": {}
    },
    {
        "label": "DomService",
        "importPath": "browser_use.dom.service",
        "description": "browser_use.dom.service",
        "isExtraImport": true,
        "detail": "browser_use.dom.service",
        "documentation": {}
    },
    {
        "label": "MainContentExtractor",
        "importPath": "main_content_extractor",
        "description": "main_content_extractor",
        "isExtraImport": true,
        "detail": "main_content_extractor",
        "documentation": {}
    },
    {
        "label": "count_string_tokens",
        "importPath": "tokencost",
        "description": "tokencost",
        "isExtraImport": true,
        "detail": "tokencost",
        "documentation": {}
    },
    {
        "label": "resources",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "Posthog",
        "importPath": "posthog",
        "description": "posthog",
        "isExtraImport": true,
        "detail": "posthog",
        "documentation": {}
    },
    {
        "label": "ChatGoogleGenerativeAI",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "ChatGoogleGenerativeAI",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "ChatGoogleGenerativeAI",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "ChatGoogleGenerativeAI",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "ChatGoogleGenerativeAI",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "ChatGoogleGenerativeAI",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "ChatGoogleGenerativeAI",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "pyperclip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyperclip",
        "description": "pyperclip",
        "detail": "pyperclip",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "browser_use.agent.service",
        "description": "browser_use.agent.service",
        "isExtraImport": true,
        "detail": "browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "DiscordBot",
        "importPath": "examples.integrations.discord.discord_api",
        "description": "examples.integrations.discord.discord_api",
        "isExtraImport": true,
        "detail": "examples.integrations.discord.discord_api",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "browser_use.logging_config",
        "description": "browser_use.logging_config",
        "isExtraImport": true,
        "detail": "browser_use.logging_config",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "browser_use.logging_config",
        "description": "browser_use.logging_config",
        "isExtraImport": true,
        "detail": "browser_use.logging_config",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "SlackApiError",
        "importPath": "slack_sdk.errors",
        "description": "slack_sdk.errors",
        "isExtraImport": true,
        "detail": "slack_sdk.errors",
        "documentation": {}
    },
    {
        "label": "SignatureVerifier",
        "importPath": "slack_sdk.signature",
        "description": "slack_sdk.signature",
        "isExtraImport": true,
        "detail": "slack_sdk.signature",
        "documentation": {}
    },
    {
        "label": "AsyncWebClient",
        "importPath": "slack_sdk.web.async_client",
        "description": "slack_sdk.web.async_client",
        "isExtraImport": true,
        "detail": "slack_sdk.web.async_client",
        "documentation": {}
    },
    {
        "label": "SlackBot",
        "importPath": "examples.integrations.slack.slack_api",
        "description": "examples.integrations.slack.slack_api",
        "isExtraImport": true,
        "detail": "examples.integrations.slack.slack_api",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "examples.integrations.slack.slack_api",
        "description": "examples.integrations.slack.slack_api",
        "isExtraImport": true,
        "detail": "examples.integrations.slack.slack_api",
        "documentation": {}
    },
    {
        "label": "ChatBedrock",
        "importPath": "langchain_aws",
        "description": "langchain_aws",
        "isExtraImport": true,
        "detail": "langchain_aws",
        "documentation": {}
    },
    {
        "label": "ChatOllama",
        "importPath": "langchain_ollama",
        "description": "langchain_ollama",
        "isExtraImport": true,
        "detail": "langchain_ollama",
        "documentation": {}
    },
    {
        "label": "ChatOllama",
        "importPath": "langchain_ollama",
        "description": "langchain_ollama",
        "isExtraImport": true,
        "detail": "langchain_ollama",
        "documentation": {}
    },
    {
        "label": "ChatOllama",
        "importPath": "langchain_ollama",
        "description": "langchain_ollama",
        "isExtraImport": true,
        "detail": "langchain_ollama",
        "documentation": {}
    },
    {
        "label": "ChatOllama",
        "importPath": "langchain_ollama",
        "description": "langchain_ollama",
        "isExtraImport": true,
        "detail": "langchain_ollama",
        "documentation": {}
    },
    {
        "label": "gradio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gradio",
        "description": "gradio",
        "detail": "gradio",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "rich.text",
        "description": "rich.text",
        "isExtraImport": true,
        "detail": "rich.text",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "PdfReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "Llama",
        "importPath": "llama_cpp",
        "description": "llama_cpp",
        "isExtraImport": true,
        "detail": "llama_cpp",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AnonymousUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "make_aware",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "make_aware",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "accounts.managers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "accounts.managers",
        "description": "accounts.managers",
        "detail": "accounts.managers",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "importPath": "accounts.managers",
        "description": "accounts.managers",
        "isExtraImport": true,
        "detail": "accounts.managers",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "events.utils",
        "description": "events.utils",
        "isExtraImport": true,
        "detail": "events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "events.utils",
        "description": "events.utils",
        "isExtraImport": true,
        "detail": "events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "events.utils",
        "description": "events.utils",
        "isExtraImport": true,
        "detail": "events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "events.utils",
        "description": "events.utils",
        "isExtraImport": true,
        "detail": "events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "events.utils",
        "description": "events.utils",
        "isExtraImport": true,
        "detail": "events.utils",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "EditProfileView",
        "importPath": "jobsapp.views",
        "description": "jobsapp.views",
        "isExtraImport": true,
        "detail": "jobsapp.views",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "RedirectView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "RedirectView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "EmployeeRegistrationForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "EmployerRegistrationForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "UserLoginForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "EmployeeProfileUpdateForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "events.models",
        "description": "events.models",
        "isExtraImport": true,
        "detail": "events.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "events.models",
        "description": "events.models",
        "isExtraImport": true,
        "detail": "events.models",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "WhiteNoise",
        "importPath": "whitenoise",
        "description": "whitenoise",
        "isExtraImport": true,
        "detail": "whitenoise",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "importPath": "jobsapp.reset_seed",
        "description": "jobsapp.reset_seed",
        "isExtraImport": true,
        "detail": "jobsapp.reset_seed",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "importPath": "jobsapp.reset_seed",
        "description": "jobsapp.reset_seed",
        "isExtraImport": true,
        "detail": "jobsapp.reset_seed",
        "documentation": {}
    },
    {
        "label": "Applicant",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Applicant",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Applicant",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Applicant",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Contact",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "user_is_employee",
        "importPath": "jobsapp.decorators",
        "description": "jobsapp.decorators",
        "isExtraImport": true,
        "detail": "jobsapp.decorators",
        "documentation": {}
    },
    {
        "label": "user_is_employer",
        "importPath": "jobsapp.decorators",
        "description": "jobsapp.decorators",
        "isExtraImport": true,
        "detail": "jobsapp.decorators",
        "documentation": {}
    },
    {
        "label": "CreateJobForm",
        "importPath": "jobsapp.forms",
        "description": "jobsapp.forms",
        "isExtraImport": true,
        "detail": "jobsapp.forms",
        "documentation": {}
    },
    {
        "label": "ApplyJobForm",
        "importPath": "jobsapp.forms",
        "description": "jobsapp.forms",
        "isExtraImport": true,
        "detail": "jobsapp.forms",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "importPath": "jobsapp.forms",
        "description": "jobsapp.forms",
        "isExtraImport": true,
        "detail": "jobsapp.forms",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "RedirectView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "SimpleRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "importPath": "events.events",
        "description": "events.events",
        "isExtraImport": true,
        "detail": "events.events",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "sentry_sdk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sentry_sdk",
        "description": "sentry_sdk",
        "detail": "sentry_sdk",
        "documentation": {}
    },
    {
        "label": "DjangoIntegration",
        "importPath": "sentry_sdk.integrations.django",
        "description": "sentry_sdk.integrations.django",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.django",
        "documentation": {}
    },
    {
        "label": "LoggingIntegration",
        "importPath": "sentry_sdk.integrations.logging",
        "description": "sentry_sdk.integrations.logging",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.logging",
        "documentation": {}
    },
    {
        "label": "RedisIntegration",
        "importPath": "sentry_sdk.integrations.redis",
        "description": "sentry_sdk.integrations.redis",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.redis",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "importPath": "pythondjangocrud.apps.users.api.views",
        "description": "pythondjangocrud.apps.users.api.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.api.views",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "importPath": "pythondjangocrud.apps.users.api.views",
        "description": "pythondjangocrud.apps.users.api.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.api.views",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "staticfiles_urlpatterns",
        "importPath": "django.contrib.staticfiles.urls",
        "description": "django.contrib.staticfiles.urls",
        "isExtraImport": true,
        "detail": "django.contrib.staticfiles.urls",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "importPath": "config.swagger",
        "description": "config.swagger",
        "isExtraImport": true,
        "detail": "config.swagger",
        "documentation": {}
    },
    {
        "label": "Attendance",
        "importPath": "pythondjangocrud.apps.attendance.models",
        "description": "pythondjangocrud.apps.attendance.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.attendance.models",
        "documentation": {}
    },
    {
        "label": "Attendance",
        "importPath": "pythondjangocrud.apps.attendance.models",
        "description": "pythondjangocrud.apps.attendance.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.attendance.models",
        "documentation": {}
    },
    {
        "label": "AuditAdminMixin",
        "importPath": "pythondjangocrud.core.admin",
        "description": "pythondjangocrud.core.admin",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "AuditAdminMixin",
        "importPath": "pythondjangocrud.core.admin",
        "description": "pythondjangocrud.core.admin",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "AuditAdminMixin",
        "importPath": "pythondjangocrud.core.admin",
        "description": "pythondjangocrud.core.admin",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "AuditAdminMixin",
        "importPath": "pythondjangocrud.core.admin",
        "description": "pythondjangocrud.core.admin",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "AuditAdminMixin",
        "importPath": "pythondjangocrud.core.admin",
        "description": "pythondjangocrud.core.admin",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "AbstractChoice",
        "importPath": "pythondjangocrud.core.models",
        "description": "pythondjangocrud.core.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.models",
        "documentation": {}
    },
    {
        "label": "AbstractChoice",
        "importPath": "pythondjangocrud.core.models",
        "description": "pythondjangocrud.core.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.models",
        "documentation": {}
    },
    {
        "label": "AbstractChoice",
        "importPath": "pythondjangocrud.core.models",
        "description": "pythondjangocrud.core.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.models",
        "documentation": {}
    },
    {
        "label": "AbstractChoice",
        "importPath": "pythondjangocrud.core.models",
        "description": "pythondjangocrud.core.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.models",
        "documentation": {}
    },
    {
        "label": "AbstractChoice",
        "importPath": "pythondjangocrud.core.models",
        "description": "pythondjangocrud.core.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.models",
        "documentation": {}
    },
    {
        "label": "CoreManager",
        "importPath": "pythondjangocrud.core.models",
        "description": "pythondjangocrud.core.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "pythondjangocrud.apps.employee.models",
        "description": "pythondjangocrud.apps.employee.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.employee.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "pythondjangocrud.apps.employee.models",
        "description": "pythondjangocrud.apps.employee.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.employee.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "pythondjangocrud.apps.employee.models",
        "description": "pythondjangocrud.apps.employee.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.employee.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "pythondjangocrud.apps.employee.models",
        "description": "pythondjangocrud.apps.employee.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.employee.models",
        "documentation": {}
    },
    {
        "label": "AttendanceViewSet",
        "importPath": "pythondjangocrud.apps.attendance.views",
        "description": "pythondjangocrud.apps.attendance.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.attendance.views",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "GenericViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "AttendanceSerializer",
        "importPath": "pythondjangocrud.apps.attendance.serializers",
        "description": "pythondjangocrud.apps.attendance.serializers",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.attendance.serializers",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "pythondjangocrud.apps.events.utils",
        "description": "pythondjangocrud.apps.events.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "pythondjangocrud.apps.events.utils",
        "description": "pythondjangocrud.apps.events.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "pythondjangocrud.apps.events.utils",
        "description": "pythondjangocrud.apps.events.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "pythondjangocrud.apps.events.utils",
        "description": "pythondjangocrud.apps.events.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "pythondjangocrud.apps.events.utils",
        "description": "pythondjangocrud.apps.events.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "pythondjangocrud.apps.events.utils",
        "description": "pythondjangocrud.apps.events.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "pythondjangocrud.apps.department.models",
        "description": "pythondjangocrud.apps.department.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.department.models",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "pythondjangocrud.apps.department.models",
        "description": "pythondjangocrud.apps.department.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.department.models",
        "documentation": {}
    },
    {
        "label": "DepartmentViewSet",
        "importPath": "pythondjangocrud.apps.department.views",
        "description": "pythondjangocrud.apps.department.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.department.views",
        "documentation": {}
    },
    {
        "label": "DepartmentSerializer",
        "importPath": "pythondjangocrud.apps.department.serializers",
        "description": "pythondjangocrud.apps.department.serializers",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.department.serializers",
        "documentation": {}
    },
    {
        "label": "EmployeeViewSet",
        "importPath": "pythondjangocrud.apps.employee.views",
        "description": "pythondjangocrud.apps.employee.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.employee.views",
        "documentation": {}
    },
    {
        "label": "EmployeeSerializer",
        "importPath": "pythondjangocrud.apps.employee.serializers",
        "description": "pythondjangocrud.apps.employee.serializers",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.employee.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "pythondjangocrud.apps.events.models",
        "description": "pythondjangocrud.apps.events.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "pythondjangocrud.apps.events.models",
        "description": "pythondjangocrud.apps.events.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.models",
        "documentation": {}
    },
    {
        "label": "Payroll",
        "importPath": "pythondjangocrud.apps.payroll.models",
        "description": "pythondjangocrud.apps.payroll.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.payroll.models",
        "documentation": {}
    },
    {
        "label": "Payroll",
        "importPath": "pythondjangocrud.apps.payroll.models",
        "description": "pythondjangocrud.apps.payroll.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.payroll.models",
        "documentation": {}
    },
    {
        "label": "PayrollViewSet",
        "importPath": "pythondjangocrud.apps.payroll.views",
        "description": "pythondjangocrud.apps.payroll.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.payroll.views",
        "documentation": {}
    },
    {
        "label": "PayrollSerializer",
        "importPath": "pythondjangocrud.apps.payroll.serializers",
        "description": "pythondjangocrud.apps.payroll.serializers",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.payroll.serializers",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "pythondjangocrud.apps.position.models",
        "description": "pythondjangocrud.apps.position.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.position.models",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "pythondjangocrud.apps.position.models",
        "description": "pythondjangocrud.apps.position.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.position.models",
        "documentation": {}
    },
    {
        "label": "PositionViewSet",
        "importPath": "pythondjangocrud.apps.position.views",
        "description": "pythondjangocrud.apps.position.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.position.views",
        "documentation": {}
    },
    {
        "label": "PositionSerializer",
        "importPath": "pythondjangocrud.apps.position.serializers",
        "description": "pythondjangocrud.apps.position.serializers",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.position.serializers",
        "documentation": {}
    },
    {
        "label": "ListModelMixin",
        "importPath": "rest_framework.mixins",
        "description": "rest_framework.mixins",
        "isExtraImport": true,
        "detail": "rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "RetrieveModelMixin",
        "importPath": "rest_framework.mixins",
        "description": "rest_framework.mixins",
        "isExtraImport": true,
        "detail": "rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "UpdateModelMixin",
        "importPath": "rest_framework.mixins",
        "description": "rest_framework.mixins",
        "isExtraImport": true,
        "detail": "rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "factory",
        "description": "factory",
        "isExtraImport": true,
        "detail": "factory",
        "documentation": {}
    },
    {
        "label": "post_generation",
        "importPath": "factory",
        "description": "factory",
        "isExtraImport": true,
        "detail": "factory",
        "documentation": {}
    },
    {
        "label": "DjangoModelFactory",
        "importPath": "factory.django",
        "description": "factory.django",
        "isExtraImport": true,
        "detail": "factory.django",
        "documentation": {}
    },
    {
        "label": "RequestFactory",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "RequestFactory",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "UserAdminCreationForm",
        "importPath": "pythondjangocrud.apps.users.forms",
        "description": "pythondjangocrud.apps.users.forms",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "UserAdminChangeForm",
        "importPath": "pythondjangocrud.apps.users.forms",
        "description": "pythondjangocrud.apps.users.forms",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "UserAdminChangeForm",
        "importPath": "pythondjangocrud.apps.users.forms",
        "description": "pythondjangocrud.apps.users.forms",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "UserAdminCreationForm",
        "importPath": "pythondjangocrud.apps.users.forms",
        "description": "pythondjangocrud.apps.users.forms",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "MessageMiddleware",
        "importPath": "django.contrib.messages.middleware",
        "description": "django.contrib.messages.middleware",
        "isExtraImport": true,
        "detail": "django.contrib.messages.middleware",
        "documentation": {}
    },
    {
        "label": "SessionMiddleware",
        "importPath": "django.contrib.sessions.middleware",
        "description": "django.contrib.sessions.middleware",
        "isExtraImport": true,
        "detail": "django.contrib.sessions.middleware",
        "documentation": {}
    },
    {
        "label": "UserFactory",
        "importPath": "pythondjangocrud.apps.users.tests.factories",
        "description": "pythondjangocrud.apps.users.tests.factories",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.tests.factories",
        "documentation": {}
    },
    {
        "label": "UserFactory",
        "importPath": "pythondjangocrud.apps.users.tests.factories",
        "description": "pythondjangocrud.apps.users.tests.factories",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.tests.factories",
        "documentation": {}
    },
    {
        "label": "UserRedirectView",
        "importPath": "pythondjangocrud.apps.users.views",
        "description": "pythondjangocrud.apps.users.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "UserUpdateView",
        "importPath": "pythondjangocrud.apps.users.views",
        "description": "pythondjangocrud.apps.users.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "user_detail_view",
        "importPath": "pythondjangocrud.apps.users.views",
        "description": "pythondjangocrud.apps.users.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "DefaultAccountAdapter",
        "importPath": "allauth.account.adapter",
        "description": "allauth.account.adapter",
        "isExtraImport": true,
        "detail": "allauth.account.adapter",
        "documentation": {}
    },
    {
        "label": "DefaultSocialAccountAdapter",
        "importPath": "allauth.socialaccount.adapter",
        "description": "allauth.socialaccount.adapter",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.adapter",
        "documentation": {}
    },
    {
        "label": "SignupForm",
        "importPath": "allauth.account.forms",
        "description": "allauth.account.forms",
        "isExtraImport": true,
        "detail": "allauth.account.forms",
        "documentation": {}
    },
    {
        "label": "SignupForm",
        "importPath": "allauth.socialaccount.forms",
        "description": "allauth.socialaccount.forms",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.forms",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "SuccessMessageMixin",
        "importPath": "django.contrib.messages.views",
        "description": "django.contrib.messages.views",
        "isExtraImport": true,
        "detail": "django.contrib.messages.views",
        "documentation": {}
    },
    {
        "label": "django.contrib.sites.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.sites.models",
        "description": "django.contrib.sites.models",
        "detail": "django.contrib.sites.models",
        "documentation": {}
    },
    {
        "label": "_simple_domain_name_validator",
        "importPath": "django.contrib.sites.models",
        "description": "django.contrib.sites.models",
        "isExtraImport": true,
        "detail": "django.contrib.sites.models",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "crum",
        "description": "crum",
        "isExtraImport": true,
        "detail": "crum",
        "documentation": {}
    },
    {
        "label": "GenericAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "camel_to_snake_object_keys",
        "importPath": "pythondjangocrud.core.utils",
        "description": "pythondjangocrud.core.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "obtain_jwt_token",
        "importPath": "rest_framework_jwt.views",
        "description": "rest_framework_jwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_jwt.views",
        "documentation": {}
    },
    {
        "label": "refresh_jwt_token",
        "importPath": "rest_framework_jwt.views",
        "description": "rest_framework_jwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_jwt.views",
        "documentation": {}
    },
    {
        "label": "verify_jwt_token",
        "importPath": "rest_framework_jwt.views",
        "description": "rest_framework_jwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_jwt.views",
        "documentation": {}
    },
    {
        "label": "S3Boto3Storage",
        "importPath": "storages.backends.s3boto3",
        "description": "storages.backends.s3boto3",
        "isExtraImport": true,
        "detail": "storages.backends.s3boto3",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "importPath": "backend.pythondjangocrud.apps.events.events",
        "description": "backend.pythondjangocrud.apps.events.events",
        "isExtraImport": true,
        "detail": "backend.pythondjangocrud.apps.events.events",
        "documentation": {}
    },
    {
        "label": "AutoppiaWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "description": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "documentation": {}
    },
    {
        "label": "AutoppiaWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "description": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "documentation": {}
    },
    {
        "label": "AutoppiaWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "description": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "documentation": {}
    },
    {
        "label": "AutoppiaWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "description": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "documentation": {}
    },
    {
        "label": "AutoppiaWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "description": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "documentation": {}
    },
    {
        "label": "AutoppiaWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "description": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "documentation": {}
    },
    {
        "label": "TaskPromptGenerator",
        "importPath": "autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "description": "autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "documentation": {}
    },
    {
        "label": "TaskTestGenerator",
        "importPath": "autoppia_iwa.src.data_generation.application.task_tests_generator",
        "description": "autoppia_iwa.src.data_generation.application.task_tests_generator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.task_tests_generator",
        "documentation": {}
    },
    {
        "label": "setuptools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "setuptools",
        "description": "setuptools",
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "BaseMinerNeuron",
        "importPath": "src.base.miner",
        "description": "src.base.miner",
        "isExtraImport": true,
        "detail": "src.base.miner",
        "documentation": {}
    },
    {
        "label": "TaskSynapse",
        "importPath": "src.protocol",
        "description": "src.protocol",
        "isExtraImport": true,
        "detail": "src.protocol",
        "documentation": {}
    },
    {
        "label": "Dummy",
        "importPath": "src.protocol",
        "description": "src.protocol",
        "isExtraImport": true,
        "detail": "src.protocol",
        "documentation": {}
    },
    {
        "label": "TaskSynapse",
        "importPath": "src.protocol",
        "description": "src.protocol",
        "isExtraImport": true,
        "detail": "src.protocol",
        "documentation": {}
    },
    {
        "label": "DefaultWebAgent",
        "importPath": "web_agents.default_web_agent",
        "description": "web_agents.default_web_agent",
        "isExtraImport": true,
        "detail": "web_agents.default_web_agent",
        "documentation": {}
    },
    {
        "label": "bittensor",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bittensor",
        "description": "bittensor",
        "detail": "bittensor",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseValidatorNeuron",
        "importPath": "src.base.validator",
        "description": "src.base.validator",
        "isExtraImport": true,
        "detail": "src.base.validator",
        "documentation": {}
    },
    {
        "label": "forward",
        "importPath": "src.validator",
        "description": "src.validator",
        "isExtraImport": true,
        "detail": "src.validator",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "BaseNeuron",
        "importPath": "src.base.neuron",
        "description": "src.base.neuron",
        "isExtraImport": true,
        "detail": "src.base.neuron",
        "documentation": {}
    },
    {
        "label": "BaseNeuron",
        "importPath": "src.base.neuron",
        "description": "src.base.neuron",
        "isExtraImport": true,
        "detail": "src.base.neuron",
        "documentation": {}
    },
    {
        "label": "add_miner_args",
        "importPath": "src.utils.config",
        "description": "src.utils.config",
        "isExtraImport": true,
        "detail": "src.utils.config",
        "documentation": {}
    },
    {
        "label": "add_validator_args",
        "importPath": "src.utils.config",
        "description": "src.utils.config",
        "isExtraImport": true,
        "detail": "src.utils.config",
        "documentation": {}
    },
    {
        "label": "check_config",
        "importPath": "template.utils.config",
        "description": "template.utils.config",
        "isExtraImport": true,
        "detail": "template.utils.config",
        "documentation": {}
    },
    {
        "label": "add_args",
        "importPath": "template.utils.config",
        "description": "template.utils.config",
        "isExtraImport": true,
        "detail": "template.utils.config",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "template.utils.config",
        "description": "template.utils.config",
        "isExtraImport": true,
        "detail": "template.utils.config",
        "documentation": {}
    },
    {
        "label": "ttl_get_block",
        "importPath": "template.utils.misc",
        "description": "template.utils.misc",
        "isExtraImport": true,
        "detail": "template.utils.misc",
        "documentation": {}
    },
    {
        "label": "__spec_version__",
        "importPath": "template",
        "description": "template",
        "isExtraImport": true,
        "detail": "template",
        "documentation": {}
    },
    {
        "label": "MockSubtensor",
        "importPath": "template.mock",
        "description": "template.mock",
        "isExtraImport": true,
        "detail": "template.mock",
        "documentation": {}
    },
    {
        "label": "MockMetagraph",
        "importPath": "template.mock",
        "description": "template.mock",
        "isExtraImport": true,
        "detail": "template.mock",
        "documentation": {}
    },
    {
        "label": "process_weights_for_netuid",
        "importPath": "src.base.utils.weight_utils",
        "description": "src.base.utils.weight_utils",
        "isExtraImport": true,
        "detail": "src.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "convert_weights_and_uids_for_emit",
        "importPath": "src.base.utils.weight_utils",
        "description": "src.base.utils.weight_utils",
        "isExtraImport": true,
        "detail": "src.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "get_rewards",
        "importPath": "src.validator.reward",
        "description": "src.validator.reward",
        "isExtraImport": true,
        "detail": "src.validator.reward",
        "documentation": {}
    },
    {
        "label": "get_random_uids",
        "importPath": "src.utils.uids",
        "description": "src.utils.uids",
        "isExtraImport": true,
        "detail": "src.utils.uids",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "LLM_PROVIDER",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "LLM_PROVIDER = os.getenv(\"LLM_PROVIDER\", \"local\")  # Can be \"serverless\", \"local\", or \"openai\"\nLLM_THRESHOLD = 100\nLOCAL_MODEL_ENDPOINT = os.getenv(\"LOCAL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"OPENAI_MAX_TOKENS\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.7))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LLM_THRESHOLD",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "LLM_THRESHOLD = 100\nLOCAL_MODEL_ENDPOINT = os.getenv(\"LOCAL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"OPENAI_MAX_TOKENS\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.7))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LOCAL_MODEL_ENDPOINT",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "LOCAL_MODEL_ENDPOINT = os.getenv(\"LOCAL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"OPENAI_MAX_TOKENS\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.7))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"OPENAI_MAX_TOKENS\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.7))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================\n# Database and File Configuration\n# ==================================",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MODEL",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "OPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"OPENAI_MAX_TOKENS\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.7))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================\n# Database and File Configuration\n# ==================================\nMONGODB_URL = \"mongodb://localhost:27017\"",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MAX_TOKENS",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "OPENAI_MAX_TOKENS = int(os.getenv(\"OPENAI_MAX_TOKENS\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.7))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================\n# Database and File Configuration\n# ==================================\nMONGODB_URL = \"mongodb://localhost:27017\"\nMONGODB_NAME = \"workflow\"",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_TEMPERATURE",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "OPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.7))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================\n# Database and File Configuration\n# ==================================\nMONGODB_URL = \"mongodb://localhost:27017\"\nMONGODB_NAME = \"workflow\"\nANALYSIS_COLLECTION = \"web_analysis\"",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "MONGODB_URL",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "MONGODB_URL = \"mongodb://localhost:27017\"\nMONGODB_NAME = \"workflow\"\nANALYSIS_COLLECTION = \"web_analysis\"\nTASKS_COLLECTION = \"tasks\"\nDOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "MONGODB_NAME",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "MONGODB_NAME = \"workflow\"\nANALYSIS_COLLECTION = \"web_analysis\"\nTASKS_COLLECTION = \"tasks\"\nDOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "ANALYSIS_COLLECTION",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "ANALYSIS_COLLECTION = \"web_analysis\"\nTASKS_COLLECTION = \"tasks\"\nDOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "TASKS_COLLECTION",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "TASKS_COLLECTION = \"tasks\"\nDOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "DOCUMENTS_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "DOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROMEDRIVER_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "CHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration\n# ============================\nGENERATE_MILESTONES = os.getenv(\"GENERATE_MILESTONES\", \"false\").lower() == \"true\"\n# ============================\n# Project Base Directory Path",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROME_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "CHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration\n# ============================\nGENERATE_MILESTONES = os.getenv(\"GENERATE_MILESTONES\", \"false\").lower() == \"true\"\n# ============================\n# Project Base Directory Path\n# ============================",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROFILE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "PROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration\n# ============================\nGENERATE_MILESTONES = os.getenv(\"GENERATE_MILESTONES\", \"false\").lower() == \"true\"\n# ============================\n# Project Base Directory Path\n# ============================\nPROJECT_BASE_DIR = Path(__file__).resolve().parents[1]",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROFILE",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "PROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration\n# ============================\nGENERATE_MILESTONES = os.getenv(\"GENERATE_MILESTONES\", \"false\").lower() == \"true\"\n# ============================\n# Project Base Directory Path\n# ============================\nPROJECT_BASE_DIR = Path(__file__).resolve().parents[1]",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "GENERATE_MILESTONES",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "GENERATE_MILESTONES = os.getenv(\"GENERATE_MILESTONES\", \"false\").lower() == \"true\"\n# ============================\n# Project Base Directory Path\n# ============================\nPROJECT_BASE_DIR = Path(__file__).resolve().parents[1]",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.config.config",
        "description": "autoppia_iwa.autoppia_iwa.config.config",
        "peekOfCode": "PROJECT_BASE_DIR = Path(__file__).resolve().parents[1]",
        "detail": "autoppia_iwa.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "BackendDemoWebService",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.backend_demo_web_service",
        "description": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.backend_demo_web_service",
        "peekOfCode": "class BackendDemoWebService:\n    \"\"\"\n    Service for interacting with backend of the demo web endpoints.\n    \"\"\"\n    def __init__(self, base_url: str) -> None:\n        \"\"\"\n        Initialize the service.\n        Args:\n            base_url (str): Base URL for the backend API.\n        \"\"\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.backend_demo_web_service",
        "documentation": {}
    },
    {
        "label": "BackendEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.classes",
        "peekOfCode": "class BackendEvent(BaseModel):\n    \"\"\"\n    Represents a validated event payload with application-specific constraints.\n    Enforces proper event-application relationships and provides rich metadata.\n    \"\"\"\n    event_type: str\n    description: str\n    data: Optional[Dict[str, Any]] = None\n    user_id: Optional[int] = None\n    created_at: datetime = datetime.now()",
        "detail": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.classes",
        "documentation": {}
    },
    {
        "label": "get_frontend_url",
        "kind": 2,
        "importPath": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "description": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "peekOfCode": "def get_frontend_url(index):\n    return f\"{DEMO_WEBS_ENDPOINT}:{str(8000 + index)}\"\ndef get_backend_url(index: int, symetric=True):\n    if symetric:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + (index))}\"\n    else:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + (index + 1))}\"\ndemo_web_projects = [\n    WebProject(\n        name=\"jobs\",",
        "detail": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "documentation": {}
    },
    {
        "label": "get_backend_url",
        "kind": 2,
        "importPath": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "description": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "peekOfCode": "def get_backend_url(index: int, symetric=True):\n    if symetric:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + (index))}\"\n    else:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + (index + 1))}\"\ndemo_web_projects = [\n    WebProject(\n        name=\"jobs\",\n        frontend_url=get_frontend_url(index=0),\n        backend_url=get_backend_url(index=0),",
        "detail": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "documentation": {}
    },
    {
        "label": "get_demo_webs_projects",
        "kind": 2,
        "importPath": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "description": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "peekOfCode": "def get_demo_webs_projects():\n    return demo_web_projects",
        "detail": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "documentation": {}
    },
    {
        "label": "DEMO_WEBS_ENDPOINT",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "description": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "peekOfCode": "DEMO_WEBS_ENDPOINT = os.getenv(\"DEMO_WEBS_ENDPOINT\")\nDEMO_WEBS_STARTING_PORT = int(os.getenv(\"DEMO_WEBS_STARTING_PORT\", '8000'))\ndef get_frontend_url(index):\n    return f\"{DEMO_WEBS_ENDPOINT}:{str(8000 + index)}\"\ndef get_backend_url(index: int, symetric=True):\n    if symetric:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + (index))}\"\n    else:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + (index + 1))}\"\ndemo_web_projects = [",
        "detail": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "documentation": {}
    },
    {
        "label": "DEMO_WEBS_STARTING_PORT",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "description": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "peekOfCode": "DEMO_WEBS_STARTING_PORT = int(os.getenv(\"DEMO_WEBS_STARTING_PORT\", '8000'))\ndef get_frontend_url(index):\n    return f\"{DEMO_WEBS_ENDPOINT}:{str(8000 + index)}\"\ndef get_backend_url(index: int, symetric=True):\n    if symetric:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + (index))}\"\n    else:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + (index + 1))}\"\ndemo_web_projects = [\n    WebProject(",
        "detail": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "documentation": {}
    },
    {
        "label": "demo_web_projects",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "description": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "peekOfCode": "demo_web_projects = [\n    WebProject(\n        name=\"jobs\",\n        frontend_url=get_frontend_url(index=0),\n        backend_url=get_backend_url(index=0),\n        events_to_check=events_allowed_web_1,\n    )\n    # ),\n    # DemoWebProject(\n    #     name=\"angular\",",
        "detail": "autoppia_iwa.autoppia_iwa.src.backend_demo_web.config",
        "documentation": {}
    },
    {
        "label": "TaskPromptGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "peekOfCode": "class TaskPromptGenerator:\n    @inject\n    def __init__(\n        self,\n        web_analysis: DomainAnalysis,\n        num_prompts_per_url: int = 1,\n        llm_service: ILLMService = Provide[DIContainer.llm_service],\n    ) -> None:\n        self.web_analysis = web_analysis\n        self.llm_service = llm_service",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "documentation": {}
    },
    {
        "label": "SCHEMA_FILE_NAMES",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "peekOfCode": "SCHEMA_FILE_NAMES = {\n    TaskDifficultyLevel.EASY: \"task_prompt_generation_schema_easy.json\",\n    TaskDifficultyLevel.MEDIUM: \"task_prompt_generation_schema_medium.json\",\n    TaskDifficultyLevel.HARD: \"task_prompt_generation_schema_hard.json\",\n}\n# Prompt Templates\nSYSTEM_MSG = \"\"\"You are an expert in analyzing websites to identify manual tasks users can perform. Your task is to generate high-level, actionable \ninstructions for tasks a user can do using a mouse and/or keyboard. \nRules for generating tasks:\n1. Focus only on manual actions (e.g., clicking buttons, filling forms).",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "documentation": {}
    },
    {
        "label": "SYSTEM_MSG",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "peekOfCode": "SYSTEM_MSG = \"\"\"You are an expert in analyzing websites to identify manual tasks users can perform. Your task is to generate high-level, actionable \ninstructions for tasks a user can do using a mouse and/or keyboard. \nRules for generating tasks:\n1. Focus only on manual actions (e.g., clicking buttons, filling forms).\n2. Do not include visual tasks (e.g., reading content, reviewing images).\n3. Avoid dummy actions like navigating to the homepage or refreshing the page.\n4. Group related or follow-up actions into a single prompt when appropriate.\nEnsure all tasks are clear, actionable, and concise.\"\"\"\nUSER_MSG = \"\"\"Imagine you are a user interacting with a website. Your task is to identify all possible manual actions that can be performed on the \nwebpage using a mouse and/or keyboard. Use the provided website data to generate actionable instructions.",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "documentation": {}
    },
    {
        "label": "USER_MSG",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "peekOfCode": "USER_MSG = \"\"\"Imagine you are a user interacting with a website. Your task is to identify all possible manual actions that can be performed on the \nwebpage using a mouse and/or keyboard. Use the provided website data to generate actionable instructions.\nRules for generating tasks:\n1. Include tasks such as clicking buttons, filling out forms, or interacting with dropdowns.\n2. Do not include tasks related to reading content, reviewing images, or dummy actions (e.g., \"navigate to homepage\").\n3. Combine related or follow-up actions into a single task when appropriate.\n4. Ensure each task is actionable and described clearly.\"\"\"\nclass TaskPromptGenerator:\n    @inject\n    def __init__(",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "documentation": {}
    },
    {
        "label": "TaskTestGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_tests_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_tests_generator",
        "peekOfCode": "class TaskTestGenerator:\n    \"\"\"\n    Generates and classifies test cases into FrontendTest and BackendTest based on a task description and web analysis.\n    \"\"\"\n    @inject\n    def __init__(\n        self,\n        web_project: WebProject,\n        web_analysis: DomainAnalysis,\n        llm_service: ILLMService = Provide[DIContainer.llm_service],",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_tests_generator",
        "documentation": {}
    },
    {
        "label": "BASE_SYSTEM_MSG",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_tests_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_tests_generator",
        "peekOfCode": "BASE_SYSTEM_MSG = \"\"\"\n1. IMPORTANT RULES:\n    - You are a professional evaluator responsible for generating structured test cases for tasks on a website. \n    - Based on a task description and page analysis, you must classify and generate tests into categories.\n    - For CheckEventTest, only mention the valid urls in the web_analysis\n    - If there is any navigation performed then there must be a CheckPageViewTest.\n    - In most cases, all three test types—CheckEventTest, CheckPageViewTest, and CheckHTMLTest—are necessary.\n    - However, certain scenarios may require only one or two of them instead of all three.\n    1.1. OUTPUT FORMAT:\n        - Always return the tests as a valid JSON array, without additional text or delimiters. The format must strictly follow this structure:",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.application.task_tests_generator",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "peekOfCode": "class TaskGenerationPipeline:\n    @inject\n    def __init__(\n        self,\n        config: TaskGenerationConfig,\n        synthetic_task_repository: BaseMongoRepository = Provide[DIContainer.synthetic_task_repository],\n        llm_service: ILLMService = Provide[DIContainer.llm_service],\n        web_analysis_repository: BaseMongoRepository = Provide[DIContainer.analysis_repository],\n    ):\n        \"\"\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class WebProject(BaseModel):\n    backend_url: str = Field(..., description=\"URL of the backend server\")\n    frontend_url: str = Field(..., description=\"URL of the frontend application\")\n    name: str = Field(..., min_length=1, description=\"Name of the web project\")\n    events_to_check: List[str] = Field(default_factory=list, description=\"List of events to monitor\")\n    is_real_web: bool = False\nclass TaskDifficultyLevel(Enum):\n    \"\"\"\n    Enum representing the difficulty level of a task.\n    \"\"\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class TaskDifficultyLevel(Enum):\n    \"\"\"\n    Enum representing the difficulty level of a task.\n    \"\"\"\n    EASY = \"easy\"\n    MEDIUM = \"medium\"\n    HARD = \"hard\"\nclass TaskPromptForUrl(BaseModel):\n    \"\"\"\n    Represents a task prompt associated with a specific URL.",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskPromptForUrl",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class TaskPromptForUrl(BaseModel):\n    \"\"\"\n    Represents a task prompt associated with a specific URL.\n    \"\"\"\n    page_url: str = Field(..., description=\"URL of the page where the task is to be performed\")\n    task_prompts: List[str] = Field(..., description=\"List of task prompts for the given URL\")\nclass BrowserSpecification(BaseModel):\n    \"\"\"\n    A class to represent the browser details with sensible default values.\n    \"\"\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class BrowserSpecification(BaseModel):\n    \"\"\"\n    A class to represent the browser details with sensible default values.\n    \"\"\"\n    viewport_width: int = Field(1920, description=\"Width of the viewport in pixels\")\n    viewport_height: int = Field(1080, description=\"Height of the viewport in pixels\")\n    screen_width: int = Field(1920, description=\"Total width of the physical screen in pixels\")\n    screen_height: int = Field(1080, description=\"Total height of the physical screen in pixels\")\n    device_pixel_ratio: float = Field(1.0, description=\"Ratio of physical pixels to CSS pixels\")\n    scroll_x: int = Field(0, description=\"Horizontal scroll offset in pixels\")",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class Task(BaseModel):\n    \"\"\"\n    Represents a task with a prompt, URL, browser specifications, tests, milestones, and web analysis.\n    \"\"\"\n    prompt: str = Field(..., description=\"Prompt for the task\")\n    url: str = Field(..., description=\"URL where the task is to be performed\")\n    specifications: BrowserSpecification = Field(default_factory=BrowserSpecification, description=\"Browser specifications for the task\")\n    tests: List[BaseTaskTest] = Field(default_factory=list, description=\"List of tests associated with the task\")\n    milestones: Optional[List[\"Task\"]] = Field(None, description=\"List of milestone tasks\")\n    web_analysis: Optional[DomainAnalysis] = Field(None, description=\"Domain analysis for the task\")",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class TaskGenerationConfig(BaseModel):\n    \"\"\"\n    Configuration for task generation, including options for saving tasks, enabling crawling, and generating milestones.\n    \"\"\"\n    web_project: WebProject = Field(..., description=\"Demo web project configuration\")\n    save_task_in_db: bool = Field(False, description=\"Whether to save the task in the database\")\n    save_web_analysis_in_db: bool = Field(False, description=\"Whether to save the web analysis in the database\")\n    enable_crawl: bool = Field(True, description=\"Whether to enable crawling for task generation\")\n    generate_milestones: bool = Field(False, description=\"Whether to generate milestone tasks\")\n    number_of_prompts_per_task: int = Field(1, description=\"Number of prompts to generate per task\")",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TasksGenerationOutput",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class TasksGenerationOutput(BaseModel):\n    \"\"\"\n    Represents the output of task generation, including the generated tasks, total phase time, and timestamp.\n    \"\"\"\n    tasks: List[Task] = Field(..., description=\"List of generated tasks\")\n    total_phase_time: float = Field(..., description=\"Total time taken for the task generation phase\")\n    timestamp: str = Field(default_factory=lambda: datetime.now().isoformat(), description=\"Timestamp of task generation\")\n    def to_dict(self) -> Dict[str, Any]:\n        \"\"\"\n        Converts the TasksGenerationOutput model to a dictionary.",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class BaseTaskTest(BaseModel, ABC):\n    \"\"\"\n    Abstract base class for task tests.\n    Defines a common interface and structure for test execution.\n    \"\"\"\n    description: str = Field(default=\"Base task test\", description=\"Description of the test\")\n    test_type: Literal[\"frontend\", \"backend\"] = Field(default=\"frontend\", description=\"Type of the test\")\n    def execute_test(self, test_context: BrowserSnapshot) -> bool:\n        \"\"\"\n        Executes the test using the provided context.",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "FindInHtmlTest",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class FindInHtmlTest(BaseTaskTest):\n    \"\"\"\n    Test class to find specific keywords in the current HTML content.\n    \"\"\"\n    keywords: List[str] = Field(..., description=\"List of keywords to search for in the HTML\")\n    description: str = Field(\n        default=\"Find keywords in the current HTML content\",\n        description=\"Description of the test\",\n    )\n    test_type: Literal[\"frontend\"] = \"frontend\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckEventEmittedTest",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class CheckEventEmittedTest(BaseTaskTest):\n    \"\"\"\n    Test class to verify if a specific backend event was emitted.\n    \"\"\"\n    event_name: str = Field(..., description=\"Name of the expected backend event\")\n    description: str = Field(\n        default=\"Verify if the backend emitted the specified event\",\n        description=\"Description of the test\",\n    )\n    test_type: Literal[\"backend\"] = \"backend\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckPageViewEventTest",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class CheckPageViewEventTest(BaseTaskTest):\n    \"\"\"\n    Test class to verify if a specific page view event was logged in the backend.\n    \"\"\"\n    page_view_url: str = Field(..., description=\"The URL expected to trigger a page view event\")\n    description: str = Field(\n        default=\"Check if the backend logged a page view event for the specified URL\",\n        description=\"Description of the test\",\n    )\n    test_type: Literal[\"backend\"] = \"backend\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "OpinionBaseOnHTML",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class OpinionBaseOnHTML(BaseTaskTest):\n    \"\"\"\n    Test class to generate an opinion based on changes in HTML before and after an action.\n    \"\"\"\n    description: str = Field(default=\"Generate an opinion based on HTML changes\")\n    test_type: Literal[\"frontend\"] = \"frontend\"\n    llm_service: Any = Field(default=Provide[DIContainer.llm_service], exclude=True)\n    class Config:\n        arbitrary_types_allowed = True\n    def _execute_test(self, test_context: BrowserSnapshot) -> bool:",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "OpinionBaseOnScreenshot",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class OpinionBaseOnScreenshot(BaseTaskTest):\n    \"\"\"\n    Test class to generate an opinion based on screenshots before and after an action.\n    Uses an LLM service to evaluate whether the task was completed successfully.\n    \"\"\"\n    task: str = Field(..., description=\"Task description that is intended to be completed\")\n    description: str = Field(default=\"Generate an opinion based on screenshot differences\")\n    test_type: Literal[\"frontend\"] = \"frontend\"\n    llm_service: OpenAIService = Field(default_factory=OpenAIService, exclude=True)\n    class Config:",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "TestOpinionBaseOnHTML",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.tests.llm_html_test",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.tests.llm_html_test",
        "peekOfCode": "class TestOpinionBaseOnHTML(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Initialize OpinionBaseOnHTML with the real LLM service.\"\"\"\n        cls.llm_service = AppBootstrap().container.llm_service()\n        cls.test_instance = OpinionBaseOnHTML(llm_service=cls.llm_service)\n    def test_html_change_detected(self):\n        \"\"\"Test when LLM determines the task is completed based on HTML changes.\"\"\"\n        test_snapshot = BrowserSnapshot(\n            iteration=1,",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.tests.llm_html_test",
        "documentation": {}
    },
    {
        "label": "TestOpinionBaseOnScreenshot",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.data_generation.tests.llm_screenshot_test",
        "description": "autoppia_iwa.autoppia_iwa.src.data_generation.tests.llm_screenshot_test",
        "peekOfCode": "class TestOpinionBaseOnScreenshot(unittest.TestCase):\n    def setUp(self):\n        self.llm_service = OpenAIService(api_key=OPENAI_API_KEY, model=OPENAI_MODEL)\n        self.test_instance = OpinionBaseOnScreenshot(task=\"Verify button click effect\", llm_service=self.llm_service)\n        # Create black and white blocks\n        black_block_base64 = self.create_base64_encoded_block((0, 0, 0))\n        white_block_base64 = self.create_base64_encoded_block((255, 255, 255))\n        self.mock_snapshot = BrowserSnapshot(\n            iteration=1,\n            prev_html=\"<html><body><button>Click me</button></body></html>\",",
        "detail": "autoppia_iwa.autoppia_iwa.src.data_generation.tests.llm_screenshot_test",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "peekOfCode": "class EvaluatorConfig(BaseModel):\n    current_url: str\n    save_results_in_db: bool = False\n    task_delay_in_seconds: float = Field(default=0.2, gt=0, description=\"Delay between tasks in seconds\")\n    chunk_size: int = Field(default=3, gt=0, description=\"Number of tasks to process per chunk\")\n    browser_timeout: float = Field(default=10000, gt=0, description=\"Timeout for browser actions in milliseconds\")\n    event_monitor_interval: float = Field(default=0.1, gt=0, le=0.5, description=\"Interval in seconds to monitor events, must be > 0 and <= 0.5\")\nclass ConcurrentEvaluator(IEvaluator):\n    def __init__(self, config: EvaluatorConfig):\n        \"\"\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "peekOfCode": "class ConcurrentEvaluator(IEvaluator):\n    def __init__(self, config: EvaluatorConfig):\n        \"\"\"\n        Initializes the evaluator with configuration settings.\n        Args:\n            config (EvaluatorConfig): Configuration object with parameters like concurrency limit, browser timeout, etc.\n        \"\"\"\n        self.config = config\n    async def evaluate_single_task(self, task_solution: TaskSolution) -> EvaluationResult:\n        \"\"\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "FeedbackGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "peekOfCode": "class FeedbackGenerator:\n    @staticmethod\n    def make_immutable(data):\n        \"\"\"Convert mutable types in extra_data to immutable ones.\"\"\"\n        if isinstance(data, dict):\n            # Convert list values to tuples, then create a frozenset of key-value pairs\n            return frozenset((key, tuple(value) if isinstance(value, list) else value) for key, value in data.items())\n        return None\n    @staticmethod\n    def calculate_score(success_count: int, total_count: int, scale: int = 10) -> float:",
        "detail": "autoppia_iwa.autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "documentation": {}
    },
    {
        "label": "TestRunner",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.evaluation.evaluator.test_runner",
        "description": "autoppia_iwa.autoppia_iwa.src.evaluation.evaluator.test_runner",
        "peekOfCode": "class TestRunner:\n    def __init__(self, tests: List[BaseTaskTest], browser_snapshot: BrowserSnapshot):\n        self.tests = tests\n        self.browser_snapshot = browser_snapshot\n    def run_tests(self) -> List[TestEvaluated]:\n        results = []\n        for test in self.tests:\n            success = test.execute_test(self.browser_snapshot)\n            # Create TestEvaluated instance with extra_data\n            evaluated_test = TestEvaluated(",
        "detail": "autoppia_iwa.autoppia_iwa.src.evaluation.evaluator.test_runner",
        "documentation": {}
    },
    {
        "label": "TestEvaluated",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.evaluation.classes",
        "peekOfCode": "class TestEvaluated(BaseModel):\n    \"\"\"Represents the evaluation result of a single test.\"\"\"\n    description: str  # Description of the test\n    test_type: str  # Type of the test (e.g., \"frontend\", \"backend\")\n    is_success: bool  # True if the test passed, False otherwise\n    extra_data: Optional[dict] = None  # Additional data related to the test\nclass Feedback(BaseModel):\n    task_prompt: str  # The description of the task being evaluated\n    final_score: float  # Overall evaluation score (0-10)\n    executed_actions: int  # Number of successfully executed actions",
        "detail": "autoppia_iwa.autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.evaluation.classes",
        "peekOfCode": "class Feedback(BaseModel):\n    task_prompt: str  # The description of the task being evaluated\n    final_score: float  # Overall evaluation score (0-10)\n    executed_actions: int  # Number of successfully executed actions\n    failed_actions: int  # Number of failed actions\n    passed_tests: int  # Number of tests that passed\n    failed_tests: int  # Number of tests that failed\n    total_execution_time: float  # Total time taken for execution\n    time_penalty: float  # Penalty points for exceeding expected time\n    critical_test_penalty: int  # Penalty points for failing critical tests",
        "detail": "autoppia_iwa.autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.evaluation.classes",
        "peekOfCode": "class EvaluationResult(BaseModel):\n    \"\"\"Encapsulates the output of a task evaluation.\"\"\"\n    final_score: float = 0\n    test_results: List[TestEvaluated]  # List of test evaluation results\n    feedback: Feedback  # Feedback generated during the evaluation\n    execution_history: List[ActionExecutionResult]  # History of all actions executed\n    def model_dump(self, *args, **kwargs):\n        base_dump = super().model_dump(*args, **kwargs)\n        base_dump[\"execution_history\"] = [action.model_dump() for action in self.execution_history]\n        # Remove unwanted keys from feedback",
        "detail": "autoppia_iwa.autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "IEvaluator",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.evaluation.interfaces",
        "description": "autoppia_iwa.autoppia_iwa.src.evaluation.interfaces",
        "peekOfCode": "class IEvaluator(ABC):\n    \"\"\"\n    The design allows for multiple web agents to implement this interface, ensuring standardized inputs and behaviors across different agents.\n    Every web agent that implements this interface must define the required methods and properties, ensuring consistency and compatibility.\n    Example:\n    - An 'Autopilot Web Agent' would implement this interface, adhering to the standardized inputs and outputs specified here.\n    The goal is to provide a common structure that all web agents will follow, facilitating integration and interoperability among them.\n    \"\"\"\n    @abstractmethod\n    def evaluate_single_task(self, task_solution: TaskSolution) -> EvaluationResult:",
        "detail": "autoppia_iwa.autoppia_iwa.src.evaluation.interfaces",
        "documentation": {}
    },
    {
        "label": "ClickAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class ClickAction(BaseActionWithSelector):\n    x: Optional[int] = None\n    y: Optional[int] = None\n    @log_action(\"ClickAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        if self.selector:\n            selector = self.validate_selector()\n            await page.click(selector)\n        elif self.x is not None and self.y is not None:\n            await page.mouse.click(self.x, self.y)",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "DoubleClickAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class DoubleClickAction(BaseActionWithSelector):\n    @log_action(\"DoubleClickAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        try:\n            selector = self.validate_selector()\n            await page.dblclick(selector)\n        except Exception as e:\n            raise RuntimeError(f\"DoubleClickAction failed: {e}\")\nclass NavigateAction(BaseAction):\n    url: Optional[str] = \"\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "NavigateAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class NavigateAction(BaseAction):\n    url: Optional[str] = \"\"\n    go_back: bool = False\n    go_forward: bool = False\n    @log_action(\"NavigateAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        try:\n            if self.go_back:\n                await page.go_back()\n            elif self.go_forward:",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "TypeAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class TypeAction(BaseActionWithSelector):\n    text: str = Field(..., alias=\"value\")\n    @log_action(\"TypeAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        try:\n            sel = self.validate_selector()\n            await page.fill(sel, self.text)\n        except Exception as e:\n            raise RuntimeError(f\"TypeAction failed: {e}\")\nclass SelectAction(BaseActionWithSelector):",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SelectAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class SelectAction(BaseActionWithSelector):\n    value: str\n    @log_action(\"ScrollAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        sel = self.validate_selector()\n        await page.select_option(sel, self.value)\nclass HoverAction(BaseActionWithSelector):\n    @log_action(\"HoverAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        sel = self.validate_selector()",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "HoverAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class HoverAction(BaseActionWithSelector):\n    @log_action(\"HoverAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        sel = self.validate_selector()\n        await page.hover(sel)\nclass WaitAction(BaseActionWithSelector):\n    # Wait for a specific selector or just a time in seconds\n    time_seconds: Optional[float] = None\n    @log_action(\"WaitAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "WaitAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class WaitAction(BaseActionWithSelector):\n    # Wait for a specific selector or just a time in seconds\n    time_seconds: Optional[float] = None\n    @log_action(\"WaitAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        try:\n            if self.selector:\n                selector = self.validate_selector()\n                await page.wait_for_selector(selector, timeout=self.time_seconds * 1000 if self.time_seconds else None)\n            elif self.time_seconds:",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ScrollAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class ScrollAction(BaseAction):\n    value: Optional[str | int] = None\n    up: bool = False\n    down: bool = False\n    @log_action(\"ScrollAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        if self.up:\n            try:\n                await page.evaluate(f\"window.scrollBy(0, -{self.value});\")\n            except Exception:",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SubmitAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class SubmitAction(BaseActionWithSelector):\n    @log_action(\"SubmitAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        sel = self.validate_selector()\n        await page.locator(sel).press(\"Enter\")\nclass AssertAction(BaseAction):\n    text_to_assert: str\n    @log_action(\"AssertAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        content = await page.content()",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "AssertAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class AssertAction(BaseAction):\n    text_to_assert: str\n    @log_action(\"AssertAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        content = await page.content()\n        if self.text_to_assert not in content:\n            raise AssertionError(f\"Assertion failed: '{self.text_to_assert}' not found in page source.\")\nclass DragAndDropAction(BaseAction):\n    source_selector: str = Field(..., alias=\"sourceSelector\")\n    target_selector: str = Field(..., alias=\"targetSelector\")",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "DragAndDropAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class DragAndDropAction(BaseAction):\n    source_selector: str = Field(..., alias=\"sourceSelector\")\n    target_selector: str = Field(..., alias=\"targetSelector\")\n    @log_action(\"DragAndDropAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        await page.drag_and_drop(self.source_selector, self.target_selector)\nclass ScreenshotAction(BaseAction):\n    file_path: str\n    @log_action(\"ScreenshotAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ScreenshotAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class ScreenshotAction(BaseAction):\n    file_path: str\n    @log_action(\"ScreenshotAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        await page.screenshot(path=self.file_path)\nclass SendKeysIWAAction(BaseAction):\n    keys: str\n    @log_action(\"SendKeysIWAAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        await page.keyboard.press(self.keys)",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SendKeysIWAAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class SendKeysIWAAction(BaseAction):\n    keys: str\n    @log_action(\"SendKeysIWAAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        await page.keyboard.press(self.keys)\nclass GetDropDownOptions(BaseActionWithSelector):\n    @log_action(\"GetDropDownOptions\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        \"\"\"Get all options from a native dropdown\"\"\"\n        xpath = self.validate_selector()",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "GetDropDownOptions",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class GetDropDownOptions(BaseActionWithSelector):\n    @log_action(\"GetDropDownOptions\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        \"\"\"Get all options from a native dropdown\"\"\"\n        xpath = self.validate_selector()\n        # Frame-aware approach since we know it works\n        all_options = []\n        frame_index = 0\n        for frame in page.frames:\n            try:",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SelectDropDownOption",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class SelectDropDownOption(BaseActionWithSelector):\n    text: str\n    @log_action(\"SelectDropDownOption\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        \"\"\"Select dropdown option by the text of the option you want to select\"\"\"\n        xpath = self.validate_selector()\n        frame_index = 0\n        for frame in page.frames:\n            try:\n                action_logger.debug(f\"Trying frame {frame_index} URL: {frame.url}\")",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "ACTION_CLASS_MAP = {\n    \"click\": ClickAction,\n    \"type\": TypeAction,\n    \"hover\": HoverAction,\n    \"navigate\": NavigateAction,\n    \"dragAndDrop\": DragAndDropAction,\n    \"submit\": SubmitAction,\n    \"doubleClick\": DoubleClickAction,\n    \"scroll\": ScrollAction,\n    \"screenshot\": ScreenshotAction,",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SelectorType",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class SelectorType(str, Enum):\n    ATTRIBUTE_VALUE_SELECTOR = \"attributeValueSelector\"\n    TAG_CONTAINS_SELECTOR = \"tagContainsSelector\"\n    XPATH_SELECTOR = \"xpathSelector\"\nclass Selector(BaseModel):\n    type: SelectorType = Field(..., description=\"The type of selector.\")\n    attribute: Optional[str] = Field(None, description=\"The attribute name.\")\n    value: str = Field(..., description=\"The value for this selector.\")\n    case_sensitive: bool = Field(False, description=\"Whether the match is case-sensitive.\")\n    @field_validator(\"attribute\")",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "Selector",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class Selector(BaseModel):\n    type: SelectorType = Field(..., description=\"The type of selector.\")\n    attribute: Optional[str] = Field(None, description=\"The attribute name.\")\n    value: str = Field(..., description=\"The value for this selector.\")\n    case_sensitive: bool = Field(False, description=\"Whether the match is case-sensitive.\")\n    @field_validator(\"attribute\")\n    @classmethod\n    def validate_attribute(cls, value: Optional[str], values: Dict[str, Any]) -> Optional[str]:\n        if values.data.get(\"type\") == SelectorType.ATTRIBUTE_VALUE_SELECTOR and not value:\n            raise ValueError(\"Attribute must be provided for ATTRIBUTE_VALUE_SELECTOR.\")",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class BaseAction(BaseModel, ABC):\n    \"\"\"\n    Base class for all actions.\n    \"\"\"\n    def __str__(self) -> str:\n        \"\"\"Returns a user-friendly string representation of the action.\"\"\"\n        return f\"{self.__class__.__name__}(type={self.__class__.__name__})\"\n    def __repr__(self) -> str:\n        \"\"\"Returns a detailed string representation useful for debugging.\"\"\"\n        return f\"{self.__class__.__name__}({self.model_dump()})\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseActionWithSelector",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class BaseActionWithSelector(BaseAction):\n    selector: Optional[Selector] = None\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        raise NotImplementedError(\"This action requires an execution implementation.\")\n    def validate_selector(self):\n        if not self.selector:\n            raise ValueError(\"Selector is required for this action.\")\n        return self.selector.to_playwright_selector()",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# -----------------------------------------\n# Selector and related definitions\n# -----------------------------------------\nATTRIBUTE_FORMATS = {\n    \"id\": \"#\",\n    \"class\": \".\",\n    \"placeholder\": \"[placeholder='{value}']\",\n    \"name\": \"[name='{value}']\",\n    \"role\": \"[role='{value}']\",",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "ATTRIBUTE_FORMATS",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "ATTRIBUTE_FORMATS = {\n    \"id\": \"#\",\n    \"class\": \".\",\n    \"placeholder\": \"[placeholder='{value}']\",\n    \"name\": \"[name='{value}']\",\n    \"role\": \"[role='{value}']\",\n    \"value\": \"[value='{value}']\",\n    \"type\": \"[type='{value}']\",\n    \"aria-label\": \"[aria-label='{value}']\",\n    \"aria-labelledby\": \"[aria-labelledby='{value}']\",",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "log_action",
        "kind": 2,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.utils",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.utils",
        "peekOfCode": "def log_action(action_name):\n    \"\"\"Decorator to log the start, success, and failure of an action asynchronously.\"\"\"\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(self, *args, **kwargs):\n            action_logger.info(f\"[{action_name}] Started\")\n            console_handler.flush()\n            try:\n                result = await func(self, *args, **kwargs)\n                action_logger.info(f\"[{action_name}] Success - Result: {result}\")",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.utils",
        "documentation": {}
    },
    {
        "label": "LOG_FORMAT",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.utils",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.utils",
        "peekOfCode": "LOG_FORMAT = \"%(asctime)s - %(levelname)s - %(name)s - %(message)s\"\naction_logger = logging.getLogger(\"action_logger\")\naction_logger.setLevel(logging.INFO)\n# Create a console handler\nconsole_handler = logging.StreamHandler()\nconsole_handler.setLevel(logging.INFO)\nconsole_handler.setFormatter(logging.Formatter(LOG_FORMAT))\n# Add the handler to the logger (if not already added)\nif not action_logger.hasHandlers():\n    action_logger.addHandler(console_handler)",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.utils",
        "documentation": {}
    },
    {
        "label": "action_logger",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.utils",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.utils",
        "peekOfCode": "action_logger = logging.getLogger(\"action_logger\")\naction_logger.setLevel(logging.INFO)\n# Create a console handler\nconsole_handler = logging.StreamHandler()\nconsole_handler.setLevel(logging.INFO)\nconsole_handler.setFormatter(logging.Formatter(LOG_FORMAT))\n# Add the handler to the logger (if not already added)\nif not action_logger.hasHandlers():\n    action_logger.addHandler(console_handler)\ndef log_action(action_name):",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.utils",
        "documentation": {}
    },
    {
        "label": "console_handler",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.actions.utils",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.actions.utils",
        "peekOfCode": "console_handler = logging.StreamHandler()\nconsole_handler.setLevel(logging.INFO)\nconsole_handler.setFormatter(logging.Formatter(LOG_FORMAT))\n# Add the handler to the logger (if not already added)\nif not action_logger.hasHandlers():\n    action_logger.addHandler(console_handler)\ndef log_action(action_name):\n    \"\"\"Decorator to log the start, success, and failure of an action asynchronously.\"\"\"\n    def decorator(func):\n        @wraps(func)",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.actions.utils",
        "documentation": {}
    },
    {
        "label": "PlaywrightBrowserExecutor",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.browser_executor",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.browser_executor",
        "peekOfCode": "class PlaywrightBrowserExecutor:\n    def __init__(self, browser_config: BrowserSpecification, backend_demo_web_service: BackendDemoWebService, page: Optional[Page] = None):\n        \"\"\"\n        Initializes the PlaywrightBrowserExecutor with a backend service and an optional Playwright page.\n        Args:\n            backend_demo_web_service: Service for interacting with the backend.\n            page: Optional Playwright page object.\n        \"\"\"\n        self.browser_config = browser_config\n        self.page: Optional[Page] = page",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.browser_executor",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.classes",
        "peekOfCode": "class BrowserSnapshot(BaseModel):\n    \"\"\"\n    Represents a snapshot of the browser state before and after executing an action.\n    Captures HTML content, screenshots, backend events, and metadata.\n    \"\"\"\n    iteration: int = Field(..., description=\"The current iteration of the evaluation process\")\n    action: BaseAction = Field(..., description=\"The action that was executed\")\n    prev_html: str = Field(..., description=\"HTML content before actions were executed\")\n    current_html: str = Field(..., description=\"HTML content after actions were executed\")\n    screenshot_before: str = Field(..., description=\"Base64-encoded screenshot before actions\")",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.execution.classes",
        "peekOfCode": "class ActionExecutionResult(BaseModel):\n    \"\"\"Log of the execution result of an action.\"\"\"\n    action: BaseAction = Field(..., description=\"The action that was executed\")\n    action_event: str = Field(..., description=\"Type of the action event (e.g., 'click', 'navigate', 'type')\")\n    is_successfully_executed: bool = Field(..., description=\"Indicates whether the action was executed successfully\")\n    error: Optional[str] = Field(None, description=\"Details of the error if the action failed\")\n    execution_time: Optional[float] = Field(None, description=\"Time taken to execute the action, in seconds\")\n    browser_snapshot: BrowserSnapshot = Field(..., description=\"Snapshot of the browser state after execution\")\n    def model_dump(self, *args, **kwargs):\n        base_dump = super().model_dump(*args, **kwargs)",
        "detail": "autoppia_iwa.autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "OpenAILLMModelMixin",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.llms.domain.openai.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.llms.domain.openai.classes",
        "peekOfCode": "class OpenAILLMModelMixin:\n    @property\n    def temperature(self) -> float:\n        return self._temperature\n    @temperature.setter\n    def temperature(self, value):\n        if not isinstance(value, float):\n            raise TypeError(\"Temperature must be a float\")\n        if value < 0 or value > 1:\n            raise ValueError(\"Value cannot be negative nor bigger than 1\")",
        "detail": "autoppia_iwa.autoppia_iwa.src.llms.domain.openai.classes",
        "documentation": {}
    },
    {
        "label": "BaseOpenAIResponseFormat",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.llms.domain.openai.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.llms.domain.openai.classes",
        "peekOfCode": "class BaseOpenAIResponseFormat(BaseModel):\n    \"\"\"\n    Pydantic model for validating OpenAI response format.\n    Ensures that the schema has necessary fields.\n    \"\"\"\n    schema_data: Dict[str, Any] = Field(..., alias=\"schema\")\n    type: str\n    @field_validator(\"type\", mode=\"before\")\n    @classmethod\n    def validate_type(cls, value):",
        "detail": "autoppia_iwa.autoppia_iwa.src.llms.domain.openai.classes",
        "documentation": {}
    },
    {
        "label": "OpenAIUtilsMixin",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.llms.domain.openai.utils",
        "description": "autoppia_iwa.autoppia_iwa.src.llms.domain.openai.utils",
        "peekOfCode": "class OpenAIUtilsMixin:\n    @staticmethod\n    def num_tokens_from_string(string: str, model=\"gpt-3.5-turbo-0613\", disallowed_special=True) -> int:\n        \"\"\"Returns the number of tokens in a text string.\"\"\"\n        encoding = tiktoken.encoding_for_model(model)\n        if disallowed_special:\n            num_tokens = len(encoding.encode(string, disallowed_special=()))\n        else:\n            num_tokens = len(encoding.encode(string))\n        return num_tokens",
        "detail": "autoppia_iwa.autoppia_iwa.src.llms.domain.openai.utils",
        "documentation": {}
    },
    {
        "label": "ILLMModel",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.autoppia_iwa.src.llms.domain.interfaces",
        "peekOfCode": "class ILLMModel(ABC):\n    @property\n    @abstractmethod\n    def model(self) -> str:\n        pass\n    @property\n    @abstractmethod\n    def temperature(self) -> float:\n        pass\n    @property",
        "detail": "autoppia_iwa.autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLMService",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.autoppia_iwa.src.llms.domain.interfaces",
        "peekOfCode": "class ILLMService(ABC):\n    @abstractmethod\n    def make_request(\n        self,\n        message_payload: List[Dict[str, str]],\n        llm_kwargs=None,\n        chat_completion_kwargs=None,\n    ) -> str:\n        \"\"\"\n        Make a request using LLM Local or serverless.",
        "detail": "autoppia_iwa.autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "BaseLLMService",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.autoppia_iwa.src.llms.infrastructure.llm_service",
        "peekOfCode": "class BaseLLMService(ILLMService):\n    \"\"\"\n    Base class for LLM Task Generators, providing common HTTP request functionality.\n    \"\"\"\n    def make_request(\n        self,\n        message_payload: List[Dict[str, str]],\n        llm_kwargs: Optional[Dict[str, Any]] = None,\n        chat_completion_kwargs: Optional[Dict[str, Any]] = None,\n    ) -> Any:",
        "detail": "autoppia_iwa.autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "LocalLLMService",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.autoppia_iwa.src.llms.infrastructure.llm_service",
        "peekOfCode": "class LocalLLMService(BaseLLMService):\n    \"\"\"\n    No waiting or canceling because tasks complete immediately.\n    \"\"\"\n    def __init__(self, endpoint_url: str, threshold: int = 100):\n        self.endpoint_url = endpoint_url\n    def make_request(\n        self,\n        message_payload: List[Dict[str, str]],\n        llm_kwargs: Optional[Dict[str, Any]] = None,",
        "detail": "autoppia_iwa.autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "OpenAIService",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.autoppia_iwa.src.llms.infrastructure.llm_service",
        "peekOfCode": "class OpenAIService(BaseLLMService, OpenAILLMModelMixin):\n    \"\"\"\n    Service for interacting with OpenAI's GPT models.\n    \"\"\"\n    def __init__(self, api_key: str, model: str, max_tokens: int = 2000, temperature: float = 0.7):\n        \"\"\"\n        Initialize the OpenAI Service.\n        Args:\n            model (str): The GPT model to use, e.g., \"gpt-4\" or \"gpt-3.5-turbo\".\n            max_tokens (int): Maximum number of tokens for the response.",
        "detail": "autoppia_iwa.autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "BaseMongoRepository",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "description": "autoppia_iwa.autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "peekOfCode": "class BaseMongoRepository:\n    \"\"\"\n    A generic repository for performing CRUD operations on a MongoDB collection.\n    \"\"\"\n    def __init__(self, mongo_client: MongoClient, db_name: str, collection_name: str):\n        \"\"\"\n        Initialize the BaseMongoRepository.\n        Args:\n            mongo_client (MongoClient): The MongoDB client.\n            db_name (str): The name of the database.",
        "detail": "autoppia_iwa.autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "documentation": {}
    },
    {
        "label": "extract_html",
        "kind": 2,
        "importPath": "autoppia_iwa.autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.autoppia_iwa.src.shared.utils",
        "peekOfCode": "def extract_html(page_url):\n    options = webdriver.ChromeOptions()\n    options.add_argument(\"--headless\")\n    options.add_argument(\"--start-maximized\")\n    # Check if PROFILE_DIR exists\n    profile_dir = PROFILE_DIR\n    if profile_dir and Path(profile_dir).exists():\n        options.add_argument(f\"--user-data-dir={profile_dir}\")\n    # Check if PROFILE exists\n    profile = PROFILE",
        "detail": "autoppia_iwa.autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "clean_html",
        "kind": 2,
        "importPath": "autoppia_iwa.autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.autoppia_iwa.src.shared.utils",
        "peekOfCode": "def clean_html(html_content: str) -> str:\n    soup = BeautifulSoup(html_content, \"html.parser\")\n    # Remove unwanted tags\n    for tag in soup([\"script\", \"style\", \"noscript\", \"meta\", \"link\"]):\n        tag.decompose()\n    # Remove comments\n    for comment in soup.find_all(string=lambda text: isinstance(text, Comment)):\n        comment.extract()\n    # Remove hidden elements (e.g., elements with \"display: none\" in style or having the \"hidden\" attribute)\n    for tag in soup.find_all():",
        "detail": "autoppia_iwa.autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "instantiate_test",
        "kind": 2,
        "importPath": "autoppia_iwa.autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.autoppia_iwa.src.shared.utils",
        "peekOfCode": "def instantiate_test(test_data):\n    if test_data[\"test_type\"] == \"frontend\":\n        return FindInHtmlTest(description=test_data[\"description\"], test_type=test_data[\"test_type\"], keywords=test_data[\"keywords\"])\n    elif test_data[\"test_type\"] == \"backend\":\n        if \"page_view_url\" in test_data:\n            return CheckPageViewEventTest(description=test_data[\"description\"], test_type=test_data[\"test_type\"], page_view_url=test_data[\"page_view_url\"])\n        return CheckEventEmittedTest(description=test_data[\"description\"], test_type=test_data[\"test_type\"], event_name=test_data[\"event_name\"])\n    else:\n        raise ValueError(f\"Unknown test type: {test_data['test_type']}\")\ndef generate_random_web_agent_id(length=16):",
        "detail": "autoppia_iwa.autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "kind": 2,
        "importPath": "autoppia_iwa.autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.autoppia_iwa.src.shared.utils",
        "peekOfCode": "def generate_random_web_agent_id(length=16):\n    \"\"\"Generates a random alphanumeric string for the web_agent ID.\"\"\"\n    letters_and_digits = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters_and_digits) for _ in range(length))",
        "detail": "autoppia_iwa.autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "ActionGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.actions_generation.actions_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.actions_generation.actions_generator",
        "peekOfCode": "class ActionGenerator:\n    @inject\n    def __init__(\n        self,\n        llm_service: ILLMService = Provide[DIContainer.llm_service],\n    ):\n        self.llm_service = llm_service\n    def generate(self, task: str, html_content: str, feedback: str = None) -> Dict[str, Any]:\n        \"\"\"\n        Generate a structured set of actions for a given task and HTML content.",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.actions_generation.actions_generator",
        "documentation": {}
    },
    {
        "label": "SYSTEM_MESSAGE_WITH_EXAMPLES",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.actions_generation.actions_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.actions_generation.actions_generator",
        "peekOfCode": "SYSTEM_MESSAGE_WITH_EXAMPLES = \"\"\"Generate detailed, low-level workflows (a sequence of actions) for the given task based on the provided HTML content. Each workflow must be actionable and clearly divided into steps that correspond to distinct actions.\nFollow these guidelines:\n1. **Action Details**: Use precise selectors (CSS, XPath, etc.) to locate elements and ensure that actions like `fill`, `press`, `hover`, etc., have non-empty parameters.\n   - Make sure the actions are valid and applicable for the task.\n   - For example, use `type` for text input actions, `click` for button clicks, and `scroll` for scrolling actions.\n2. **Selector Types**: Match the selector type with the element and use attribute-based selectors (e.g., `attributeValueSelector`, `tagContainsSelector`) but prefer `attributeValueSelector` first, then use `tagContainsSelector` and `xpathSelector` when necessary.\n    - **attributeValueSelector**: Select an element based on its attribute (e.g., `id`, `class`, `name`, `aria-label`).\n        - Example: `\"type\": \"attributeValueSelector\", \"attribute\": \"id\", \"value\": \"submit-button\"`\n    - **tagContainsSelector**: Select an element based on the tag name or partial content in the tag. Useful for finding elements with specific text or classes. (e.g., `div`, `button`, `span`).\n        - Example: `\"type\": \"tagContainsSelector\", \"value\": \"Submit\"`",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.actions_generation.actions_generator",
        "documentation": {}
    },
    {
        "label": "HighLevelWorkflowGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.milestones_generation.milestones_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.milestones_generation.milestones_generator",
        "peekOfCode": "class HighLevelWorkflowGenerator:\n    \"\"\"\n    A high-level workflow generator that generates high-level tasks based on a prompt, page URL, and domain.\n    This class provides methods to generate high-level tasks and low-level tasks using the `runpod_mistral_pipeline` function.\n    \"\"\"\n    def __init__(self, page_url: str, prompt: str, llm_service: ILLMService = Provide[DIContainer.llm_service]) -> None:\n        \"\"\"\n        Initialize the HighLevelWorkflowGenerator.\n        Args:\n            page_url (str): The URL of the webpage.",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.milestones_generation.milestones_generator",
        "documentation": {}
    },
    {
        "label": "MILESTONE_SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.milestones_generation.milestones_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.milestones_generation.milestones_generator",
        "peekOfCode": "MILESTONE_SYSTEM_PROMPT = (\n    \"You will assume that the webpage is loaded and all the contents are located and are visible, now you will write the \"\n    \"workflow. You will write multiple workflows for executing the high-level tasks mentioned in the prompt. Do not write workflows for accessing, \"\n    \"navigating, or loading the webpage. Stick strictly to the prompt; there is no need to create workflows for tasks that occur before or after \"\n    \"the prompt. Write your response in JSON. Utilize the schema and create multiple schemas for each high-level subtask in the prompt.\"\n    \"Provide a minimum 10-word description of each task and the name must contain keywords of the respective task. Create tasks only for the prompt \"\n    \"and do not add additional tasks before or after the prompt tasks. Do not create high-level tasks for exploring, navigating, or hovering. \"\n    \"Create high-level tasks only for actions that can be performed by the user manually.\"\n    \"The webpage is already loaded, so focus only on the high-level tasks mentioned in the prompt. Do not mention loading, exploring, or navigating \"\n    \"the webpage, or verifying the workflow.\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.milestones_generation.milestones_generator",
        "documentation": {}
    },
    {
        "label": "TestActionGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.tests.test_actions_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.tests.test_actions_generator",
        "peekOfCode": "class TestActionGenerator(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Set up resources for all tests.\"\"\"\n        cls.app_bootstrap = AppBootstrap()\n        cls.container = cls.app_bootstrap.container\n        cls.container.init_resources()\n        cls.url = \"http://localhost:8000/login\"\n        cls.task = \"Enter email 'example123@gmail.com' and password 'mypassword', and click 'Log in'.\"\n        cls.html_content = extract_html(cls.url)",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.tests.test_actions_generator",
        "documentation": {}
    },
    {
        "label": "TestActionsInitialization",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.tests.test_actions_initialization",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.tests.test_actions_initialization",
        "peekOfCode": "class TestActionsInitialization(unittest.TestCase):\n    def test_all_classes_initialization(self):\n        response = {\n            \"actions\": [\n                {\"selector\": {\"type\": \"attributeValueSelector\", \"attribute\": \"class\", \"value\": \"search-input\"}, \"action\": {\"type\": \"type\", \"parameters\": {\"value\": \"Wireless Mouse\"}}},\n                {\"selector\": {\"type\": \"attributeValueSelector\", \"attribute\": \"class\", \"value\": \"search-button\"}, \"action\": {\"type\": \"click\"}},\n                {\"selector\": {\"type\": \"attributeValueSelector\", \"attribute\": \"id\", \"value\": \"product-123\"}, \"action\": {\"type\": \"hover\"}},\n                {\"selector\": {\"type\": \"attributeValueSelector\", \"attribute\": \"class\", \"value\": \"add-to-cart\"}, \"action\": {\"type\": \"click\"}},\n                {\n                    \"selector\": {\"type\": \"attributeValueSelector\", \"attribute\": \"class\", \"value\": \"drag-source\"},",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.tests.test_actions_initialization",
        "documentation": {}
    },
    {
        "label": "TestHighLevelWorkflowGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.tests.test_milestones_generator",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.tests.test_milestones_generator",
        "peekOfCode": "class TestHighLevelWorkflowGenerator(unittest.TestCase):\n    \"\"\"\n    Test cases for the HighLevelWorkflowGenerator class without mocking dependencies.\n    \"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Set up shared resources for all tests in the class.\n        \"\"\"\n        # Initialize the application bootstrap and LLM service",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.tests.test_milestones_generator",
        "documentation": {}
    },
    {
        "label": "AutoppiaWebAgent",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "peekOfCode": "class AutoppiaWebAgent(IWebAgent):\n    @inject\n    def __init__(self, llm_service: ILLMService = Provide[DIContainer.llm_service], generate_milestones: bool = Provide[DIContainer.generate_milestones]):\n        \"\"\"\n        Initializes the AutoppiaWebAgent with LLM service and milestone generation settings.\n        :param llm_service: Service for interacting with the LLM.\n        :param generate_milestones: Whether to generate milestones before generating actions.\n        \"\"\"\n        self.llm_service = llm_service\n        self.generate_milestones = generate_milestones",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.autoppia_agent.agent",
        "documentation": {}
    },
    {
        "label": "ActionAdapter",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.browser_use.action_adapter",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.browser_use.action_adapter",
        "peekOfCode": "class ActionAdapter:\n    \"\"\"Adapts browser use action models to internal action models.\"\"\"\n    def adapt(self, browser_use_actions: List[ActionModel], interacted_elements: List[Optional[DOMHistoryElement]]) -> Optional[List[BaseAction]]:\n        \"\"\"Converts a list of browser-use action models to internal action models.\n        Args:\n            browser_use_actions: List of action models from browser use agent.\n            interacted_elements: The element the action interacted with.\n        Returns:\n            A list of internal action models (e.g., ClickAction, TypeAction).\n        \"\"\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.browser_use.action_adapter",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.browser_use.action_adapter",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.browser_use.action_adapter",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ActionAdapter:\n    \"\"\"Adapts browser use action models to internal action models.\"\"\"\n    def adapt(self, browser_use_actions: List[ActionModel], interacted_elements: List[Optional[DOMHistoryElement]]) -> Optional[List[BaseAction]]:\n        \"\"\"Converts a list of browser-use action models to internal action models.\n        Args:\n            browser_use_actions: List of action models from browser use agent.\n            interacted_elements: The element the action interacted with.\n        Returns:\n            A list of internal action models (e.g., ClickAction, TypeAction).",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.browser_use.action_adapter",
        "documentation": {}
    },
    {
        "label": "BrowserUseWebAgent",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.browser_use.agent",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.browser_use.agent",
        "peekOfCode": "class BrowserUseWebAgent(BaseAgent):\n    def __init__(self):\n        super().__init__()\n    async def solve_task(self, task: Task) -> TaskSolution:\n        specifications = task.specifications\n        browser_config = BrowserContextConfig(\n            browser_window_size={\"width\": specifications.viewport_width, \"height\": specifications.viewport_height},\n            # allowed_domains=[task.url]\n        )\n        result: AgentHistoryList = await self.execute_browser_use_agent(task, browser_config)",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.browser_use.agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.random.agent",
        "peekOfCode": "class RandomClickerWebAgent(BaseAgent):\n    \"\"\"\n    Web Agent that executes random actions within the screen dimensions.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n    async def solve_task(self, task: Task) -> TaskSolution:\n        \"\"\"\n        Generates a list of random click actions within the screen dimensions.\n        :param task: The task for which actions are being generated.",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "IWebAgent",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.base",
        "peekOfCode": "class IWebAgent(ABC):\n    \"\"\"\n    The design allows for multiple web agents to implement this interface, ensuring standardized inputs and behaviors across different agents.\n    Every web agent that implements this interface must define the required methods and properties, ensuring consistency and compatibility.\n    Example:\n    - An 'Autopilot Web Agent' would implement this interface, adhering to the standardized inputs and outputs specified here.\n    The goal is to provide a common structure that all web agents will follow, facilitating integration and interoperability among them.\n    \"\"\"\n    @abstractmethod\n    async def solve_task(self, task: Task) -> TaskSolution:",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.base",
        "peekOfCode": "class BaseAgent(IWebAgent):\n    def __init__(self, name=None):\n        self.id = self.generate_random_web_agent_id()\n        self.name = name if name is not None else f\"Agent {self.id}\"\n    def generate_random_web_agent_id(self, length=16):\n        \"\"\"Generates a random alphanumeric string for the web_agent ID.\"\"\"\n        letters_and_digits = string.ascii_letters + string.digits\n        return ''.join(random.choice(letters_and_digits) for _ in range(length))",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.web_agents.classes",
        "peekOfCode": "class TaskSolution(BaseModel):\n    task: Task\n    actions: List[BaseAction] = Field(default_factory=list)\n    web_agent_id: Optional[str] = None",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "peekOfCode": "class WebAnalysisPipeline:\n    @inject\n    def __init__(\n        self,\n        start_url: str,\n        analysis_repository: BaseMongoRepository = Provide[DIContainer.analysis_repository],\n        llm_service: ILLMService = Provide[DIContainer.llm_service],\n    ):\n        self.start_url = start_url\n        self.domain = urlparse(start_url).netloc",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "MAX_TOKENS_ELEMENT_ANALYZER",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "peekOfCode": "MAX_TOKENS_ELEMENT_ANALYZER = 10000\nclass WebAnalysisPipeline:\n    @inject\n    def __init__(\n        self,\n        start_url: str,\n        analysis_repository: BaseMongoRepository = Provide[DIContainer.analysis_repository],\n        llm_service: ILLMService = Provide[DIContainer.llm_service],\n    ):\n        self.start_url = start_url",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebCrawler",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_crawler",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_crawler",
        "peekOfCode": "class WebCrawler:\n    \"\"\"\n    A web crawler that crawls URLs starting from a given start URL.\n    Args:\n        start_url (str): The URL to start crawling from.\n    Attributes:\n        domain (str): The domain of the start URL.\n    \"\"\"\n    def __init__(self, start_url):\n        \"\"\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_crawler",
        "documentation": {}
    },
    {
        "label": "WebLLMAnalyzer",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "peekOfCode": "class WebLLMAnalyzer:\n    def __init__(self, llm_service: ILLMService = Provide[DIContainer.llm_service]):\n        \"\"\"\n        Initialize the web page structure extractor with a start URL.\n        Args:\n            llm_service (ILLMService): the model to extract data from.\n        \"\"\"\n        self.llm_service: ILLMService = llm_service\n    def analyze_element(self, element: Element) -> LLMWebAnalysis:\n        template = PromptLLMTemplate.get_instance_from_file(",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "documentation": {}
    },
    {
        "label": "CONVERT_RESPONSE_TO_JSON_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "peekOfCode": "CONVERT_RESPONSE_TO_JSON_PROMPT = \"\"\"\nYou are an expert JSON content reviewer tasked with analyzing the given RAW JSON/Unstructured\n segment of a webpage and providing a strictly valid JSON-formatted analysis.\nImportant Requirements:\n- Return only one JSON object (no arrays, no multiple objects).\n- The output must be valid JSON that can be directly parsed by `json.loads` without modification.\n- Use double quotes for all keys and string values.\n- Do not include trailing commas.\n- Do not include any text or explanation outside of the JSON object.\n- If something is not relevant, omit it entirely rather than returning empty lists or objects.",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "documentation": {}
    },
    {
        "label": "WebPageStructureExtractor",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "peekOfCode": "class WebPageStructureExtractor:\n    \"\"\"\n    A web page structure extractor that extracts structured data from web pages.\n    This class provides methods to extract structured data from web pages, including HTML elements, text content, and attributes.\n    \"\"\"\n    ALLOWED_HTML_TAGS = [\n        \"header\",\n        \"nav\",\n        \"main\",\n        \"section\",",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "documentation": {}
    },
    {
        "label": "LLMWebAnalysis",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "peekOfCode": "class LLMWebAnalysis(BaseModel):\n    one_phrase_summary: str\n    summary: str\n    categories: List[str]\n    functionality: List[str]\n    media_files_description: Optional[Union[str, List[Dict[str, Any]], List[str]]] = None\n    key_words: List[str]\n    relevant_fields: Optional[List[Union[str, Dict[str, Union[str, Any]]]]] = None\n    curiosities: Optional[str] = None\n    accessibility: Optional[Union[str, List[str]]] = None",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "SinglePageAnalysis",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "peekOfCode": "class SinglePageAnalysis(BaseModel):\n    page_url: str\n    elements_analysis_result: List[Dict]\n    web_summary: LLMWebAnalysis\n    html_source: str\nclass DomainAnalysis(BaseModel):\n    domain: str\n    status: str\n    analyzed_urls: List[SinglePageAnalysis]\n    started_time: str",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "peekOfCode": "class DomainAnalysis(BaseModel):\n    domain: str\n    status: str\n    analyzed_urls: List[SinglePageAnalysis]\n    started_time: str\n    ended_time: str\n    total_time: float\n    start_url: str",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "EventTriggered",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.classes",
        "peekOfCode": "class EventTriggered:\n    type: str\n    def to_dict(self):\n        field_names = [f.name for f in fields(self)]\n        d = {k: getattr(self, k) for k in field_names}\n        return d\n@dataclass\nclass Element:\n    tag: str\n    attributes: Dict[str, str]",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "Element",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.classes",
        "peekOfCode": "class Element:\n    tag: str\n    attributes: Dict[str, str]\n    textContent: str\n    children: List[\"Element\"] = field(default_factory=list)\n    id: Optional[str] = None\n    element_id: Optional[int] = None\n    parent_element_id: Optional[int] = None\n    path: Optional[str] = None\n    events_triggered: List[EventTriggered] = field(default_factory=list)",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebCrawlerConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.classes",
        "peekOfCode": "class WebCrawlerConfig:\n    start_url: str\n    max_depth: int = 2",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "PromptLLMTemplate",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "description": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "peekOfCode": "class PromptLLMTemplate:\n    def __init__(self, template: str, variables: list = None, values: dict = None, schema: dict = None):\n        \"\"\"\n        Initializes the PromptLLMTemplate.\n        Args:\n            template (str): The text template containing variables in the format ${variable}.\n            variables (list): Optional list of variables present in the template.\n            values (dict): Optional dictionary of values to replace the variables.\n            schema (dict): Optional JSON schema for validation of values.\n        \"\"\"",
        "detail": "autoppia_iwa.autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "documentation": {}
    },
    {
        "label": "compute_statistics",
        "kind": 2,
        "importPath": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "description": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "peekOfCode": "def compute_statistics(scores: List[float]) -> dict:\n    if scores:\n        stats = {\n            \"count\": len(scores),\n            \"mean\": statistics.mean(scores),\n            \"median\": statistics.median(scores),\n            \"min\": min(scores),\n            \"max\": max(scores),\n            \"stdev\": statistics.stdev(scores) if len(scores) > 1 else 0.0,\n        }",
        "detail": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "documentation": {}
    },
    {
        "label": "generate_tasks_for_project",
        "kind": 2,
        "importPath": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "description": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "peekOfCode": "def generate_tasks_for_project(demo_project):\n    \"\"\"\n    Generate tasks for the given demo project.\n    If TASKS is provided, it will be used. Otherwise, tasks are generated\n    through the TaskGenerationPipeline.\n    \"\"\"\n    task_input = TaskGenerationConfig(demo_web_project=demo_project, save_web_analysis_in_db=True, save_task_in_db=False)\n    if TASKS:\n        tasks = TASKS\n    else:",
        "detail": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "documentation": {}
    },
    {
        "label": "print_performance_statistics",
        "kind": 2,
        "importPath": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "description": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "peekOfCode": "def print_performance_statistics(results, agents):\n    \"\"\"\n    Print performance statistics for each agent.\n    This function iterates over the agents and prints global and per-project statistics.\n    \"\"\"\n    print(\"Agent Performance Metrics:\")\n    for agent in agents:\n        agent_stats = results[agent.id]\n        global_stats = compute_statistics(agent_stats[\"global_scores\"])\n        print(f\"\\nAgent: {agent.id}\")",
        "detail": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "documentation": {}
    },
    {
        "label": "plot_agent_results",
        "kind": 2,
        "importPath": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "description": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "peekOfCode": "def plot_agent_results(results, agents):\n    \"\"\"\n    Plot a bar chart of agents' average global scores.\n    Each bar represents an agent (using its id) with its average score displayed\n    above the bar. If an agent has no score, a 0 is displayed.\n    \"\"\"\n    agent_names = []\n    agent_avg_scores = []\n    # Calculate average global score for each agent.\n    for agent in agents:",
        "detail": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "documentation": {}
    },
    {
        "label": "TASKS",
        "kind": 5,
        "importPath": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "description": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "peekOfCode": "TASKS = [\n    # Task(\n    #     prompt=\"Get the interactive elements from the services by using strictly the 'get_dropdown_options' option only\",\n    #     url='https://www.w3schools.com/',\n    #     specifications=BrowserSpecification(viewport_width=1920, viewport_height=1080, screen_width=1920, screen_height=1080, device_pixel_ratio=1.0, scroll_x=0, scroll_y=0, browser_x=0, browser_y=0),\n    #     tests=[CheckPageViewEventTest(page_view_url='/login'), FindInHtmlTest(description='Find keywords in the current HTML content', test_type='frontend', keywords=['login', 'log in'])],\n    #     milestones=None,\n    #     web_analysis=None,\n    # ), # ONLY for testing as it throws errors due to service not found\n    # Task(",
        "detail": "autoppia_iwa.autoppia_iwa.src.benchmark",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.autoppia_iwa.src.bootstrap",
        "peekOfCode": "class AppBootstrap:\n    def __init__(self):\n        self.configure_dependency_injection()\n    def configure_dependency_injection(self):\n        self.container = DIContainer()",
        "detail": "autoppia_iwa.autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "kind": 6,
        "importPath": "autoppia_iwa.autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.autoppia_iwa.src.di_container",
        "peekOfCode": "class DIContainer(containers.DeclarativeContainer):\n    \"\"\"Dependency Injection Container.\"\"\"\n    # Configuration\n    config = providers.Configuration()\n    wiring_config = containers.WiringConfiguration(packages=[\"src\"])\n    # Initialize MongoDB client as Singleton\n    mongo_client = providers.Singleton(lambda: MongoClient(MONGODB_URL))\n    # Repository of analysis results as Factory\n    analysis_repository = providers.Factory(\n        BaseMongoRepository,",
        "detail": "autoppia_iwa.autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "MessageManager",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.service",
        "peekOfCode": "class MessageManager:\n    def __init__(\n        self,\n        llm: BaseChatModel,\n        task: str,\n        action_descriptions: str,\n        system_prompt_class: Type[SystemPrompt],\n        max_input_tokens: int = 128000,\n        estimated_characters_per_token: int = 3,\n        image_tokens: int = 800,",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.service",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass MessageManager:\n    def __init__(\n        self,\n        llm: BaseChatModel,\n        task: str,\n        action_descriptions: str,\n        system_prompt_class: Type[SystemPrompt],\n        max_input_tokens: int = 128000,\n        estimated_characters_per_token: int = 3,",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.service",
        "documentation": {}
    },
    {
        "label": "message_manager",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "peekOfCode": "def message_manager(request: pytest.FixtureRequest):\n    llm = request.param\n    task = \"Test task\"\n    action_descriptions = \"Test actions\"\n    return MessageManager(\n        llm=llm,\n        task=task,\n        action_descriptions=action_descriptions,\n        system_prompt_class=SystemPrompt,\n        max_input_tokens=1000,",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "documentation": {}
    },
    {
        "label": "test_initial_messages",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "peekOfCode": "def test_initial_messages(message_manager: MessageManager):\n    \"\"\"Test that message manager initializes with system and task messages\"\"\"\n    messages = message_manager.get_messages()\n    assert len(messages) == 2\n    assert isinstance(messages[0], SystemMessage)\n    assert isinstance(messages[1], HumanMessage)\n    assert \"Test task\" in messages[1].content\ndef test_add_state_message(message_manager: MessageManager):\n    \"\"\"Test adding browser state message\"\"\"\n    state = BrowserState(",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "documentation": {}
    },
    {
        "label": "test_add_state_message",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "peekOfCode": "def test_add_state_message(message_manager: MessageManager):\n    \"\"\"Test adding browser state message\"\"\"\n    state = BrowserState(\n        url=\"https://test.com\",\n        title=\"Test Page\",\n        element_tree=DOMElementNode(\n            tag_name=\"div\",\n            attributes={},\n            children=[],\n            is_visible=True,",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "documentation": {}
    },
    {
        "label": "test_add_state_with_memory_result",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "peekOfCode": "def test_add_state_with_memory_result(message_manager: MessageManager):\n    \"\"\"Test adding state with result that should be included in memory\"\"\"\n    state = BrowserState(\n        url=\"https://test.com\",\n        title=\"Test Page\",\n        element_tree=DOMElementNode(\n            tag_name=\"div\",\n            attributes={},\n            children=[],\n            is_visible=True,",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "documentation": {}
    },
    {
        "label": "test_add_state_with_non_memory_result",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "peekOfCode": "def test_add_state_with_non_memory_result(message_manager: MessageManager):\n    \"\"\"Test adding state with result that should not be included in memory\"\"\"\n    state = BrowserState(\n        url=\"https://test.com\",\n        title=\"Test Page\",\n        element_tree=DOMElementNode(\n            tag_name=\"div\",\n            attributes={},\n            children=[],\n            is_visible=True,",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "documentation": {}
    },
    {
        "label": "test_token_overflow_handling_with_real_flow",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "peekOfCode": "def test_token_overflow_handling_with_real_flow(message_manager: MessageManager, max_tokens):\n    \"\"\"Test handling of token overflow in a realistic message flow\"\"\"\n    # Set more realistic token limit\n    message_manager.max_input_tokens = max_tokens\n    # Create a long sequence of interactions\n    for i in range(200):  # Simulate 40 steps of interaction\n        # Create state with varying content length\n        state = BrowserState(\n            url=f\"https://test{i}.com\",\n            title=f\"Test Page {i}\",",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.tests",
        "documentation": {}
    },
    {
        "label": "MessageMetadata",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.views",
        "peekOfCode": "class MessageMetadata(BaseModel):\n    \"\"\"Metadata for a message including token counts\"\"\"\n    input_tokens: int = 0\nclass ManagedMessage(BaseModel):\n    \"\"\"A message with its metadata\"\"\"\n    message: BaseMessage\n    metadata: MessageMetadata = Field(default_factory=MessageMetadata)\nclass MessageHistory(BaseModel):\n    \"\"\"Container for message history with metadata\"\"\"\n    messages: List[ManagedMessage] = Field(default_factory=list)",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.views",
        "documentation": {}
    },
    {
        "label": "ManagedMessage",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.views",
        "peekOfCode": "class ManagedMessage(BaseModel):\n    \"\"\"A message with its metadata\"\"\"\n    message: BaseMessage\n    metadata: MessageMetadata = Field(default_factory=MessageMetadata)\nclass MessageHistory(BaseModel):\n    \"\"\"Container for message history with metadata\"\"\"\n    messages: List[ManagedMessage] = Field(default_factory=list)\n    total_tokens: int = 0\n    def add_message(self, message: BaseMessage, metadata: MessageMetadata) -> None:\n        \"\"\"Add a message with metadata\"\"\"",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.views",
        "documentation": {}
    },
    {
        "label": "MessageHistory",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.views",
        "peekOfCode": "class MessageHistory(BaseModel):\n    \"\"\"Container for message history with metadata\"\"\"\n    messages: List[ManagedMessage] = Field(default_factory=list)\n    total_tokens: int = 0\n    def add_message(self, message: BaseMessage, metadata: MessageMetadata) -> None:\n        \"\"\"Add a message with metadata\"\"\"\n        self.messages.append(ManagedMessage(message=message, metadata=metadata))\n        self.total_tokens += metadata.input_tokens\n    def remove_message(self, index: int = -1) -> None:\n        \"\"\"Remove last message from history\"\"\"",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.message_manager.views",
        "documentation": {}
    },
    {
        "label": "SystemPrompt",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.prompts",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.prompts",
        "peekOfCode": "class SystemPrompt:\n    def __init__(self, action_description: str, current_date: datetime, max_actions_per_step: int = 10):\n        self.default_action_description = action_description\n        self.current_date = current_date\n        self.max_actions_per_step = max_actions_per_step\n    def important_rules(self) -> str:\n        \"\"\"\n        Returns the important rules for the agent.\n        \"\"\"\n        text = \"\"\"",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.prompts",
        "documentation": {}
    },
    {
        "label": "AgentMessagePrompt",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.prompts",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.prompts",
        "peekOfCode": "class AgentMessagePrompt:\n    def __init__(\n        self,\n        state: BrowserState,\n        result: Optional[List[ActionResult]] = None,\n        include_attributes: list[str] = [],\n        max_error_length: int = 400,\n        step_info: Optional[AgentStepInfo] = None,\n    ):\n        self.state = state",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.prompts",
        "documentation": {}
    },
    {
        "label": "Agent",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.service",
        "peekOfCode": "class Agent:\n    def __init__(\n        self,\n        task: str,\n        llm: BaseChatModel,\n        browser: Browser | None = None,\n        browser_context: BrowserContext | None = None,\n        controller: Controller = Controller(),\n        use_vision: bool = True,\n        save_conversation_path: Optional[str] = None,",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.service",
        "peekOfCode": "logger = logging.getLogger(__name__)\nT = TypeVar(\"T\", bound=BaseModel)\nclass Agent:\n    def __init__(\n        self,\n        task: str,\n        llm: BaseChatModel,\n        browser: Browser | None = None,\n        browser_context: BrowserContext | None = None,\n        controller: Controller = Controller(),",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.service",
        "peekOfCode": "T = TypeVar(\"T\", bound=BaseModel)\nclass Agent:\n    def __init__(\n        self,\n        task: str,\n        llm: BaseChatModel,\n        browser: Browser | None = None,\n        browser_context: BrowserContext | None = None,\n        controller: Controller = Controller(),\n        use_vision: bool = True,",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.service",
        "documentation": {}
    },
    {
        "label": "sample_browser_state",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def sample_browser_state():\n    return BrowserState(\n        url=\"https://example.com\",\n        title=\"Example Page\",\n        tabs=[TabInfo(url=\"https://example.com\", title=\"Example Page\", page_id=1)],\n        screenshot=\"screenshot1.png\",\n        element_tree=DOMElementNode(\n            tag_name=\"root\",\n            is_visible=True,\n            parent=None,",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "action_registry",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def action_registry():\n    registry = Registry()\n    # Register the actions we need for testing\n    @registry.action(description=\"Click an element\", requires_browser=True, param_model=ClickElementAction)\n    def click_element(params: ClickElementAction, browser=None):\n        pass\n    @registry.action(\n        description=\"Extract page content\",\n        requires_browser=True,\n        param_model=ExtractPageContentAction,",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "sample_history",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def sample_history(action_registry):\n    # Create actions with nested params structure\n    click_action = action_registry(click_element={\"index\": 1})\n    extract_action = action_registry(extract_page_content={\"value\": \"text\"})\n    done_action = action_registry(done={\"text\": \"Task completed\"})\n    histories = [\n        AgentHistory(\n            model_output=AgentOutput(\n                current_state=AgentBrain(evaluation_previous_goal=\"None\", memory=\"Started task\", next_goal=\"Click button\"),\n                action=[click_action],",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "test_last_model_output",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def test_last_model_output(sample_history: AgentHistoryList):\n    last_output = sample_history.last_action()\n    print(last_output)\n    assert last_output == {\"done\": {\"text\": \"Task completed\"}}\ndef test_get_errors(sample_history: AgentHistoryList):\n    errors = sample_history.errors()\n    assert len(errors) == 1\n    assert errors[0] == \"Failed to extract completely\"\ndef test_final_result(sample_history: AgentHistoryList):\n    assert sample_history.final_result() == \"Task completed\"",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "test_get_errors",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def test_get_errors(sample_history: AgentHistoryList):\n    errors = sample_history.errors()\n    assert len(errors) == 1\n    assert errors[0] == \"Failed to extract completely\"\ndef test_final_result(sample_history: AgentHistoryList):\n    assert sample_history.final_result() == \"Task completed\"\ndef test_is_done(sample_history: AgentHistoryList):\n    assert sample_history.is_done() == True\ndef test_urls(sample_history: AgentHistoryList):\n    urls = sample_history.urls()",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "test_final_result",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def test_final_result(sample_history: AgentHistoryList):\n    assert sample_history.final_result() == \"Task completed\"\ndef test_is_done(sample_history: AgentHistoryList):\n    assert sample_history.is_done() == True\ndef test_urls(sample_history: AgentHistoryList):\n    urls = sample_history.urls()\n    assert \"https://example.com\" in urls\n    assert \"https://example.com/page2\" in urls\ndef test_all_screenshots(sample_history: AgentHistoryList):\n    screenshots = sample_history.screenshots()",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "test_is_done",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def test_is_done(sample_history: AgentHistoryList):\n    assert sample_history.is_done() == True\ndef test_urls(sample_history: AgentHistoryList):\n    urls = sample_history.urls()\n    assert \"https://example.com\" in urls\n    assert \"https://example.com/page2\" in urls\ndef test_all_screenshots(sample_history: AgentHistoryList):\n    screenshots = sample_history.screenshots()\n    assert len(screenshots) == 3\n    assert screenshots == [\"screenshot1.png\", \"screenshot2.png\", \"screenshot3.png\"]",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "test_urls",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def test_urls(sample_history: AgentHistoryList):\n    urls = sample_history.urls()\n    assert \"https://example.com\" in urls\n    assert \"https://example.com/page2\" in urls\ndef test_all_screenshots(sample_history: AgentHistoryList):\n    screenshots = sample_history.screenshots()\n    assert len(screenshots) == 3\n    assert screenshots == [\"screenshot1.png\", \"screenshot2.png\", \"screenshot3.png\"]\ndef test_all_model_outputs(sample_history: AgentHistoryList):\n    outputs = sample_history.model_actions()",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "test_all_screenshots",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def test_all_screenshots(sample_history: AgentHistoryList):\n    screenshots = sample_history.screenshots()\n    assert len(screenshots) == 3\n    assert screenshots == [\"screenshot1.png\", \"screenshot2.png\", \"screenshot3.png\"]\ndef test_all_model_outputs(sample_history: AgentHistoryList):\n    outputs = sample_history.model_actions()\n    assert len(outputs) == 3\n    assert outputs[0] == {\"click_element\": {\"index\": 1, \"xpath\": \"//button[1]\"}}\n    assert outputs[1] == {\"extract_page_content\": {\"value\": \"text\"}}\n    assert outputs[2] == {\"done\": {\"text\": \"Task completed\"}}",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "test_all_model_outputs",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def test_all_model_outputs(sample_history: AgentHistoryList):\n    outputs = sample_history.model_actions()\n    assert len(outputs) == 3\n    assert outputs[0] == {\"click_element\": {\"index\": 1, \"xpath\": \"//button[1]\"}}\n    assert outputs[1] == {\"extract_page_content\": {\"value\": \"text\"}}\n    assert outputs[2] == {\"done\": {\"text\": \"Task completed\"}}\ndef test_all_model_outputs_filtered(sample_history: AgentHistoryList):\n    filtered = sample_history.model_actions_filtered(include=[\"click_element\"])\n    assert len(filtered) == 1\n    assert filtered[0][\"click_element\"][\"index\"] == 1",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "test_all_model_outputs_filtered",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def test_all_model_outputs_filtered(sample_history: AgentHistoryList):\n    filtered = sample_history.model_actions_filtered(include=[\"click_element\"])\n    assert len(filtered) == 1\n    assert filtered[0][\"click_element\"][\"index\"] == 1\ndef test_empty_history():\n    empty_history = AgentHistoryList(history=[])\n    assert empty_history.last_action() is None\n    assert empty_history.final_result() is None\n    assert empty_history.is_done() == False\n    assert len(empty_history.urls()) == 0",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "test_empty_history",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def test_empty_history():\n    empty_history = AgentHistoryList(history=[])\n    assert empty_history.last_action() is None\n    assert empty_history.final_result() is None\n    assert empty_history.is_done() == False\n    assert len(empty_history.urls()) == 0\n# Add a test to verify action creation\ndef test_action_creation(action_registry):\n    click_action = action_registry(click_element={\"index\": 1})\n    assert click_action.model_dump(exclude_none=True) == {\"click_element\": {\"index\": 1}}",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "test_action_creation",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "peekOfCode": "def test_action_creation(action_registry):\n    click_action = action_registry(click_element={\"index\": 1})\n    assert click_action.model_dump(exclude_none=True) == {\"click_element\": {\"index\": 1}}\n# run this with:\n# pytest browser_use/agent/tests.py",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.tests",
        "documentation": {}
    },
    {
        "label": "AgentStepInfo",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "peekOfCode": "class AgentStepInfo:\n    step_number: int\n    max_steps: int\nclass ActionResult(BaseModel):\n    \"\"\"Result of executing an action\"\"\"\n    is_done: Optional[bool] = False\n    extracted_content: Optional[str] = None\n    error: Optional[str] = None\n    include_in_memory: bool = False  # whether to include in past messages as context or not\nclass AgentBrain(BaseModel):",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "peekOfCode": "class ActionResult(BaseModel):\n    \"\"\"Result of executing an action\"\"\"\n    is_done: Optional[bool] = False\n    extracted_content: Optional[str] = None\n    error: Optional[str] = None\n    include_in_memory: bool = False  # whether to include in past messages as context or not\nclass AgentBrain(BaseModel):\n    \"\"\"Current state of the agent\"\"\"\n    evaluation_previous_goal: str\n    memory: str",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentBrain",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "peekOfCode": "class AgentBrain(BaseModel):\n    \"\"\"Current state of the agent\"\"\"\n    evaluation_previous_goal: str\n    memory: str\n    next_goal: str\nclass AgentOutput(BaseModel):\n    \"\"\"Output model for agent\n    @dev note: this model is extended with custom actions in AgentService. You can also use some fields that are not in this model as provided by the linter, as long as they are registered in the DynamicActions model.\n    \"\"\"\n    model_config = ConfigDict(arbitrary_types_allowed=True)",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentOutput",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "peekOfCode": "class AgentOutput(BaseModel):\n    \"\"\"Output model for agent\n    @dev note: this model is extended with custom actions in AgentService. You can also use some fields that are not in this model as provided by the linter, as long as they are registered in the DynamicActions model.\n    \"\"\"\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n    current_state: AgentBrain\n    action: list[ActionModel]\n    @staticmethod\n    def type_with_custom_actions(custom_actions: Type[ActionModel]) -> Type[\"AgentOutput\"]:\n        \"\"\"Extend actions with custom actions\"\"\"",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistory",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "peekOfCode": "class AgentHistory(BaseModel):\n    \"\"\"History item for agent actions\"\"\"\n    model_output: AgentOutput | None\n    result: list[ActionResult]\n    state: BrowserStateHistory\n    model_config = ConfigDict(arbitrary_types_allowed=True, protected_namespaces=())\n    @staticmethod\n    def get_interacted_element(model_output: AgentOutput, selector_map: SelectorMap) -> list[DOMHistoryElement | None]:\n        elements = []\n        for action in model_output.action:",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "peekOfCode": "class AgentHistoryList(BaseModel):\n    \"\"\"List of agent history items\"\"\"\n    history: list[AgentHistory]\n    def __str__(self) -> str:\n        \"\"\"Representation of the AgentHistoryList object\"\"\"\n        return f\"AgentHistoryList(all_results={self.action_results()}, all_model_outputs={self.model_actions()})\"\n    def __repr__(self) -> str:\n        \"\"\"Representation of the AgentHistoryList object\"\"\"\n        return self.__str__()\n    def save_to_file(self, filepath: str | Path) -> None:",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "AgentError",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "peekOfCode": "class AgentError:\n    \"\"\"Container for agent error handling\"\"\"\n    VALIDATION_ERROR = \"Invalid model output format. Please follow the correct schema.\"\n    RATE_LIMIT_ERROR = \"Rate limit reached. Waiting before retry.\"\n    NO_VALID_ACTION = \"No valid action found\"\n    @staticmethod\n    def format_error(error: Exception, include_trace: bool = False) -> str:\n        \"\"\"Format error message based on error type and optionally include trace\"\"\"\n        if isinstance(error, ValidationError):\n            return f\"{AgentError.VALIDATION_ERROR}\\nDetails: {str(error)}\"",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.agent.views",
        "documentation": {}
    },
    {
        "label": "test_take_full_page_screenshot",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.tests.screenshot_test",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.tests.screenshot_test",
        "peekOfCode": "def test_take_full_page_screenshot(browser):\n    # Go to a test page\n    browser.go_to_url(\"https://example.com\")\n    # Take full page screenshot\n    screenshot_b64 = browser.take_screenshot(full_page=True)\n    # Verify screenshot is not empty and is valid base64\n    assert screenshot_b64 is not None\n    assert isinstance(screenshot_b64, str)\n    assert len(screenshot_b64) > 0\n    # Test we can decode the base64 string",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.tests.screenshot_test",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.browser",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.browser",
        "peekOfCode": "class BrowserConfig:\n    \"\"\"\n    Configuration for the Browser.\n    Default values:\n            headless: True\n                    Whether to run browser in headless mode\n            disable_security: False\n                    Disable browser security features\n            extra_chromium_args: []\n                    Extra arguments to pass to the browser",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "Browser",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.browser",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.browser",
        "peekOfCode": "class Browser:\n    \"\"\"\n    Playwright browser on steroids.\n    This is persistant browser factory that can spawn multiple browser contexts.\n    It is recommended to use only one instance of Browser per your application (RAM usage will grow otherwise).\n    \"\"\"\n    def __init__(\n        self,\n        config: BrowserConfig = BrowserConfig(),\n    ):",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.browser",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.browser",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@dataclass\nclass BrowserConfig:\n    \"\"\"\n    Configuration for the Browser.\n    Default values:\n            headless: True\n                    Whether to run browser in headless mode\n            disable_security: False\n                    Disable browser security features",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.browser",
        "documentation": {}
    },
    {
        "label": "BrowserContextWindowSize",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "peekOfCode": "class BrowserContextWindowSize(TypedDict):\n    width: int\n    height: int\n@dataclass\nclass BrowserContextConfig:\n    \"\"\"\n    Configuration for the BrowserContext.\n    Default values:\n            cookies_file: None\n                    Path to cookies file for persistence",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContextConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "peekOfCode": "class BrowserContextConfig:\n    \"\"\"\n    Configuration for the BrowserContext.\n    Default values:\n            cookies_file: None\n                    Path to cookies file for persistence\n            disable_security: False\n                    Disable browser security features\n            minimum_wait_page_load_time: 0.5\n                    Minimum time to wait before getting page state for LLM input",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserSession",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "peekOfCode": "class BrowserSession:\n    context: PlaywrightBrowserContext\n    current_page: Page\n    cached_state: BrowserState\nclass BrowserContext:\n    def __init__(\n        self,\n        browser: \"Browser\",\n        config: BrowserContextConfig = BrowserContextConfig(),\n    ):",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "BrowserContext",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "peekOfCode": "class BrowserContext:\n    def __init__(\n        self,\n        browser: \"Browser\",\n        config: BrowserContextConfig = BrowserContextConfig(),\n    ):\n        self.context_id = str(uuid.uuid4())\n        logger.debug(f\"Initializing new browser context with id: {self.context_id}\")\n        self.config = config\n        self.browser = browser",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BrowserContextWindowSize(TypedDict):\n    width: int\n    height: int\n@dataclass\nclass BrowserContextConfig:\n    \"\"\"\n    Configuration for the BrowserContext.\n    Default values:\n            cookies_file: None",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "\t\t\twindow.chrome",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "peekOfCode": "\t\t\twindow.chrome = { runtime: {} };\n\t\t\t// Permissions\n\t\t\tconst originalQuery = window.navigator.permissions.query;\n\t\t\twindow.navigator.permissions.query = (parameters) => (\n\t\t\t\tparameters.name === 'notifications' ?\n\t\t\t\t\tPromise.resolve({ state: Notification.permission }) :\n\t\t\t\t\toriginalQuery(parameters)\n\t\t\t);\n\t\t\t(function () {\n\t\t\t\tconst originalAttachShadow = Element.prototype.attachShadow;",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "\t\t\twindow.navigator.permissions.query",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "peekOfCode": "\t\t\twindow.navigator.permissions.query = (parameters) => (\n\t\t\t\tparameters.name === 'notifications' ?\n\t\t\t\t\tPromise.resolve({ state: Notification.permission }) :\n\t\t\t\t\toriginalQuery(parameters)\n\t\t\t);\n\t\t\t(function () {\n\t\t\t\tconst originalAttachShadow = Element.prototype.attachShadow;\n\t\t\t\tElement.prototype.attachShadow = function attachShadow(options) {\n\t\t\t\t\treturn originalAttachShadow.call(this, { ...options, mode: \"open\" });\n\t\t\t\t};",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tElement.prototype.attachShadow",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "peekOfCode": "\t\t\t\tElement.prototype.attachShadow = function attachShadow(options) {\n\t\t\t\t\treturn originalAttachShadow.call(this, { ...options, mode: \"open\" });\n\t\t\t\t};\n\t\t\t})();\n\t\t\t\"\"\"\n        )\n        return context\n    async def _wait_for_stable_network(self):\n        page = await self.get_current_page()\n        pending_requests = set()",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.context",
        "documentation": {}
    },
    {
        "label": "TabInfo",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "peekOfCode": "class TabInfo(BaseModel):\n    \"\"\"Represents information about a browser tab\"\"\"\n    page_id: int\n    url: str\n    title: str\n@dataclass\nclass BrowserState(DOMState):\n    url: str\n    title: str\n    tabs: list[TabInfo]",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserState",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "peekOfCode": "class BrowserState(DOMState):\n    url: str\n    title: str\n    tabs: list[TabInfo]\n    screenshot: Optional[str] = None\n    pixels_above: int = 0\n    pixels_below: int = 0\n    browser_errors: list[str] = field(default_factory=list)\n@dataclass\nclass BrowserStateHistory:",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserStateHistory",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "peekOfCode": "class BrowserStateHistory:\n    url: str\n    title: str\n    tabs: list[TabInfo]\n    interacted_element: list[DOMHistoryElement | None] | list[None]\n    screenshot: Optional[str] = None\n    selector_map: Optional[SelectorMap] = None\n    def to_dict(self) -> dict[str, Any]:\n        data = {}\n        data[\"tabs\"] = [tab.model_dump() for tab in self.tabs]",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "BrowserError",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "peekOfCode": "class BrowserError(Exception):\n    \"\"\"Base class for all browser errors\"\"\"\nclass URLNotAllowedError(BrowserError):\n    \"\"\"Error raised when a URL is not allowed\"\"\"",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "URLNotAllowedError",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "peekOfCode": "class URLNotAllowedError(BrowserError):\n    \"\"\"Error raised when a URL is not allowed\"\"\"",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.browser.views",
        "documentation": {}
    },
    {
        "label": "Registry",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.registry.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.registry.service",
        "peekOfCode": "class Registry:\n    \"\"\"Service for registering and managing actions\"\"\"\n    def __init__(self, exclude_actions: list[str] = []):\n        self.registry = ActionRegistry()\n        self.telemetry = ProductTelemetry()\n        self.exclude_actions = exclude_actions\n    def _create_param_model(self, function: Callable) -> Type[BaseModel]:\n        \"\"\"Creates a Pydantic model from function signature\"\"\"\n        sig = signature(function)\n        params = {name: (param.annotation, ... if param.default == param.empty else param.default) for name, param in sig.parameters.items() if name != \"browser\"}",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.registry.service",
        "documentation": {}
    },
    {
        "label": "RegisteredAction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.registry.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.registry.views",
        "peekOfCode": "class RegisteredAction(BaseModel):\n    \"\"\"Model for a registered action\"\"\"\n    name: str\n    description: str\n    function: Callable\n    param_model: Type[BaseModel]\n    requires_browser: bool = False\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n    def prompt_description(self) -> str:\n        \"\"\"Get a description of the action for the prompt\"\"\"",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.registry.views",
        "documentation": {}
    },
    {
        "label": "ActionModel",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.registry.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.registry.views",
        "peekOfCode": "class ActionModel(BaseModel):\n    \"\"\"Base model for dynamically created action models\"\"\"\n    # this will have all the registered actions, e.g.\n    # click_element = param_model = ClickElementParams\n    # done = param_model = None\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n    def get_index(self) -> int | None:\n        \"\"\"Get the index of the action\"\"\"\n        # {'clicked_element': {'index':5}}\n        params = self.model_dump(exclude_unset=True).values()",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.registry.views",
        "documentation": {}
    },
    {
        "label": "ActionRegistry",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.registry.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.registry.views",
        "peekOfCode": "class ActionRegistry(BaseModel):\n    \"\"\"Model representing the action registry\"\"\"\n    actions: Dict[str, RegisteredAction] = {}\n    def get_prompt_description(self) -> str:\n        \"\"\"Get a description of all actions for the prompt\"\"\"\n        return \"\\n\".join([action.prompt_description() for action in self.actions.values()])",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.registry.views",
        "documentation": {}
    },
    {
        "label": "Controller",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.service",
        "peekOfCode": "class Controller:\n    def __init__(\n        self,\n        exclude_actions: list[str] = [],\n        output_model: Optional[Type[BaseModel]] = None,\n    ):\n        self.exclude_actions = exclude_actions\n        self.output_model = output_model\n        self.registry = Registry(exclude_actions)\n        self._register_default_actions()",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.service",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Controller:\n    def __init__(\n        self,\n        exclude_actions: list[str] = [],\n        output_model: Optional[Type[BaseModel]] = None,\n    ):\n        self.exclude_actions = exclude_actions\n        self.output_model = output_model\n        self.registry = Registry(exclude_actions)",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.service",
        "documentation": {}
    },
    {
        "label": "SearchGoogleAction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "peekOfCode": "class SearchGoogleAction(BaseModel):\n    query: str\nclass GoToUrlAction(BaseModel):\n    url: str\nclass ClickElementAction(BaseModel):\n    index: int\n    xpath: Optional[str] = None\nclass InputTextAction(BaseModel):\n    index: int\n    text: str",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "GoToUrlAction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "peekOfCode": "class GoToUrlAction(BaseModel):\n    url: str\nclass ClickElementAction(BaseModel):\n    index: int\n    xpath: Optional[str] = None\nclass InputTextAction(BaseModel):\n    index: int\n    text: str\n    xpath: Optional[str] = None\nclass DoneAction(BaseModel):",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "ClickElementAction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "peekOfCode": "class ClickElementAction(BaseModel):\n    index: int\n    xpath: Optional[str] = None\nclass InputTextAction(BaseModel):\n    index: int\n    text: str\n    xpath: Optional[str] = None\nclass DoneAction(BaseModel):\n    text: str\nclass SwitchTabAction(BaseModel):",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "InputTextAction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "peekOfCode": "class InputTextAction(BaseModel):\n    index: int\n    text: str\n    xpath: Optional[str] = None\nclass DoneAction(BaseModel):\n    text: str\nclass SwitchTabAction(BaseModel):\n    page_id: int\nclass OpenTabAction(BaseModel):\n    url: str",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "DoneAction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "peekOfCode": "class DoneAction(BaseModel):\n    text: str\nclass SwitchTabAction(BaseModel):\n    page_id: int\nclass OpenTabAction(BaseModel):\n    url: str\nclass ExtractPageContentAction(BaseModel):\n    include_links: bool\nclass ScrollAction(BaseModel):\n    amount: Optional[int] = None  # The number of pixels to scroll. If None, scroll down/up one page",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "SwitchTabAction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "peekOfCode": "class SwitchTabAction(BaseModel):\n    page_id: int\nclass OpenTabAction(BaseModel):\n    url: str\nclass ExtractPageContentAction(BaseModel):\n    include_links: bool\nclass ScrollAction(BaseModel):\n    amount: Optional[int] = None  # The number of pixels to scroll. If None, scroll down/up one page\nclass SendKeysAction(BaseModel):\n    keys: str",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "OpenTabAction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "peekOfCode": "class OpenTabAction(BaseModel):\n    url: str\nclass ExtractPageContentAction(BaseModel):\n    include_links: bool\nclass ScrollAction(BaseModel):\n    amount: Optional[int] = None  # The number of pixels to scroll. If None, scroll down/up one page\nclass SendKeysAction(BaseModel):\n    keys: str\nclass NoParamsAction(BaseModel):\n    \"\"\"",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "ExtractPageContentAction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "peekOfCode": "class ExtractPageContentAction(BaseModel):\n    include_links: bool\nclass ScrollAction(BaseModel):\n    amount: Optional[int] = None  # The number of pixels to scroll. If None, scroll down/up one page\nclass SendKeysAction(BaseModel):\n    keys: str\nclass NoParamsAction(BaseModel):\n    \"\"\"\n    Accepts absolutely anything in the incoming data\n    and discards it, so the final parsed model is empty.",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "ScrollAction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "peekOfCode": "class ScrollAction(BaseModel):\n    amount: Optional[int] = None  # The number of pixels to scroll. If None, scroll down/up one page\nclass SendKeysAction(BaseModel):\n    keys: str\nclass NoParamsAction(BaseModel):\n    \"\"\"\n    Accepts absolutely anything in the incoming data\n    and discards it, so the final parsed model is empty.\n    \"\"\"\n    @model_validator(mode=\"before\")",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "SendKeysAction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "peekOfCode": "class SendKeysAction(BaseModel):\n    keys: str\nclass NoParamsAction(BaseModel):\n    \"\"\"\n    Accepts absolutely anything in the incoming data\n    and discards it, so the final parsed model is empty.\n    \"\"\"\n    @model_validator(mode=\"before\")\n    def ignore_all_inputs(cls, values):\n        # No matter what the user sends, discard it and return empty.",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "NoParamsAction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "peekOfCode": "class NoParamsAction(BaseModel):\n    \"\"\"\n    Accepts absolutely anything in the incoming data\n    and discards it, so the final parsed model is empty.\n    \"\"\"\n    @model_validator(mode=\"before\")\n    def ignore_all_inputs(cls, values):\n        # No matter what the user sends, discard it and return empty.\n        return {}\n    class Config:",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.controller.views",
        "documentation": {}
    },
    {
        "label": "HistoryTreeProcessor",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.service",
        "peekOfCode": "class HistoryTreeProcessor:\n    \"\"\" \"\n    Operations on the DOM elements\n    @dev be careful - text nodes can change even if elements stay the same\n    \"\"\"\n    @staticmethod\n    def convert_dom_element_to_history_element(dom_element: DOMElementNode) -> DOMHistoryElement:\n        parent_branch_path = HistoryTreeProcessor._get_parent_branch_path(dom_element)\n        css_selector = dom_element.get_advanced_css_selector()\n        return DOMHistoryElement(",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.service",
        "documentation": {}
    },
    {
        "label": "HashedDomElement",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "peekOfCode": "class HashedDomElement:\n    \"\"\"\n    Hash of the dom element to be used as a unique identifier\n    \"\"\"\n    branch_path_hash: str\n    attributes_hash: str\n    xpath_hash: str\n    # text_hash: str\nclass Coordinates(BaseModel):\n    x: int",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "documentation": {}
    },
    {
        "label": "Coordinates",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "peekOfCode": "class Coordinates(BaseModel):\n    x: int\n    y: int\nclass CoordinateSet(BaseModel):\n    top_left: Coordinates\n    top_right: Coordinates\n    bottom_left: Coordinates\n    bottom_right: Coordinates\n    center: Coordinates\n    width: int",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "documentation": {}
    },
    {
        "label": "CoordinateSet",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "peekOfCode": "class CoordinateSet(BaseModel):\n    top_left: Coordinates\n    top_right: Coordinates\n    bottom_left: Coordinates\n    bottom_right: Coordinates\n    center: Coordinates\n    width: int\n    height: int\nclass ViewportInfo(BaseModel):\n    scroll_x: int",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "documentation": {}
    },
    {
        "label": "ViewportInfo",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "peekOfCode": "class ViewportInfo(BaseModel):\n    scroll_x: int\n    scroll_y: int\n    width: int\n    height: int\n@dataclass\nclass DOMHistoryElement:\n    tag_name: str\n    xpath: str\n    highlight_index: Optional[int]",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "documentation": {}
    },
    {
        "label": "DOMHistoryElement",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "peekOfCode": "class DOMHistoryElement:\n    tag_name: str\n    xpath: str\n    highlight_index: Optional[int]\n    entire_parent_branch_path: list[str]\n    attributes: dict[str, str]\n    shadow_root: bool = False\n    css_selector: Optional[str] = None\n    page_coordinates: Optional[CoordinateSet] = None\n    viewport_coordinates: Optional[CoordinateSet] = None",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.history_tree_processor.view",
        "documentation": {}
    },
    {
        "label": "DomService",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.service",
        "peekOfCode": "class DomService:\n    def __init__(self, page: Page):\n        self.page = page\n        self.xpath_cache = {}\n    # region - Clickable elements\n    async def get_clickable_elements(\n        self,\n        highlight_elements: bool = True,\n        focus_element: int = -1,\n        viewport_expansion: int = 0,",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.service",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DomService:\n    def __init__(self, page: Page):\n        self.page = page\n        self.xpath_cache = {}\n    # region - Clickable elements\n    async def get_clickable_elements(\n        self,\n        highlight_elements: bool = True,\n        focus_element: int = -1,",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.service",
        "documentation": {}
    },
    {
        "label": "DOMBaseNode",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "peekOfCode": "class DOMBaseNode:\n    is_visible: bool\n    # Use None as default and set parent later to avoid circular reference issues\n    parent: Optional[\"DOMElementNode\"]\n@dataclass(frozen=False)\nclass DOMTextNode(DOMBaseNode):\n    text: str\n    type: str = \"TEXT_NODE\"\n    def has_parent_with_highlight_index(self) -> bool:\n        current = self.parent",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "DOMTextNode",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "peekOfCode": "class DOMTextNode(DOMBaseNode):\n    text: str\n    type: str = \"TEXT_NODE\"\n    def has_parent_with_highlight_index(self) -> bool:\n        current = self.parent\n        while current is not None:\n            if current.highlight_index is not None:\n                return True\n            current = current.parent\n        return False",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "DOMElementNode",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "peekOfCode": "class DOMElementNode(DOMBaseNode):\n    \"\"\"\n    xpath: the xpath of the element from the last root node (shadow root or iframe OR document if no shadow root or iframe).\n    To properly reference the element we need to recursively switch the root node until we find the element (work you way up the tree with `.parent`)\n    \"\"\"\n    tag_name: str\n    xpath: str\n    attributes: Dict[str, str]\n    children: List[DOMBaseNode]\n    is_interactive: bool = False",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "ElementTreeSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "peekOfCode": "class ElementTreeSerializer:\n    @staticmethod\n    def serialize_clickable_elements(element_tree: DOMElementNode) -> str:\n        return element_tree.clickable_elements_to_string()\n    @staticmethod\n    def dom_element_node_to_json(element_tree: DOMElementNode) -> dict:\n        def node_to_dict(node: DOMBaseNode) -> dict:\n            if isinstance(node, DOMTextNode):\n                return {\"type\": \"text\", \"text\": node.text}\n            elif isinstance(node, DOMElementNode):",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "DOMState",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "peekOfCode": "class DOMState:\n    element_tree: DOMElementNode\n    selector_map: SelectorMap",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "SelectorMap",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "peekOfCode": "SelectorMap = dict[int, DOMElementNode]\n@dataclass\nclass DOMState:\n    element_tree: DOMElementNode\n    selector_map: SelectorMap",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.dom.views",
        "documentation": {}
    },
    {
        "label": "ProductTelemetry",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.telemetry.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.telemetry.service",
        "peekOfCode": "class ProductTelemetry:\n    \"\"\"\n    Service for capturing anonymized telemetry data.\n    If the environment variable `ANONYMIZED_TELEMETRY=False`, anonymized telemetry will be disabled.\n    \"\"\"\n    USER_ID_PATH = str(Path.home() / \".cache\" / \"browser_use\" / \"telemetry_user_id\")\n    PROJECT_API_KEY = \"phc_F8JMNjW1i2KbGUTaW1unnDdLSPCoyc52SGRU0JecaUh\"\n    HOST = \"https://eu.i.posthog.com\"\n    UNKNOWN_USER_ID = \"UNKNOWN\"\n    _curr_user_id = None",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.telemetry.service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.telemetry.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.telemetry.service",
        "peekOfCode": "logger = logging.getLogger(__name__)\nPOSTHOG_EVENT_SETTINGS = {\n    \"process_person_profile\": True,\n}\n@singleton\nclass ProductTelemetry:\n    \"\"\"\n    Service for capturing anonymized telemetry data.\n    If the environment variable `ANONYMIZED_TELEMETRY=False`, anonymized telemetry will be disabled.\n    \"\"\"",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.telemetry.service",
        "documentation": {}
    },
    {
        "label": "POSTHOG_EVENT_SETTINGS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.telemetry.service",
        "description": "autoppia_iwa.modules.browser-use.browser_use.telemetry.service",
        "peekOfCode": "POSTHOG_EVENT_SETTINGS = {\n    \"process_person_profile\": True,\n}\n@singleton\nclass ProductTelemetry:\n    \"\"\"\n    Service for capturing anonymized telemetry data.\n    If the environment variable `ANONYMIZED_TELEMETRY=False`, anonymized telemetry will be disabled.\n    \"\"\"\n    USER_ID_PATH = str(Path.home() / \".cache\" / \"browser_use\" / \"telemetry_user_id\")",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.telemetry.service",
        "documentation": {}
    },
    {
        "label": "BaseTelemetryEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "peekOfCode": "class BaseTelemetryEvent(ABC):\n    @property\n    @abstractmethod\n    def name(self) -> str:\n        pass\n    @property\n    def properties(self) -> Dict[str, Any]:\n        return {k: v for k, v in asdict(self).items() if k != \"name\"}\n@dataclass\nclass RegisteredFunction:",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "documentation": {}
    },
    {
        "label": "RegisteredFunction",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "peekOfCode": "class RegisteredFunction:\n    name: str\n    params: dict[str, Any]\n@dataclass\nclass ControllerRegisteredFunctionsTelemetryEvent(BaseTelemetryEvent):\n    registered_functions: list[RegisteredFunction]\n    name: str = \"controller_registered_functions\"\n@dataclass\nclass AgentStepTelemetryEvent(BaseTelemetryEvent):\n    agent_id: str",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "documentation": {}
    },
    {
        "label": "ControllerRegisteredFunctionsTelemetryEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "peekOfCode": "class ControllerRegisteredFunctionsTelemetryEvent(BaseTelemetryEvent):\n    registered_functions: list[RegisteredFunction]\n    name: str = \"controller_registered_functions\"\n@dataclass\nclass AgentStepTelemetryEvent(BaseTelemetryEvent):\n    agent_id: str\n    step: int\n    step_error: list[str]\n    consecutive_failures: int\n    actions: list[dict]",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "documentation": {}
    },
    {
        "label": "AgentStepTelemetryEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "peekOfCode": "class AgentStepTelemetryEvent(BaseTelemetryEvent):\n    agent_id: str\n    step: int\n    step_error: list[str]\n    consecutive_failures: int\n    actions: list[dict]\n    name: str = \"agent_step\"\n@dataclass\nclass AgentRunTelemetryEvent(BaseTelemetryEvent):\n    agent_id: str",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "documentation": {}
    },
    {
        "label": "AgentRunTelemetryEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "peekOfCode": "class AgentRunTelemetryEvent(BaseTelemetryEvent):\n    agent_id: str\n    use_vision: bool\n    task: str\n    model_name: str\n    chat_model_library: str\n    version: str\n    source: str\n    name: str = \"agent_run\"\n@dataclass",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "documentation": {}
    },
    {
        "label": "AgentEndTelemetryEvent",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "description": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "peekOfCode": "class AgentEndTelemetryEvent(BaseTelemetryEvent):\n    agent_id: str\n    steps: int\n    max_steps_reached: bool\n    success: bool\n    errors: list[str]\n    name: str = \"agent_end\"",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.telemetry.views",
        "documentation": {}
    },
    {
        "label": "addLoggingLevel",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.logging_config",
        "description": "autoppia_iwa.modules.browser-use.browser_use.logging_config",
        "peekOfCode": "def addLoggingLevel(levelName, levelNum, methodName=None):\n    \"\"\"\n    Comprehensively adds a new logging level to the `logging` module and the\n    currently configured logging class.\n    `levelName` becomes an attribute of the `logging` module with the value\n    `levelNum`. `methodName` becomes a convenience method for both `logging`\n    itself and the class returned by `logging.getLoggerClass()` (usually just\n    `logging.Logger`). If `methodName` is not specified, `levelName.lower()` is\n    used.\n    To avoid accidental clobberings of existing attributes, this method will",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.logging_config",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.logging_config",
        "description": "autoppia_iwa.modules.browser-use.browser_use.logging_config",
        "peekOfCode": "def setup_logging():\n    # Try to add RESULT level, but ignore if it already exists\n    try:\n        addLoggingLevel(\"RESULT\", 35)  # This allows ERROR, FATAL and CRITICAL\n    except AttributeError:\n        pass  # Level already exists, which is fine\n    log_type = os.getenv(\"BROWSER_USE_LOGGING_LEVEL\", \"info\").lower()\n    # Check if handlers are already set up\n    if logging.getLogger().hasHandlers():\n        return",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.logging_config",
        "documentation": {}
    },
    {
        "label": "time_execution_sync",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "description": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "peekOfCode": "def time_execution_sync(additional_text: str = \"\") -> Callable[[Callable[P, R]], Callable[P, R]]:\n    def decorator(func: Callable[P, R]) -> Callable[P, R]:\n        @wraps(func)\n        def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n            start_time = time.time()\n            result = func(*args, **kwargs)\n            execution_time = time.time() - start_time\n            logger.debug(f\"{additional_text} Execution time: {execution_time:.2f} seconds\")\n            return result\n        return wrapper",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "documentation": {}
    },
    {
        "label": "time_execution_async",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "description": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "peekOfCode": "def time_execution_async(\n    additional_text: str = \"\",\n) -> Callable[[Callable[P, Coroutine[Any, Any, R]]], Callable[P, Coroutine[Any, Any, R]]]:\n    def decorator(func: Callable[P, Coroutine[Any, Any, R]]) -> Callable[P, Coroutine[Any, Any, R]]:\n        @wraps(func)\n        async def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n            start_time = time.time()\n            result = await func(*args, **kwargs)\n            execution_time = time.time() - start_time\n            logger.debug(f\"{additional_text} Execution time: {execution_time:.2f} seconds\")",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "documentation": {}
    },
    {
        "label": "singleton",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "description": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "peekOfCode": "def singleton(cls):\n    instance = [None]\n    def wrapper(*args, **kwargs):\n        if instance[0] is None:\n            instance[0] = cls(*args, **kwargs)\n        return instance[0]\n    return wrapper",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "description": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Define generic type variables for return type and parameters\nR = TypeVar(\"R\")\nP = ParamSpec(\"P\")\ndef time_execution_sync(additional_text: str = \"\") -> Callable[[Callable[P, R]], Callable[P, R]]:\n    def decorator(func: Callable[P, R]) -> Callable[P, R]:\n        @wraps(func)\n        def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n            start_time = time.time()\n            result = func(*args, **kwargs)",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "description": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "peekOfCode": "R = TypeVar(\"R\")\nP = ParamSpec(\"P\")\ndef time_execution_sync(additional_text: str = \"\") -> Callable[[Callable[P, R]], Callable[P, R]]:\n    def decorator(func: Callable[P, R]) -> Callable[P, R]:\n        @wraps(func)\n        def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n            start_time = time.time()\n            result = func(*args, **kwargs)\n            execution_time = time.time() - start_time\n            logger.debug(f\"{additional_text} Execution time: {execution_time:.2f} seconds\")",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "description": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef time_execution_sync(additional_text: str = \"\") -> Callable[[Callable[P, R]], Callable[P, R]]:\n    def decorator(func: Callable[P, R]) -> Callable[P, R]:\n        @wraps(func)\n        def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n            start_time = time.time()\n            result = func(*args, **kwargs)\n            execution_time = time.time() - start_time\n            logger.debug(f\"{additional_text} Execution time: {execution_time:.2f} seconds\")\n            return result",
        "detail": "autoppia_iwa.modules.browser-use.browser_use.utils",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.browser.real_browser",
        "description": "autoppia_iwa.modules.browser-use.examples.browser.real_browser",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        # NOTE: you need to close your chrome browser - so that this can open your browser in debug mode\n        chrome_instance_path=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\",\n    )\n)\nasync def main():\n    agent = Agent(\n        task=\"In docs.google.com write my Papa a quick letter\",\n        llm=ChatOpenAI(model=\"gpt-4o\"),",
        "detail": "autoppia_iwa.modules.browser-use.examples.browser.real_browser",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.browser.using_cdp",
        "description": "autoppia_iwa.modules.browser-use.examples.browser.using_cdp",
        "peekOfCode": "api_key = os.getenv(\"GEMINI_API_KEY\")\nif not api_key:\n    raise ValueError(\"GEMINI_API_KEY is not set\")\nbrowser = Browser(\n    config=BrowserConfig(\n        headless=False,\n        cdp_url=\"http://localhost:9222\",\n    )\n)\ncontroller = Controller()",
        "detail": "autoppia_iwa.modules.browser-use.examples.browser.using_cdp",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.browser.using_cdp",
        "description": "autoppia_iwa.modules.browser-use.examples.browser.using_cdp",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        headless=False,\n        cdp_url=\"http://localhost:9222\",\n    )\n)\ncontroller = Controller()\nasync def main():\n    task = f\"In docs.google.com write my Papa a quick thank you for everything letter \\n - Magnus\"\n    task += f\" and save the document as pdf\"",
        "detail": "autoppia_iwa.modules.browser-use.examples.browser.using_cdp",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.browser.using_cdp",
        "description": "autoppia_iwa.modules.browser-use.examples.browser.using_cdp",
        "peekOfCode": "controller = Controller()\nasync def main():\n    task = f\"In docs.google.com write my Papa a quick thank you for everything letter \\n - Magnus\"\n    task += f\" and save the document as pdf\"\n    model = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\n    agent = Agent(\n        task=task,\n        llm=model,\n        controller=controller,\n        browser=browser,",
        "detail": "autoppia_iwa.modules.browser-use.examples.browser.using_cdp",
        "documentation": {}
    },
    {
        "label": "copy_to_clipboard",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.custom-functions.clipboard",
        "description": "autoppia_iwa.modules.browser-use.examples.custom-functions.clipboard",
        "peekOfCode": "def copy_to_clipboard(text: str):\n    pyperclip.copy(text)\n    return ActionResult(extracted_content=text)\n@controller.registry.action(\"Paste text from clipboard\", requires_browser=True)\nasync def paste_from_clipboard(browser: BrowserContext):\n    text = pyperclip.paste()\n    # send text to browser\n    page = await browser.get_current_page()\n    await page.keyboard.type(text)\n    return ActionResult(extracted_content=text)",
        "detail": "autoppia_iwa.modules.browser-use.examples.custom-functions.clipboard",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.custom-functions.clipboard",
        "description": "autoppia_iwa.modules.browser-use.examples.custom-functions.clipboard",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        headless=False,\n    )\n)\ncontroller = Controller()\n@controller.registry.action(\"Copy text to clipboard\")\ndef copy_to_clipboard(text: str):\n    pyperclip.copy(text)\n    return ActionResult(extracted_content=text)",
        "detail": "autoppia_iwa.modules.browser-use.examples.custom-functions.clipboard",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.custom-functions.clipboard",
        "description": "autoppia_iwa.modules.browser-use.examples.custom-functions.clipboard",
        "peekOfCode": "controller = Controller()\n@controller.registry.action(\"Copy text to clipboard\")\ndef copy_to_clipboard(text: str):\n    pyperclip.copy(text)\n    return ActionResult(extracted_content=text)\n@controller.registry.action(\"Paste text from clipboard\", requires_browser=True)\nasync def paste_from_clipboard(browser: BrowserContext):\n    text = pyperclip.paste()\n    # send text to browser\n    page = await browser.get_current_page()",
        "detail": "autoppia_iwa.modules.browser-use.examples.custom-functions.clipboard",
        "documentation": {}
    },
    {
        "label": "CV",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.custom-functions.file_upload",
        "description": "autoppia_iwa.modules.browser-use.examples.custom-functions.file_upload",
        "peekOfCode": "CV = Path.cwd() / \"examples/test_cv.txt\"\nimport logging\nlogger = logging.getLogger(__name__)\n# Initialize controller first\nbrowser = Browser(\n    config=BrowserConfig(\n        headless=False,\n        chrome_instance_path=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\",\n    )\n)",
        "detail": "autoppia_iwa.modules.browser-use.examples.custom-functions.file_upload",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.custom-functions.file_upload",
        "description": "autoppia_iwa.modules.browser-use.examples.custom-functions.file_upload",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Initialize controller first\nbrowser = Browser(\n    config=BrowserConfig(\n        headless=False,\n        chrome_instance_path=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\",\n    )\n)\ncontroller = Controller()\n@controller.action(",
        "detail": "autoppia_iwa.modules.browser-use.examples.custom-functions.file_upload",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.custom-functions.file_upload",
        "description": "autoppia_iwa.modules.browser-use.examples.custom-functions.file_upload",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        headless=False,\n        chrome_instance_path=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\",\n    )\n)\ncontroller = Controller()\n@controller.action(\n    \"Upload file to element \",\n    requires_browser=True,",
        "detail": "autoppia_iwa.modules.browser-use.examples.custom-functions.file_upload",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.custom-functions.file_upload",
        "description": "autoppia_iwa.modules.browser-use.examples.custom-functions.file_upload",
        "peekOfCode": "controller = Controller()\n@controller.action(\n    \"Upload file to element \",\n    requires_browser=True,\n)\nasync def upload_file(index: int, browser: BrowserContext):\n    path = str(CV.absolute())\n    dom_el = await browser.get_dom_element_by_index(index)\n    if dom_el is None:\n        return ActionResult(error=f\"No element found at index {index}\")",
        "detail": "autoppia_iwa.modules.browser-use.examples.custom-functions.file_upload",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.custom-functions.notification",
        "description": "autoppia_iwa.modules.browser-use.examples.custom-functions.notification",
        "peekOfCode": "controller = Controller()\n@controller.registry.action(\"Done with task \")\nasync def done(text: str):\n    import yagmail\n    # To send emails use\n    # STEP 1: go to https://support.google.com/accounts/answer/185833\n    # STEP 2: Create an app password (you cant use here your normal gmail password)\n    # STEP 3: Use the app password in the code below for the password\n    yag = yagmail.SMTP(\"your_email@gmail.com\", \"your_app_password\")\n    yag.send(",
        "detail": "autoppia_iwa.modules.browser-use.examples.custom-functions.notification",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.custom-functions.save_to_file_hugging_face",
        "description": "autoppia_iwa.modules.browser-use.examples.custom-functions.save_to_file_hugging_face",
        "peekOfCode": "class Model(BaseModel):\n    title: str\n    url: str\n    likes: int\n    license: str\nclass Models(BaseModel):\n    models: List[Model]\n@controller.action(\"Save models\", param_model=Models)\ndef save_models(params: Models):\n    with open(\"models.txt\", \"a\") as f:",
        "detail": "autoppia_iwa.modules.browser-use.examples.custom-functions.save_to_file_hugging_face",
        "documentation": {}
    },
    {
        "label": "Models",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.custom-functions.save_to_file_hugging_face",
        "description": "autoppia_iwa.modules.browser-use.examples.custom-functions.save_to_file_hugging_face",
        "peekOfCode": "class Models(BaseModel):\n    models: List[Model]\n@controller.action(\"Save models\", param_model=Models)\ndef save_models(params: Models):\n    with open(\"models.txt\", \"a\") as f:\n        for model in params.models:\n            f.write(f\"{model.title} ({model.url}): {model.likes} likes, {model.license}\\n\")\n# video: https://preview.screen.studio/share/EtOhIk0P\nasync def main():\n    task = f\"Look up models with a license of cc-by-sa-4.0 and sort by most likes on Hugging face, save top 5 to file.\"",
        "detail": "autoppia_iwa.modules.browser-use.examples.custom-functions.save_to_file_hugging_face",
        "documentation": {}
    },
    {
        "label": "save_models",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.custom-functions.save_to_file_hugging_face",
        "description": "autoppia_iwa.modules.browser-use.examples.custom-functions.save_to_file_hugging_face",
        "peekOfCode": "def save_models(params: Models):\n    with open(\"models.txt\", \"a\") as f:\n        for model in params.models:\n            f.write(f\"{model.title} ({model.url}): {model.likes} likes, {model.license}\\n\")\n# video: https://preview.screen.studio/share/EtOhIk0P\nasync def main():\n    task = f\"Look up models with a license of cc-by-sa-4.0 and sort by most likes on Hugging face, save top 5 to file.\"\n    model = ChatOpenAI(model=\"gpt-4o\")\n    agent = Agent(task=task, llm=model, controller=controller)\n    await agent.run()",
        "detail": "autoppia_iwa.modules.browser-use.examples.custom-functions.save_to_file_hugging_face",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.custom-functions.save_to_file_hugging_face",
        "description": "autoppia_iwa.modules.browser-use.examples.custom-functions.save_to_file_hugging_face",
        "peekOfCode": "controller = Controller()\nclass Model(BaseModel):\n    title: str\n    url: str\n    likes: int\n    license: str\nclass Models(BaseModel):\n    models: List[Model]\n@controller.action(\"Save models\", param_model=Models)\ndef save_models(params: Models):",
        "detail": "autoppia_iwa.modules.browser-use.examples.custom-functions.save_to_file_hugging_face",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_output",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_output",
        "peekOfCode": "class Post(BaseModel):\n    post_title: str\n    post_url: str\n    num_comments: int\n    hours_since_post: int\nclass Posts(BaseModel):\n    posts: List[Post]\ncontroller = Controller(output_model=Posts)\nasync def main():\n    task = \"Go to hackernews show hn and give me the first  5 posts\"",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_output",
        "documentation": {}
    },
    {
        "label": "Posts",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_output",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_output",
        "peekOfCode": "class Posts(BaseModel):\n    posts: List[Post]\ncontroller = Controller(output_model=Posts)\nasync def main():\n    task = \"Go to hackernews show hn and give me the first  5 posts\"\n    model = ChatOpenAI(model=\"gpt-4o\")\n    agent = Agent(task=task, llm=model, controller=controller)\n    history = await agent.run()\n    result = history.final_result()\n    if result:",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_output",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_output",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_output",
        "peekOfCode": "controller = Controller(output_model=Posts)\nasync def main():\n    task = \"Go to hackernews show hn and give me the first  5 posts\"\n    model = ChatOpenAI(model=\"gpt-4o\")\n    agent = Agent(task=task, llm=model, controller=controller)\n    history = await agent.run()\n    result = history.final_result()\n    if result:\n        parsed: Posts = Posts.model_validate_json(result)\n        for post in parsed.posts:",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_output",
        "documentation": {}
    },
    {
        "label": "MySystemPrompt",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_system_prompt",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_system_prompt",
        "peekOfCode": "class MySystemPrompt(SystemPrompt):\n    def important_rules(self) -> str:\n        existing_rules = super().important_rules()\n        new_rules = \"REMEMBER the most important RULE: ALWAYS open first a new tab and go first to url wikipedia.com no matter the task!!!\"\n        return f\"{existing_rules}\\n{new_rules}\"\n        # other methods can be overridden as well (not recommended)\nasync def main():\n    task = \"do google search to find images of Elon Musk's wife\"\n    model = ChatOpenAI(model=\"gpt-4o\")\n    agent = Agent(task=task, llm=model, system_prompt_class=MySystemPrompt)",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_system_prompt",
        "documentation": {}
    },
    {
        "label": "get_llm",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "peekOfCode": "def get_llm(provider: str):\n    if provider == \"anthropic\":\n        return ChatAnthropic(model_name=\"claude-3-5-sonnet-20240620\", timeout=25, stop=None, temperature=0.0)\n    elif provider == \"openai\":\n        return ChatOpenAI(model=\"gpt-4o\", temperature=0.0)\n    else:\n        raise ValueError(f\"Unsupported provider: {provider}\")\n# NOTE: This example is to find your current user agent string to use it in the browser_context\ntask = \"go to https://whatismyuseragent.com and find the current user agent string \"\ncontroller = Controller()",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "peekOfCode": "task = \"go to https://whatismyuseragent.com and find the current user agent string \"\ncontroller = Controller()\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--query\", type=str, help=\"The query to process\", default=task)\nparser.add_argument(\n    \"--provider\",\n    type=str,\n    choices=[\"openai\", \"anthropic\"],\n    default=\"openai\",\n    help=\"The model provider to use (default: openai)\",",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "peekOfCode": "controller = Controller()\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--query\", type=str, help=\"The query to process\", default=task)\nparser.add_argument(\n    \"--provider\",\n    type=str,\n    choices=[\"openai\", \"anthropic\"],\n    default=\"openai\",\n    help=\"The model provider to use (default: openai)\",\n)",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--query\", type=str, help=\"The query to process\", default=task)\nparser.add_argument(\n    \"--provider\",\n    type=str,\n    choices=[\"openai\", \"anthropic\"],\n    default=\"openai\",\n    help=\"The model provider to use (default: openai)\",\n)\nargs = parser.parse_args()",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "peekOfCode": "args = parser.parse_args()\nllm = get_llm(args.provider)\nbrowser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nbrowser_context = BrowserContext(config=BrowserContextConfig(user_agent=\"foobarfoo\"), browser=browser)\nagent = Agent(\n    task=args.query,",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "peekOfCode": "llm = get_llm(args.provider)\nbrowser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nbrowser_context = BrowserContext(config=BrowserContextConfig(user_agent=\"foobarfoo\"), browser=browser)\nagent = Agent(\n    task=args.query,\n    llm=llm,",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nbrowser_context = BrowserContext(config=BrowserContextConfig(user_agent=\"foobarfoo\"), browser=browser)\nagent = Agent(\n    task=args.query,\n    llm=llm,\n    controller=controller,",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "documentation": {}
    },
    {
        "label": "browser_context",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "peekOfCode": "browser_context = BrowserContext(config=BrowserContextConfig(user_agent=\"foobarfoo\"), browser=browser)\nagent = Agent(\n    task=args.query,\n    llm=llm,\n    controller=controller,\n    # browser=browser,\n    browser_context=browser_context,\n    use_vision=True,\n    max_actions_per_step=1,\n)",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "peekOfCode": "agent = Agent(\n    task=args.query,\n    llm=llm,\n    controller=controller,\n    # browser=browser,\n    browser_context=browser_context,\n    use_vision=True,\n    max_actions_per_step=1,\n)\nasync def main():",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.custom_user_agent",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.download_file",
        "description": "autoppia_iwa.modules.browser-use.examples.features.download_file",
        "peekOfCode": "api_key = os.getenv(\"GEMINI_API_KEY\")\nif not api_key:\n    raise ValueError(\"GEMINI_API_KEY is not set\")\nllm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\nbrowser = Browser(config=BrowserConfig(new_context_config=BrowserContextConfig(save_downloads_path=os.path.join(os.path.expanduser(\"~\"), \"downloads\"))))\nasync def run_download():\n    agent = Agent(\n        task=('Go to \"https://file-examples.com/\" and download the smallest doc file.'),\n        llm=llm,\n        max_actions_per_step=8,",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.download_file",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.download_file",
        "description": "autoppia_iwa.modules.browser-use.examples.features.download_file",
        "peekOfCode": "llm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\nbrowser = Browser(config=BrowserConfig(new_context_config=BrowserContextConfig(save_downloads_path=os.path.join(os.path.expanduser(\"~\"), \"downloads\"))))\nasync def run_download():\n    agent = Agent(\n        task=('Go to \"https://file-examples.com/\" and download the smallest doc file.'),\n        llm=llm,\n        max_actions_per_step=8,\n        use_vision=True,\n        browser=browser,\n    )",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.download_file",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.download_file",
        "description": "autoppia_iwa.modules.browser-use.examples.features.download_file",
        "peekOfCode": "browser = Browser(config=BrowserConfig(new_context_config=BrowserContextConfig(save_downloads_path=os.path.join(os.path.expanduser(\"~\"), \"downloads\"))))\nasync def run_download():\n    agent = Agent(\n        task=('Go to \"https://file-examples.com/\" and download the smallest doc file.'),\n        llm=llm,\n        max_actions_per_step=8,\n        use_vision=True,\n        browser=browser,\n    )\n    await agent.run(max_steps=25)",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.download_file",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.follow_up_tasks",
        "description": "autoppia_iwa.modules.browser-use.examples.features.follow_up_tasks",
        "peekOfCode": "llm = ChatOpenAI(\n    model=\"gpt-4o\",\n    temperature=0.0,\n)\ncontroller = Controller()\ntask = \"Find the founders of browser-use and draft them a short personalized message\"\nagent = Agent(task=task, llm=llm, controller=controller)\nasync def main():\n    await agent.run()\n    # new_task = input('Type in a new task: ')",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.follow_up_tasks",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.follow_up_tasks",
        "description": "autoppia_iwa.modules.browser-use.examples.features.follow_up_tasks",
        "peekOfCode": "controller = Controller()\ntask = \"Find the founders of browser-use and draft them a short personalized message\"\nagent = Agent(task=task, llm=llm, controller=controller)\nasync def main():\n    await agent.run()\n    # new_task = input('Type in a new task: ')\n    new_task = \"Find an image of the founders\"\n    agent.add_new_task(new_task)\n    await agent.run()\nif __name__ == \"__main__\":",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.follow_up_tasks",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.follow_up_tasks",
        "description": "autoppia_iwa.modules.browser-use.examples.features.follow_up_tasks",
        "peekOfCode": "task = \"Find the founders of browser-use and draft them a short personalized message\"\nagent = Agent(task=task, llm=llm, controller=controller)\nasync def main():\n    await agent.run()\n    # new_task = input('Type in a new task: ')\n    new_task = \"Find an image of the founders\"\n    agent.add_new_task(new_task)\n    await agent.run()\nif __name__ == \"__main__\":\n    asyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.follow_up_tasks",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.follow_up_tasks",
        "description": "autoppia_iwa.modules.browser-use.examples.features.follow_up_tasks",
        "peekOfCode": "agent = Agent(task=task, llm=llm, controller=controller)\nasync def main():\n    await agent.run()\n    # new_task = input('Type in a new task: ')\n    new_task = \"Find an image of the founders\"\n    agent.add_new_task(new_task)\n    await agent.run()\nif __name__ == \"__main__\":\n    asyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.follow_up_tasks",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.initial_actions",
        "description": "autoppia_iwa.modules.browser-use.examples.features.initial_actions",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\ninitial_actions = [\n    {\"open_tab\": {\"url\": \"https://www.google.com\"}},\n    {\"open_tab\": {\"url\": \"https://en.wikipedia.org/wiki/Randomness\"}},\n    {\"scroll_down\": {\"amount\": 1000}},\n    {\"extract_content\": {\"include_links\": False}},\n]\nagent = Agent(\n    task=\"What theories are displayed on the page?\",\n    initial_actions=initial_actions,",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.initial_actions",
        "documentation": {}
    },
    {
        "label": "initial_actions",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.initial_actions",
        "description": "autoppia_iwa.modules.browser-use.examples.features.initial_actions",
        "peekOfCode": "initial_actions = [\n    {\"open_tab\": {\"url\": \"https://www.google.com\"}},\n    {\"open_tab\": {\"url\": \"https://en.wikipedia.org/wiki/Randomness\"}},\n    {\"scroll_down\": {\"amount\": 1000}},\n    {\"extract_content\": {\"include_links\": False}},\n]\nagent = Agent(\n    task=\"What theories are displayed on the page?\",\n    initial_actions=initial_actions,\n    llm=llm,",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.initial_actions",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.initial_actions",
        "description": "autoppia_iwa.modules.browser-use.examples.features.initial_actions",
        "peekOfCode": "agent = Agent(\n    task=\"What theories are displayed on the page?\",\n    initial_actions=initial_actions,\n    llm=llm,\n)\nasync def main():\n    await agent.run(max_steps=10)\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.initial_actions",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.multi-tab_handling",
        "description": "autoppia_iwa.modules.browser-use.examples.features.multi-tab_handling",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\nagent = Agent(\n    task=\"open 3 tabs with elon musk, trump, and steve jobs, then go back to the first and stop\",\n    llm=llm,\n)\nasync def main():\n    await agent.run()\nasyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.multi-tab_handling",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.multi-tab_handling",
        "description": "autoppia_iwa.modules.browser-use.examples.features.multi-tab_handling",
        "peekOfCode": "agent = Agent(\n    task=\"open 3 tabs with elon musk, trump, and steve jobs, then go back to the first and stop\",\n    llm=llm,\n)\nasync def main():\n    await agent.run()\nasyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.multi-tab_handling",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.parallel_agents",
        "description": "autoppia_iwa.modules.browser-use.examples.features.parallel_agents",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        disable_security=True,\n        headless=False,\n        new_context_config=BrowserContextConfig(save_recording_path=\"./tmp/recordings\"),\n    )\n)\nllm = ChatOpenAI(model=\"gpt-4o\")\nasync def main():\n    agents = [",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.parallel_agents",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.parallel_agents",
        "description": "autoppia_iwa.modules.browser-use.examples.features.parallel_agents",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\nasync def main():\n    agents = [\n        Agent(task=task, llm=llm, browser=browser)\n        for task in [\n            \"Search Google for weather in Tokyo\",\n            \"Check Reddit front page title\",\n            \"Look up Bitcoin price on Coinbase\",\n            \"Find NASA image of the day\",\n            # 'Check top story on CNN',",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.parallel_agents",
        "documentation": {}
    },
    {
        "label": "AgentController",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.pause_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.features.pause_agent",
        "peekOfCode": "class AgentController:\n    def __init__(self):\n        llm = ChatOpenAI(model=\"gpt-4o\")\n        self.agent = Agent(task=\"Go to wikipedia.org and search for 'Python programming language', then read the first paragraph\", llm=llm)\n        self.running = False\n    async def run_agent(self):\n        \"\"\"Run the agent\"\"\"\n        self.running = True\n        await self.agent.run()\n    def start(self):",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.pause_agent",
        "documentation": {}
    },
    {
        "label": "print_menu",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.pause_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.features.pause_agent",
        "peekOfCode": "def print_menu():\n    print(\"\\nAgent Control Menu:\")\n    print(\"1. Start\")\n    print(\"2. Pause\")\n    print(\"3. Resume\")\n    print(\"4. Stop\")\n    print(\"5. Exit\")\ndef main():\n    controller = AgentController()\n    agent_thread = None",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.pause_agent",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.pause_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.features.pause_agent",
        "peekOfCode": "def main():\n    controller = AgentController()\n    agent_thread = None\n    while True:\n        print_menu()\n        choice = input(\"Enter your choice (1-5): \")\n        if choice == \"1\" and not agent_thread:\n            print(\"Starting agent...\")\n            agent_thread = threading.Thread(target=controller.start)\n            agent_thread.start()",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.pause_agent",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "description": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\", temperature=0.0)\ntask = \"go to google.com and search for openai.com and click on the first link then extract content and scroll down - whats there?\"\nallowed_domains = [\"google.com\"]\nbrowser = Browser(\n    config=BrowserConfig(\n        chrome_instance_path=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\",\n        new_context_config=BrowserContextConfig(\n            allowed_domains=allowed_domains,\n        ),\n    ),",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "description": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "peekOfCode": "task = \"go to google.com and search for openai.com and click on the first link then extract content and scroll down - whats there?\"\nallowed_domains = [\"google.com\"]\nbrowser = Browser(\n    config=BrowserConfig(\n        chrome_instance_path=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\",\n        new_context_config=BrowserContextConfig(\n            allowed_domains=allowed_domains,\n        ),\n    ),\n)",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "documentation": {}
    },
    {
        "label": "allowed_domains",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "description": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "peekOfCode": "allowed_domains = [\"google.com\"]\nbrowser = Browser(\n    config=BrowserConfig(\n        chrome_instance_path=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\",\n        new_context_config=BrowserContextConfig(\n            allowed_domains=allowed_domains,\n        ),\n    ),\n)\nagent = Agent(",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "description": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        chrome_instance_path=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\",\n        new_context_config=BrowserContextConfig(\n            allowed_domains=allowed_domains,\n        ),\n    ),\n)\nagent = Agent(\n    task=task,",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "description": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "peekOfCode": "agent = Agent(\n    task=task,\n    llm=llm,\n    browser=browser,\n)\nasync def main():\n    await agent.run(max_steps=25)\n    input(\"Press Enter to close the browser...\")\n    await browser.close()\nasyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.restrict_urls",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.result_processing",
        "description": "autoppia_iwa.modules.browser-use.examples.features.result_processing",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\nbrowser = Browser(\n    config=BrowserConfig(\n        headless=False,\n        disable_security=True,\n        extra_chromium_args=[\"--window-size=2000,2000\"],\n    )\n)\nasync def main():\n    async with await browser.new_context(",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.result_processing",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.result_processing",
        "description": "autoppia_iwa.modules.browser-use.examples.features.result_processing",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        headless=False,\n        disable_security=True,\n        extra_chromium_args=[\"--window-size=2000,2000\"],\n    )\n)\nasync def main():\n    async with await browser.new_context(\n        config=BrowserContextConfig(",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.result_processing",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.save_trace",
        "description": "autoppia_iwa.modules.browser-use.examples.features.save_trace",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\", temperature=0.0)\nasync def main():\n    browser = Browser()\n    async with await browser.new_context(config=BrowserContextConfig(trace_path=\"./tmp/traces/\")) as context:\n        agent = Agent(\n            task=\"Go to hackernews, then go to apple.com and return all titles of open tabs\",\n            llm=llm,\n            browser_context=context,\n        )\n        await agent.run()",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.save_trace",
        "documentation": {}
    },
    {
        "label": "DoneResult",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.validate_output",
        "description": "autoppia_iwa.modules.browser-use.examples.features.validate_output",
        "peekOfCode": "class DoneResult(BaseModel):\n    title: str\n    comments: str\n    hours_since_start: int\n# we overwrite done() in this example to demonstrate the validator\n@controller.registry.action(\"Done with task\", param_model=DoneResult)\nasync def done(params: DoneResult):\n    result = ActionResult(is_done=True, extracted_content=params.model_dump_json())\n    print(result)\n    # NOTE: this is clearly wrong - to demonstrate the validator",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.validate_output",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.features.validate_output",
        "description": "autoppia_iwa.modules.browser-use.examples.features.validate_output",
        "peekOfCode": "controller = Controller()\nclass DoneResult(BaseModel):\n    title: str\n    comments: str\n    hours_since_start: int\n# we overwrite done() in this example to demonstrate the validator\n@controller.registry.action(\"Done with task\", param_model=DoneResult)\nasync def done(params: DoneResult):\n    result = ActionResult(is_done=True, extracted_content=params.model_dump_json())\n    print(result)",
        "detail": "autoppia_iwa.modules.browser-use.examples.features.validate_output",
        "documentation": {}
    },
    {
        "label": "DiscordBot",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_api",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_api",
        "peekOfCode": "class DiscordBot(commands.Bot):\n    \"\"\"Discord bot implementation for Browser-Use tasks.\n    This bot allows users to run browser automation tasks through Discord messages.\n    Processes tasks asynchronously and sends the result back to the user in response to the message.\n    Messages must start with the configured prefix (default: \"$bu\") followed by the task description.\n    Args:\n        llm (BaseChatModel): Language model instance to use for task processing\n        prefix (str, optional): Command prefix for triggering browser tasks. Defaults to \"$bu\"\n        ack (bool, optional): Whether to acknowledge task receipt with a message. Defaults to False\n        browser_config (BrowserConfig, optional): Browser configuration settings.",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_api",
        "documentation": {}
    },
    {
        "label": "bot_token",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_example",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_example",
        "peekOfCode": "bot_token = os.getenv(\"DISCORD_BOT_TOKEN\")\nif not bot_token:\n    raise ValueError(\"Discord bot token not found in .env file.\")\napi_key = os.getenv(\"GEMINI_API_KEY\")\nif not api_key:\n    raise ValueError(\"GEMINI_API_KEY is not set\")\nllm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\nbot = DiscordBot(\n    llm=llm,  # required; instance of BaseChatModel\n    prefix=\"$bu\",  # optional; prefix of messages to trigger browser-use, defaults to \"$bu\"",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_example",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_example",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_example",
        "peekOfCode": "api_key = os.getenv(\"GEMINI_API_KEY\")\nif not api_key:\n    raise ValueError(\"GEMINI_API_KEY is not set\")\nllm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\nbot = DiscordBot(\n    llm=llm,  # required; instance of BaseChatModel\n    prefix=\"$bu\",  # optional; prefix of messages to trigger browser-use, defaults to \"$bu\"\n    ack=True,  # optional; whether to acknowledge task receipt with a message, defaults to False\n    browser_config=BrowserConfig(headless=False),  # optional; useful for changing headless mode or other browser configs, defaults to headless mode\n)",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_example",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_example",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_example",
        "peekOfCode": "llm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\nbot = DiscordBot(\n    llm=llm,  # required; instance of BaseChatModel\n    prefix=\"$bu\",  # optional; prefix of messages to trigger browser-use, defaults to \"$bu\"\n    ack=True,  # optional; whether to acknowledge task receipt with a message, defaults to False\n    browser_config=BrowserConfig(headless=False),  # optional; useful for changing headless mode or other browser configs, defaults to headless mode\n)\nbot.run(\n    token=bot_token,  # required; Discord bot token\n)",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_example",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_example",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_example",
        "peekOfCode": "bot = DiscordBot(\n    llm=llm,  # required; instance of BaseChatModel\n    prefix=\"$bu\",  # optional; prefix of messages to trigger browser-use, defaults to \"$bu\"\n    ack=True,  # optional; whether to acknowledge task receipt with a message, defaults to False\n    browser_config=BrowserConfig(headless=False),  # optional; useful for changing headless mode or other browser configs, defaults to headless mode\n)\nbot.run(\n    token=bot_token,  # required; Discord bot token\n)",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.discord.discord_example",
        "documentation": {}
    },
    {
        "label": "SlackBot",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_api",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_api",
        "peekOfCode": "class SlackBot:\n    def __init__(self, llm: BaseChatModel, bot_token: str, signing_secret: str, ack: bool = False, browser_config: BrowserConfig = BrowserConfig(headless=True)):\n        if not bot_token or not signing_secret:\n            raise ValueError(\"Bot token and signing secret must be provided\")\n        self.llm = llm\n        self.ack = ack\n        self.browser_config = browser_config\n        self.client = AsyncWebClient(token=bot_token)\n        self.signature_verifier = SignatureVerifier(signing_secret)\n        self.processed_events = set()",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_api",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_api",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_api",
        "peekOfCode": "logger = logging.getLogger(\"slack\")\napp = FastAPI()\nclass SlackBot:\n    def __init__(self, llm: BaseChatModel, bot_token: str, signing_secret: str, ack: bool = False, browser_config: BrowserConfig = BrowserConfig(headless=True)):\n        if not bot_token or not signing_secret:\n            raise ValueError(\"Bot token and signing secret must be provided\")\n        self.llm = llm\n        self.ack = ack\n        self.browser_config = browser_config\n        self.client = AsyncWebClient(token=bot_token)",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_api",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_api",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_api",
        "peekOfCode": "app = FastAPI()\nclass SlackBot:\n    def __init__(self, llm: BaseChatModel, bot_token: str, signing_secret: str, ack: bool = False, browser_config: BrowserConfig = BrowserConfig(headless=True)):\n        if not bot_token or not signing_secret:\n            raise ValueError(\"Bot token and signing secret must be provided\")\n        self.llm = llm\n        self.ack = ack\n        self.browser_config = browser_config\n        self.client = AsyncWebClient(token=bot_token)\n        self.signature_verifier = SignatureVerifier(signing_secret)",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_api",
        "documentation": {}
    },
    {
        "label": "bot_token",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "peekOfCode": "bot_token = os.getenv(\"SLACK_BOT_TOKEN\")\nif not bot_token:\n    raise ValueError(\"Slack bot token not found in .env file.\")\nsigning_secret = os.getenv(\"SLACK_SIGNING_SECRET\")\nif not signing_secret:\n    raise ValueError(\"Slack signing secret not found in .env file.\")\napi_key = os.getenv(\"GEMINI_API_KEY\")\nif not api_key:\n    raise ValueError(\"GEMINI_API_KEY is not set\")\nllm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "documentation": {}
    },
    {
        "label": "signing_secret",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "peekOfCode": "signing_secret = os.getenv(\"SLACK_SIGNING_SECRET\")\nif not signing_secret:\n    raise ValueError(\"Slack signing secret not found in .env file.\")\napi_key = os.getenv(\"GEMINI_API_KEY\")\nif not api_key:\n    raise ValueError(\"GEMINI_API_KEY is not set\")\nllm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\nslack_bot = SlackBot(\n    llm=llm,  # required; instance of BaseChatModel\n    bot_token=bot_token,  # required; Slack bot token",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "peekOfCode": "api_key = os.getenv(\"GEMINI_API_KEY\")\nif not api_key:\n    raise ValueError(\"GEMINI_API_KEY is not set\")\nllm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\nslack_bot = SlackBot(\n    llm=llm,  # required; instance of BaseChatModel\n    bot_token=bot_token,  # required; Slack bot token\n    signing_secret=signing_secret,  # required; Slack signing secret\n    ack=True,  # optional; whether to acknowledge task receipt with a message, defaults to False\n    browser_config=BrowserConfig(headless=True),  # optional; useful for changing headless mode or other browser configs, defaults to headless mode",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "peekOfCode": "llm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\nslack_bot = SlackBot(\n    llm=llm,  # required; instance of BaseChatModel\n    bot_token=bot_token,  # required; Slack bot token\n    signing_secret=signing_secret,  # required; Slack signing secret\n    ack=True,  # optional; whether to acknowledge task receipt with a message, defaults to False\n    browser_config=BrowserConfig(headless=True),  # optional; useful for changing headless mode or other browser configs, defaults to headless mode\n)\napp.dependency_overrides[SlackBot] = lambda: slack_bot\nif __name__ == \"__main__\":",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "documentation": {}
    },
    {
        "label": "slack_bot",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "peekOfCode": "slack_bot = SlackBot(\n    llm=llm,  # required; instance of BaseChatModel\n    bot_token=bot_token,  # required; Slack bot token\n    signing_secret=signing_secret,  # required; Slack signing secret\n    ack=True,  # optional; whether to acknowledge task receipt with a message, defaults to False\n    browser_config=BrowserConfig(headless=True),  # optional; useful for changing headless mode or other browser configs, defaults to headless mode\n)\napp.dependency_overrides[SlackBot] = lambda: slack_bot\nif __name__ == \"__main__\":\n    import uvicorn",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "documentation": {}
    },
    {
        "label": "app.dependency_overrides[SlackBot]",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "description": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "peekOfCode": "app.dependency_overrides[SlackBot] = lambda: slack_bot\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\"integrations.slack.slack_api:app\", host=\"0.0.0.0\", port=3000)",
        "detail": "autoppia_iwa.modules.browser-use.examples.integrations.slack.slack_example",
        "documentation": {}
    },
    {
        "label": "get_llm",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "description": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "peekOfCode": "def get_llm():\n    return ChatBedrock(\n        model_id=\"us.anthropic.claude-3-5-sonnet-20241022-v2:0\",\n        temperature=0.0,\n        max_tokens=None,\n    )\n# Define the task for the agent\ntask = (\n    \"Visit cnn.com, navigate to the 'World News' section, and identify the latest headline. \"\n    \"Open the first article and summarize its content in 3-4 sentences. \"",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "description": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "peekOfCode": "task = (\n    \"Visit cnn.com, navigate to the 'World News' section, and identify the latest headline. \"\n    \"Open the first article and summarize its content in 3-4 sentences. \"\n    \"Additionally, analyze the sentiment of the article (positive, neutral, or negative) \"\n    \"and provide a confidence score for the sentiment. Present the result in a tabular format.\"\n)\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--query\", type=str, help=\"The query for the agent to execute\", default=task)\nargs = parser.parse_args()\nllm = get_llm()",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "description": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--query\", type=str, help=\"The query for the agent to execute\", default=task)\nargs = parser.parse_args()\nllm = get_llm()\nbrowser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nagent = Agent(",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "description": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "peekOfCode": "args = parser.parse_args()\nllm = get_llm()\nbrowser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nagent = Agent(\n    task=args.query,\n    llm=llm,",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "description": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "peekOfCode": "llm = get_llm()\nbrowser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nagent = Agent(\n    task=args.query,\n    llm=llm,\n    controller=Controller(),",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "description": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nagent = Agent(\n    task=args.query,\n    llm=llm,\n    controller=Controller(),\n    browser=browser,",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "description": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "peekOfCode": "agent = Agent(\n    task=args.query,\n    llm=llm,\n    controller=Controller(),\n    browser=browser,\n    validate_output=True,\n)\nasync def main():\n    await agent.run(max_steps=30)\n    await browser.close()",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.bedrock_claude",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.deepseek-r1",
        "description": "autoppia_iwa.modules.browser-use.examples.models.deepseek-r1",
        "peekOfCode": "api_key = os.getenv(\"DEEPSEEK_API_KEY\", \"\")\nif not api_key:\n    raise ValueError(\"DEEPSEEK_API_KEY is not set\")\nasync def run_search():\n    agent = Agent(\n        task=(\"go to amazon.com, search for laptop, sort by best rating, and give me the price of the first result\"),\n        llm=ChatOpenAI(\n            base_url=\"https://api.deepseek.com/v1\",\n            model=\"deepseek-reasoner\",\n            api_key=SecretStr(api_key),",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.deepseek-r1",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.deepseek",
        "description": "autoppia_iwa.modules.browser-use.examples.models.deepseek",
        "peekOfCode": "api_key = os.getenv(\"DEEPSEEK_API_KEY\", \"\")\nif not api_key:\n    raise ValueError(\"DEEPSEEK_API_KEY is not set\")\nasync def run_search():\n    agent = Agent(\n        task=(\"1. Go to https://www.reddit.com/r/LocalLLaMA \" \"2. Search for 'browser use' in the search bar\" \"3. Click on first result\" \"4. Return the first comment\"),\n        llm=ChatOpenAI(\n            base_url=\"https://api.deepseek.com/v1\",\n            model=\"deepseek-chat\",\n            api_key=SecretStr(api_key),",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.deepseek",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.gemini",
        "description": "autoppia_iwa.modules.browser-use.examples.models.gemini",
        "peekOfCode": "api_key = os.getenv(\"GEMINI_API_KEY\")\nif not api_key:\n    raise ValueError(\"GEMINI_API_KEY is not set\")\nllm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\nasync def run_search():\n    agent = Agent(\n        task=('Go to url r/LocalLLaMA subreddit and search for \"browser use\" in the search bar and click on the first post and find the funniest comment'),\n        llm=llm,\n        max_actions_per_step=4,\n    )",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.gemini",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.gemini",
        "description": "autoppia_iwa.modules.browser-use.examples.models.gemini",
        "peekOfCode": "llm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\nasync def run_search():\n    agent = Agent(\n        task=('Go to url r/LocalLLaMA subreddit and search for \"browser use\" in the search bar and click on the first post and find the funniest comment'),\n        llm=llm,\n        max_actions_per_step=4,\n    )\n    await agent.run(max_steps=25)\nif __name__ == \"__main__\":\n    asyncio.run(run_search())",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.gemini",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.gpt-4o",
        "description": "autoppia_iwa.modules.browser-use.examples.models.gpt-4o",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\nagent = Agent(\n    task=\"Go to amazon.com, search for laptop, sort by best rating, and give me the price of the first result\",\n    llm=llm,\n)\nasync def main():\n    await agent.run(max_steps=10)\n    input(\"Press Enter to continue...\")\nasyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.gpt-4o",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.models.gpt-4o",
        "description": "autoppia_iwa.modules.browser-use.examples.models.gpt-4o",
        "peekOfCode": "agent = Agent(\n    task=\"Go to amazon.com, search for laptop, sort by best rating, and give me the price of the first result\",\n    llm=llm,\n)\nasync def main():\n    await agent.run(max_steps=10)\n    input(\"Press Enter to continue...\")\nasyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.models.gpt-4o",
        "documentation": {}
    },
    {
        "label": "get_llm",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "description": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "peekOfCode": "def get_llm(provider: str):\n    if provider == \"anthropic\":\n        return ChatAnthropic(model_name=\"claude-3-5-sonnet-20240620\", timeout=25, stop=None, temperature=0.0)\n    elif provider == \"openai\":\n        return ChatOpenAI(model=\"gpt-4o\", temperature=0.0)\n    else:\n        raise ValueError(f\"Unsupported provider: {provider}\")\ntask = \"go to reddit and search for post about brower-use \"\ncontroller = Controller()\nparser = argparse.ArgumentParser()",
        "detail": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "description": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "peekOfCode": "task = \"go to reddit and search for post about brower-use \"\ncontroller = Controller()\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--query\", type=str, help=\"The query to process\", default=task)\nparser.add_argument(\n    \"--provider\",\n    type=str,\n    choices=[\"openai\", \"anthropic\"],\n    default=\"openai\",\n    help=\"The model provider to use (default: openai)\",",
        "detail": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "description": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "peekOfCode": "controller = Controller()\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--query\", type=str, help=\"The query to process\", default=task)\nparser.add_argument(\n    \"--provider\",\n    type=str,\n    choices=[\"openai\", \"anthropic\"],\n    default=\"openai\",\n    help=\"The model provider to use (default: openai)\",\n)",
        "detail": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "description": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--query\", type=str, help=\"The query to process\", default=task)\nparser.add_argument(\n    \"--provider\",\n    type=str,\n    choices=[\"openai\", \"anthropic\"],\n    default=\"openai\",\n    help=\"The model provider to use (default: openai)\",\n)\nargs = parser.parse_args()",
        "detail": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "description": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "peekOfCode": "args = parser.parse_args()\nllm = get_llm(args.provider)\nbrowser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nagent = Agent(\n    task=args.query,\n    llm=llm,",
        "detail": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "description": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "peekOfCode": "llm = get_llm(args.provider)\nbrowser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nagent = Agent(\n    task=args.query,\n    llm=llm,\n    controller=controller,",
        "detail": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "description": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nagent = Agent(\n    task=args.query,\n    llm=llm,\n    controller=controller,\n    browser=browser,",
        "detail": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "description": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "peekOfCode": "agent = Agent(\n    task=args.query,\n    llm=llm,\n    controller=controller,\n    browser=browser,\n    use_vision=True,\n    max_actions_per_step=1,\n)\nasync def main():\n    await agent.run(max_steps=25)",
        "detail": "autoppia_iwa.modules.browser-use.examples.ui.command_line",
        "documentation": {}
    },
    {
        "label": "ActionResult",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.ui.gradio_demo",
        "description": "autoppia_iwa.modules.browser-use.examples.ui.gradio_demo",
        "peekOfCode": "class ActionResult:\n    is_done: bool\n    extracted_content: Optional[str]\n    error: Optional[str]\n    include_in_memory: bool\n@dataclass\nclass AgentHistoryList:\n    all_results: List[ActionResult]\n    all_model_outputs: List[dict]\ndef parse_agent_history(history_str: str) -> None:",
        "detail": "autoppia_iwa.modules.browser-use.examples.ui.gradio_demo",
        "documentation": {}
    },
    {
        "label": "AgentHistoryList",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.ui.gradio_demo",
        "description": "autoppia_iwa.modules.browser-use.examples.ui.gradio_demo",
        "peekOfCode": "class AgentHistoryList:\n    all_results: List[ActionResult]\n    all_model_outputs: List[dict]\ndef parse_agent_history(history_str: str) -> None:\n    console = Console()\n    # Split the content into sections based on ActionResult entries\n    sections = history_str.split(\"ActionResult(\")\n    for i, section in enumerate(sections[1:], 1):  # Skip first empty section\n        # Extract relevant information\n        content = \"\"",
        "detail": "autoppia_iwa.modules.browser-use.examples.ui.gradio_demo",
        "documentation": {}
    },
    {
        "label": "parse_agent_history",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.ui.gradio_demo",
        "description": "autoppia_iwa.modules.browser-use.examples.ui.gradio_demo",
        "peekOfCode": "def parse_agent_history(history_str: str) -> None:\n    console = Console()\n    # Split the content into sections based on ActionResult entries\n    sections = history_str.split(\"ActionResult(\")\n    for i, section in enumerate(sections[1:], 1):  # Skip first empty section\n        # Extract relevant information\n        content = \"\"\n        if \"extracted_content=\" in section:\n            content = section.split(\"extracted_content=\")[1].split(\",\")[0].strip(\"'\")\n        if content:",
        "detail": "autoppia_iwa.modules.browser-use.examples.ui.gradio_demo",
        "documentation": {}
    },
    {
        "label": "create_ui",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.ui.gradio_demo",
        "description": "autoppia_iwa.modules.browser-use.examples.ui.gradio_demo",
        "peekOfCode": "def create_ui():\n    with gr.Blocks(title=\"Browser Use GUI\") as interface:\n        gr.Markdown(\"# Browser Use Task Automation\")\n        with gr.Row():\n            with gr.Column():\n                api_key = gr.Textbox(label=\"OpenAI API Key\", placeholder=\"sk-...\", type=\"password\")\n                task = gr.Textbox(\n                    label=\"Task Description\",\n                    placeholder=\"E.g., Find flights from New York to London for next week\",\n                    lines=3,",
        "detail": "autoppia_iwa.modules.browser-use.examples.ui.gradio_demo",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.captcha",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.captcha",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\nagent = Agent(\n    task=\"go to https://captcha.com/demos/features/captcha-demo.aspx and solve the captcha\",\n    llm=llm,\n)\nasync def main():\n    await agent.run()\n    input(\"Press Enter to exit\")\nasyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.captcha",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.captcha",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.captcha",
        "peekOfCode": "agent = Agent(\n    task=\"go to https://captcha.com/demos/features/captcha-demo.aspx and solve the captcha\",\n    llm=llm,\n)\nasync def main():\n    await agent.run()\n    input(\"Press Enter to exit\")\nasyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.captcha",
        "documentation": {}
    },
    {
        "label": "WebpageInfo",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.check_appointment",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.check_appointment",
        "peekOfCode": "class WebpageInfo(BaseModel):\n    link: str = \"https://appointment.mfa.gr/en/reservations/aero/ireland-grcon-dub/\"\n@controller.action(\"Go to the webpage\", param_model=WebpageInfo)\ndef go_to_webpage(webpage_info: WebpageInfo):\n    return webpage_info.link\nasync def main():\n    task = (\n        \"Go to the Greece MFA webpage via the link I provided you.\"\n        \"Check the visa appointment dates. If there is no available date in this month, check the next month.\"\n        \"If there is no available date in both months, tell me there is no available date.\"",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.check_appointment",
        "documentation": {}
    },
    {
        "label": "go_to_webpage",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.check_appointment",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.check_appointment",
        "peekOfCode": "def go_to_webpage(webpage_info: WebpageInfo):\n    return webpage_info.link\nasync def main():\n    task = (\n        \"Go to the Greece MFA webpage via the link I provided you.\"\n        \"Check the visa appointment dates. If there is no available date in this month, check the next month.\"\n        \"If there is no available date in both months, tell me there is no available date.\"\n    )\n    model = ChatOpenAI(model=\"gpt-4o-mini\", api_key=SecretStr(os.getenv(\"OPENAI_API_KEY\", \"\")))\n    agent = Agent(task, model, controller=controller, use_vision=True)",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.check_appointment",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.check_appointment",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.check_appointment",
        "peekOfCode": "controller = Controller()\nclass WebpageInfo(BaseModel):\n    link: str = \"https://appointment.mfa.gr/en/reservations/aero/ireland-grcon-dub/\"\n@controller.action(\"Go to the webpage\", param_model=WebpageInfo)\ndef go_to_webpage(webpage_info: WebpageInfo):\n    return webpage_info.link\nasync def main():\n    task = (\n        \"Go to the Greece MFA webpage via the link I provided you.\"\n        \"Check the visa appointment dates. If there is no available date in this month, check the next month.\"",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.check_appointment",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "peekOfCode": "class Job(BaseModel):\n    title: str\n    link: str\n    company: str\n    fit_score: float\n    location: Optional[str] = None\n    salary: Optional[str] = None\n@controller.action(\"Save jobs to file - with a score how well it fits to my profile\", param_model=Job)\ndef save_jobs(job: Job):\n    with open(\"jobs.csv\", \"a\", newline=\"\") as f:",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "documentation": {}
    },
    {
        "label": "save_jobs",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "peekOfCode": "def save_jobs(job: Job):\n    with open(\"jobs.csv\", \"a\", newline=\"\") as f:\n        writer = csv.writer(f)\n        writer.writerow([job.title, job.company, job.link, job.salary, job.location])\n    return \"Saved job to file\"\n@controller.action(\"Read jobs from file\")\ndef read_jobs():\n    with open(\"jobs.csv\", \"r\") as f:\n        return f.read()\n@controller.action(\"Read my cv for context to fill forms\")",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "documentation": {}
    },
    {
        "label": "read_jobs",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "peekOfCode": "def read_jobs():\n    with open(\"jobs.csv\", \"r\") as f:\n        return f.read()\n@controller.action(\"Read my cv for context to fill forms\")\ndef read_cv():\n    pdf = PdfReader(CV)\n    text = \"\"\n    for page in pdf.pages:\n        text += page.extract_text() or \"\"\n    logger.info(f\"Read cv with {len(text)} characters\")",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "documentation": {}
    },
    {
        "label": "read_cv",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "peekOfCode": "def read_cv():\n    pdf = PdfReader(CV)\n    text = \"\"\n    for page in pdf.pages:\n        text += page.extract_text() or \"\"\n    logger.info(f\"Read cv with {len(text)} characters\")\n    return ActionResult(extracted_content=text, include_in_memory=True)\n@controller.action(\n    \"Upload cv to element - call this function to upload if element is not found, try with different index of the same upload element\",\n    requires_browser=True,",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# full screen mode\ncontroller = Controller()\n# NOTE: This is the path to your cv file\nCV = Path.cwd() / \"cv_04_24.pdf\"\nif not CV.exists():\n    raise FileNotFoundError(f\"You need to set the path to your cv file in the CV variable. CV file not found at {CV}\")\nclass Job(BaseModel):\n    title: str\n    link: str",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "peekOfCode": "controller = Controller()\n# NOTE: This is the path to your cv file\nCV = Path.cwd() / \"cv_04_24.pdf\"\nif not CV.exists():\n    raise FileNotFoundError(f\"You need to set the path to your cv file in the CV variable. CV file not found at {CV}\")\nclass Job(BaseModel):\n    title: str\n    link: str\n    company: str\n    fit_score: float",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "documentation": {}
    },
    {
        "label": "CV",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "peekOfCode": "CV = Path.cwd() / \"cv_04_24.pdf\"\nif not CV.exists():\n    raise FileNotFoundError(f\"You need to set the path to your cv file in the CV variable. CV file not found at {CV}\")\nclass Job(BaseModel):\n    title: str\n    link: str\n    company: str\n    fit_score: float\n    location: Optional[str] = None\n    salary: Optional[str] = None",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        chrome_instance_path=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\",\n        disable_security=True,\n    )\n)\nasync def main():\n    # ground_task = (\n    # \t'You are a professional job finder. '\n    # \t'1. Read my cv with read_cv'",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.find_and_apply_to_jobs",
        "documentation": {}
    },
    {
        "label": "TwitterConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.post-twitter",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.post-twitter",
        "peekOfCode": "class TwitterConfig:\n    \"\"\"Configuration for Twitter posting\"\"\"\n    openai_api_key: str\n    chrome_path: str\n    target_user: str  # Twitter handle without @\n    message: str\n    reply_url: str\n    headless: bool = False\n    model: str = \"gpt-4o-mini\"\n    base_url: str = \"https://x.com/home\"",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.post-twitter",
        "documentation": {}
    },
    {
        "label": "create_twitter_agent",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.post-twitter",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.post-twitter",
        "peekOfCode": "def create_twitter_agent(config: TwitterConfig) -> Agent:\n    llm = ChatOpenAI(model=config.model, api_key=config.openai_api_key)\n    browser = Browser(\n        config=BrowserConfig(\n            headless=config.headless,\n            chrome_instance_path=config.chrome_path,\n        )\n    )\n    controller = Controller()\n    # Construct the full message with tag",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.post-twitter",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.post-twitter",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.post-twitter",
        "peekOfCode": "def main():\n    agent = create_twitter_agent(config)\n    asyncio.run(post_tweet(agent))\nif __name__ == \"__main__\":\n    main()",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.post-twitter",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.post-twitter",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.post-twitter",
        "peekOfCode": "config = TwitterConfig(\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    chrome_path=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\",  # This is for MacOS (Chrome)\n    target_user=\"XXXXX\",\n    message=\"XXXXX\",\n    reply_url=\"XXXXX\",\n    headless=False,\n)\ndef create_twitter_agent(config: TwitterConfig) -> Agent:\n    llm = ChatOpenAI(model=config.model, api_key=config.openai_api_key)",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.post-twitter",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.scrolling_page",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.scrolling_page",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\nagent = Agent(\n    # task=\"Navigate to 'https://en.wikipedia.org/wiki/Internet' and scroll down by one page - then scroll up by 100 pixels - then scroll down by 100 pixels - then scroll down by 10000 pixels.\",\n    task=\"Navigate to 'https://en.wikipedia.org/wiki/Internet' and scroll to the string 'The vast majority of computer'\",\n    llm=llm,\n    browser=Browser(config=BrowserConfig(headless=False)),\n)\nasync def main():\n    await agent.run()\nif __name__ == \"__main__\":",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.scrolling_page",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.scrolling_page",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.scrolling_page",
        "peekOfCode": "agent = Agent(\n    # task=\"Navigate to 'https://en.wikipedia.org/wiki/Internet' and scroll down by one page - then scroll up by 100 pixels - then scroll down by 100 pixels - then scroll down by 10000 pixels.\",\n    task=\"Navigate to 'https://en.wikipedia.org/wiki/Internet' and scroll to the string 'The vast majority of computer'\",\n    llm=llm,\n    browser=Browser(config=BrowserConfig(headless=False)),\n)\nasync def main():\n    await agent.run()\nif __name__ == \"__main__\":\n    asyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.scrolling_page",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "peekOfCode": "api_key = os.getenv(\"GEMINI_API_KEY\")\nif not api_key:\n    raise ValueError(\"GEMINI_API_KEY is not set\")\nllm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\nbrowser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nfile_path = os.path.join(os.path.dirname(__file__), \"twitter_cookies.txt\")",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "peekOfCode": "llm = ChatGoogleGenerativeAI(model=\"gemini-2.0-flash-exp\", api_key=SecretStr(api_key))\nbrowser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nfile_path = os.path.join(os.path.dirname(__file__), \"twitter_cookies.txt\")\ncontext = BrowserContext(browser=browser, config=BrowserContextConfig(cookies_file=file_path))\nasync def run_search():\n    agent = Agent(",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        # chrome_instance_path='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n    )\n)\nfile_path = os.path.join(os.path.dirname(__file__), \"twitter_cookies.txt\")\ncontext = BrowserContext(browser=browser, config=BrowserContextConfig(cookies_file=file_path))\nasync def run_search():\n    agent = Agent(\n        browser_context=context,",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "documentation": {}
    },
    {
        "label": "file_path",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "peekOfCode": "file_path = os.path.join(os.path.dirname(__file__), \"twitter_cookies.txt\")\ncontext = BrowserContext(browser=browser, config=BrowserContextConfig(cookies_file=file_path))\nasync def run_search():\n    agent = Agent(\n        browser_context=context,\n        task=('go to https://x.com. write a new post with the text \"browser-use ftw\", and submit it'),\n        llm=llm,\n        max_actions_per_step=4,\n    )\n    await agent.run(max_steps=25)",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "peekOfCode": "context = BrowserContext(browser=browser, config=BrowserContextConfig(cookies_file=file_path))\nasync def run_search():\n    agent = Agent(\n        browser_context=context,\n        task=('go to https://x.com. write a new post with the text \"browser-use ftw\", and submit it'),\n        llm=llm,\n        max_actions_per_step=4,\n    )\n    await agent.run(max_steps=25)\n    input(\"Press Enter to close the browser...\")",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.twitter_post_using_cookies",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.web_voyager_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.web_voyager_agent",
        "peekOfCode": "browser = Browser(\n    config=BrowserConfig(\n        headless=False,  # This is True in production\n        disable_security=True,\n        new_context_config=BrowserContextConfig(\n            disable_security=True,\n            minimum_wait_page_load_time=1,  # 3 on prod\n            maximum_wait_page_load_time=10,  # 20 on prod\n            # no_viewport=True,\n            browser_window_size={",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.web_voyager_agent",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.web_voyager_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.web_voyager_agent",
        "peekOfCode": "llm = AzureChatOpenAI(\n    model=\"gpt-4o\",\n    api_version=\"2024-10-21\",\n    azure_endpoint=os.getenv(\"AZURE_OPENAI_ENDPOINT\", \"\"),\n    api_key=SecretStr(os.getenv(\"AZURE_OPENAI_KEY\", \"\")),\n)\n# TASK = \"\"\"\n# Find the lowest-priced one-way flight from Cairo to Montreal on February 21, 2025, including the total travel time and number of stops. on https://www.google.com/travel/flights/\n# \"\"\"\n# TASK = \"\"\"",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.web_voyager_agent",
        "documentation": {}
    },
    {
        "label": "TASK",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.use-cases.web_voyager_agent",
        "description": "autoppia_iwa.modules.browser-use.examples.use-cases.web_voyager_agent",
        "peekOfCode": "TASK = \"\"\"\nFind and book a hotel in Paris with suitable accommodations for a family of four (two adults and two children) offering free cancellation for the dates of February 14-21, 2025. on https://www.booking.com/\n\"\"\"\nasync def main():\n    agent = Agent(\n        task=TASK,\n        llm=llm,\n        browser=browser,\n        validate_output=True,\n    )",
        "detail": "autoppia_iwa.modules.browser-use.examples.use-cases.web_voyager_agent",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.simple",
        "description": "autoppia_iwa.modules.browser-use.examples.simple",
        "peekOfCode": "llm = ChatOpenAI(\n    model=\"gpt-4o\",\n    temperature=0.0,\n)\ntask = \"Find the founders of browser-use and draft them a short personalized message\"\nagent = Agent(task=task, llm=llm)\nasync def main():\n    await agent.run()\nif __name__ == \"__main__\":\n    asyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.simple",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.simple",
        "description": "autoppia_iwa.modules.browser-use.examples.simple",
        "peekOfCode": "task = \"Find the founders of browser-use and draft them a short personalized message\"\nagent = Agent(task=task, llm=llm)\nasync def main():\n    await agent.run()\nif __name__ == \"__main__\":\n    asyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.simple",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.examples.simple",
        "description": "autoppia_iwa.modules.browser-use.examples.simple",
        "peekOfCode": "agent = Agent(task=task, llm=llm)\nasync def main():\n    await agent.run()\nif __name__ == \"__main__\":\n    asyncio.run(main())",
        "detail": "autoppia_iwa.modules.browser-use.examples.simple",
        "documentation": {}
    },
    {
        "label": "CaptchaTest",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_agent_actions",
        "description": "autoppia_iwa.modules.browser-use.tests.test_agent_actions",
        "peekOfCode": "class CaptchaTest(BaseModel):\n    name: str\n    url: str\n    success_text: str\n    additional_text: str | None = None\n# run 3 test: python -m pytest tests/test_agent_actions.py -v -k \"test_captcha_solver\" --capture=no --log-cli-level=INFO\n# pytest tests/test_agent_actions.py -v -k \"test_captcha_solver\" --capture=no --log-cli-level=INFO\n@pytest.mark.asyncio\n@pytest.mark.parametrize(\n    \"captcha\",",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_agent_actions",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_agent_actions",
        "description": "autoppia_iwa.modules.browser-use.tests.test_agent_actions",
        "peekOfCode": "def llm():\n    \"\"\"Initialize language model for testing\"\"\"\n    # return ChatAnthropic(model_name='claude-3-5-sonnet-20240620', timeout=25, stop=None)\n    return AzureChatOpenAI(\n        model=\"gpt-4o\",\n        api_version=\"2024-10-21\",\n        azure_endpoint=os.getenv(\"AZURE_OPENAI_ENDPOINT\", \"\"),\n        api_key=SecretStr(os.getenv(\"AZURE_OPENAI_KEY\", \"\")),\n    )\n    # return ChatOpenAI(model='gpt-4o-mini')",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_agent_actions",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_agent_actions",
        "description": "autoppia_iwa.modules.browser-use.tests.test_agent_actions",
        "peekOfCode": "def event_loop():\n    \"\"\"Create an instance of the default event loop for each test case.\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"session\")\nasync def browser(event_loop):\n    browser_instance = Browser(\n        config=BrowserConfig(\n            headless=True,",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_agent_actions",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_core_functionality",
        "description": "autoppia_iwa.modules.browser-use.tests.test_core_functionality",
        "peekOfCode": "def event_loop():\n    \"\"\"Create an instance of the default event loop for each test case.\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"function\")\nasync def browser(event_loop):\n    browser_instance = Browser(\n        config=BrowserConfig(\n            headless=True,",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_core_functionality",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_core_functionality",
        "description": "autoppia_iwa.modules.browser-use.tests.test_core_functionality",
        "peekOfCode": "def llm():\n    \"\"\"Initialize language model for testing\"\"\"\n    return AzureChatOpenAI(\n        model=\"gpt-4o\",\n        api_version=\"2024-10-21\",\n        azure_endpoint=os.getenv(\"AZURE_OPENAI_ENDPOINT\", \"\"),\n        api_key=SecretStr(os.getenv(\"AZURE_OPENAI_KEY\", \"\")),\n    )\n# pytest -s -k test_search_google\n@pytest.mark.asyncio",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_core_functionality",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_dropdown",
        "description": "autoppia_iwa.modules.browser-use.tests.test_dropdown",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\n# browser = Browser(config=BrowserConfig(headless=False))\nagent = Agent(\n    task=(\"go to https://codepen.io/geheimschriftstift/pen/mPLvQz and first get all options for the dropdown and then select the 5th option\"),\n    llm=llm,\n    browser_context=BrowserContext(\n        browser=Browser(config=BrowserConfig(headless=False, disable_security=True)),\n    ),\n)\nasync def test_dropdown():",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_dropdown",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_dropdown",
        "description": "autoppia_iwa.modules.browser-use.tests.test_dropdown",
        "peekOfCode": "agent = Agent(\n    task=(\"go to https://codepen.io/geheimschriftstift/pen/mPLvQz and first get all options for the dropdown and then select the 5th option\"),\n    llm=llm,\n    browser_context=BrowserContext(\n        browser=Browser(config=BrowserConfig(headless=False, disable_security=True)),\n    ),\n)\nasync def test_dropdown():\n    history: AgentHistoryList = await agent.run(20)\n    # await controller.browser.close(force=True)",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_dropdown",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_dropdown_complex",
        "description": "autoppia_iwa.modules.browser-use.tests.test_dropdown_complex",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\n# browser = Browser(config=BrowserConfig(headless=False))\nagent = Agent(\n    task=(\"go to https://codepen.io/shyam-king/pen/pvzpByJ and first get all options for the dropdown and then select the json option\"),\n    llm=llm,\n    browser_context=BrowserContext(\n        browser=Browser(config=BrowserConfig(headless=False, disable_security=True)),\n    ),\n)\nasync def test_dropdown():",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_dropdown_complex",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_dropdown_complex",
        "description": "autoppia_iwa.modules.browser-use.tests.test_dropdown_complex",
        "peekOfCode": "agent = Agent(\n    task=(\"go to https://codepen.io/shyam-king/pen/pvzpByJ and first get all options for the dropdown and then select the json option\"),\n    llm=llm,\n    browser_context=BrowserContext(\n        browser=Browser(config=BrowserConfig(headless=False, disable_security=True)),\n    ),\n)\nasync def test_dropdown():\n    history: AgentHistoryList = await agent.run(20)\n    # await controller.browser.close(force=True)",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_dropdown_complex",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_dropdown_error",
        "description": "autoppia_iwa.modules.browser-use.tests.test_dropdown_error",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\n# browser = Browser(config=BrowserConfig(headless=False))\nagent = Agent(\n    task=('go to https://codepen.io/shyam-king/pen/emOyjKm and select number \"4\" and return the output of \"selected value\"'),\n    llm=llm,\n    browser_context=BrowserContext(\n        browser=Browser(config=BrowserConfig(headless=False, disable_security=True)),\n    ),\n)\nasync def test_dropdown():",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_dropdown_error",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_dropdown_error",
        "description": "autoppia_iwa.modules.browser-use.tests.test_dropdown_error",
        "peekOfCode": "agent = Agent(\n    task=('go to https://codepen.io/shyam-king/pen/emOyjKm and select number \"4\" and return the output of \"selected value\"'),\n    llm=llm,\n    browser_context=BrowserContext(\n        browser=Browser(config=BrowserConfig(headless=False, disable_security=True)),\n    ),\n)\nasync def test_dropdown():\n    history: AgentHistoryList = await agent.run(20)\n    # await controller.browser.close(force=True)",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_dropdown_error",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_excluded_actions",
        "description": "autoppia_iwa.modules.browser-use.tests.test_excluded_actions",
        "peekOfCode": "def event_loop():\n    \"\"\"Create an instance of the default event loop for each test case.\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"session\")\nasync def browser(event_loop):\n    browser_instance = Browser(\n        config=BrowserConfig(\n            headless=True,",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_excluded_actions",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_excluded_actions",
        "description": "autoppia_iwa.modules.browser-use.tests.test_excluded_actions",
        "peekOfCode": "def llm():\n    \"\"\"Initialize language model for testing\"\"\"\n    return AzureChatOpenAI(\n        model=\"gpt-4o\",\n        api_version=\"2024-10-21\",\n        azure_endpoint=os.getenv(\"AZURE_OPENAI_ENDPOINT\", \"\"),\n        api_key=SecretStr(os.getenv(\"AZURE_OPENAI_KEY\", \"\")),\n    )\n# pytest tests/test_excluded_actions.py -v -k \"test_only_open_tab_allowed\" --capture=no\n@pytest.mark.asyncio",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_excluded_actions",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_gif_path",
        "description": "autoppia_iwa.modules.browser-use.tests.test_gif_path",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\nagent = Agent(\n    task=('go to google.com and search for text \"hi there\"'),\n    llm=llm,\n    browser_context=BrowserContext(\n        browser=Browser(config=BrowserConfig(headless=False, disable_security=True)),\n    ),\n    generate_gif=\"./google.gif\",\n)\nasync def test_gif_path():",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_gif_path",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_gif_path",
        "description": "autoppia_iwa.modules.browser-use.tests.test_gif_path",
        "peekOfCode": "agent = Agent(\n    task=('go to google.com and search for text \"hi there\"'),\n    llm=llm,\n    browser_context=BrowserContext(\n        browser=Browser(config=BrowserConfig(headless=False, disable_security=True)),\n    ),\n    generate_gif=\"./google.gif\",\n)\nasync def test_gif_path():\n    if os.path.exists(\"./google.gif\"):",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_gif_path",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "description": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "peekOfCode": "def event_loop():\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"session\")\nasync def browser(event_loop):\n    browser_instance = Browser(\n        config=BrowserConfig(\n            headless=True,\n        )",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "documentation": {}
    },
    {
        "label": "test_cases",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "description": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "peekOfCode": "def test_cases() -> List[Dict[str, Any]]:\n    \"\"\"Load test cases from Mind2Web dataset\"\"\"\n    file_path = os.path.join(os.path.dirname(__file__), \"mind2web_data/processed.json\")\n    logger.info(f\"Loading test cases from {file_path}\")\n    with open(file_path, \"r\") as f:\n        data = json.load(f)\n    subset = data[:TEST_SUBSET_SIZE]\n    logger.info(f\"Loaded {len(subset)}/{len(data)} test cases\")\n    return subset\n@pytest.fixture",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "description": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "peekOfCode": "def llm():\n    \"\"\"Initialize language model for testing\"\"\"\n    # return ChatAnthropic(model_name='claude-3-5-sonnet-20240620', timeout=25, stop=None)\n    return AzureChatOpenAI(\n        model=\"gpt-4o\",\n        api_version=\"2024-10-21\",\n        azure_endpoint=os.getenv(\"AZURE_OPENAI_ENDPOINT\", \"\"),\n        api_key=SecretStr(os.getenv(\"AZURE_OPENAI_KEY\", \"\")),\n    )\n# run with: pytest -s -v tests/test_mind2web.py:test_random_samples",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "documentation": {}
    },
    {
        "label": "test_dataset_integrity",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "description": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "peekOfCode": "def test_dataset_integrity(test_cases):\n    \"\"\"Test the integrity of the test dataset\"\"\"\n    logger.info(\"\\n=== Testing Dataset Integrity ===\")\n    required_fields = [\"website\", \"confirmed_task\", \"action_reprs\"]\n    missing_fields = []\n    logger.info(f\"Checking {len(test_cases)} test cases for required fields\")\n    for i, case in enumerate(test_cases, 1):\n        logger.debug(f\"Checking case {i}/{len(test_cases)}\")\n        for field in required_fields:\n            if field not in case:",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "documentation": {}
    },
    {
        "label": "MAX_STEPS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "description": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "peekOfCode": "MAX_STEPS = 50\nTEST_SUBSET_SIZE = 10\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"session\")\nasync def browser(event_loop):\n    browser_instance = Browser(",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "documentation": {}
    },
    {
        "label": "TEST_SUBSET_SIZE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "description": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "peekOfCode": "TEST_SUBSET_SIZE = 10\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"session\")\nasync def browser(event_loop):\n    browser_instance = Browser(\n        config=BrowserConfig(",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_mind2web",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_models",
        "description": "autoppia_iwa.modules.browser-use.tests.test_models",
        "peekOfCode": "def event_loop():\n    \"\"\"Create an instance of the default event loop for each test case.\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"function\")\nasync def browser(event_loop):\n    browser_instance = Browser(\n        config=BrowserConfig(\n            headless=True,",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_models",
        "documentation": {}
    },
    {
        "label": "api_key_gemini",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_models",
        "description": "autoppia_iwa.modules.browser-use.tests.test_models",
        "peekOfCode": "api_key_gemini = SecretStr(os.getenv(\"GEMINI_API_KEY\") or \"\")\napi_key_deepseek = SecretStr(os.getenv(\"DEEPSEEK_API_KEY\") or \"\")\napi_key_anthropic = SecretStr(os.getenv(\"ANTHROPIC_API_KEY\") or \"\")\n# pytest -s -v tests/test_models.py\n@pytest.fixture(\n    params=[\n        # run: ollama start\n        ChatOpenAI(\n            base_url=\"https://api.deepseek.com/v1\",\n            model=\"deepseek-reasoner\",",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_models",
        "documentation": {}
    },
    {
        "label": "api_key_deepseek",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_models",
        "description": "autoppia_iwa.modules.browser-use.tests.test_models",
        "peekOfCode": "api_key_deepseek = SecretStr(os.getenv(\"DEEPSEEK_API_KEY\") or \"\")\napi_key_anthropic = SecretStr(os.getenv(\"ANTHROPIC_API_KEY\") or \"\")\n# pytest -s -v tests/test_models.py\n@pytest.fixture(\n    params=[\n        # run: ollama start\n        ChatOpenAI(\n            base_url=\"https://api.deepseek.com/v1\",\n            model=\"deepseek-reasoner\",\n            api_key=api_key_deepseek,",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_models",
        "documentation": {}
    },
    {
        "label": "api_key_anthropic",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_models",
        "description": "autoppia_iwa.modules.browser-use.tests.test_models",
        "peekOfCode": "api_key_anthropic = SecretStr(os.getenv(\"ANTHROPIC_API_KEY\") or \"\")\n# pytest -s -v tests/test_models.py\n@pytest.fixture(\n    params=[\n        # run: ollama start\n        ChatOpenAI(\n            base_url=\"https://api.deepseek.com/v1\",\n            model=\"deepseek-reasoner\",\n            api_key=api_key_deepseek,\n        ),",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_models",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_qwen",
        "description": "autoppia_iwa.modules.browser-use.tests.test_qwen",
        "peekOfCode": "def llm():\n    \"\"\"Initialize language model for testing\"\"\"\n    # return ChatAnthropic(model_name='claude-3-5-sonnet-20240620', timeout=25, stop=None)\n    # NOTE: Make sure to run ollama server with `ollama start'\n    return ChatOllama(\n        model=\"qwen2.5:latest\",\n        num_ctx=128000,\n    )\n@pytest.fixture(scope=\"session\")\ndef event_loop():",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_qwen",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_qwen",
        "description": "autoppia_iwa.modules.browser-use.tests.test_qwen",
        "peekOfCode": "def event_loop():\n    \"\"\"Create an instance of the default event loop for each test case.\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"session\")\nasync def browser(event_loop):\n    browser_instance = Browser(\n        config=BrowserConfig(\n            headless=True,",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_qwen",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_react_dropdown",
        "description": "autoppia_iwa.modules.browser-use.tests.test_react_dropdown",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\n# browser = Browser(config=BrowserConfig(headless=False))\nagent = Agent(\n    task=('go to https://codepen.io/shyam-king/pen/ByBJoOv and select \"Tiger\" dropdown and read the text given in \"Selected Animal\" box (it can be empty as well)'),\n    llm=llm,\n    browser_context=BrowserContext(\n        browser=Browser(config=BrowserConfig(headless=False, disable_security=True)),\n    ),\n)\nasync def test_dropdown():",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_react_dropdown",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_react_dropdown",
        "description": "autoppia_iwa.modules.browser-use.tests.test_react_dropdown",
        "peekOfCode": "agent = Agent(\n    task=('go to https://codepen.io/shyam-king/pen/ByBJoOv and select \"Tiger\" dropdown and read the text given in \"Selected Animal\" box (it can be empty as well)'),\n    llm=llm,\n    browser_context=BrowserContext(\n        browser=Browser(config=BrowserConfig(headless=False, disable_security=True)),\n    ),\n)\nasync def test_dropdown():\n    history: AgentHistoryList = await agent.run(10)\n    # await controller.browser.close(force=True)",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_react_dropdown",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_self_registered_actions",
        "description": "autoppia_iwa.modules.browser-use.tests.test_self_registered_actions",
        "peekOfCode": "def event_loop():\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"session\")\nasync def browser(event_loop):\n    browser_instance = Browser(\n        config=BrowserConfig(\n            headless=True,\n        )",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_self_registered_actions",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_self_registered_actions",
        "description": "autoppia_iwa.modules.browser-use.tests.test_self_registered_actions",
        "peekOfCode": "def llm():\n    \"\"\"Initialize language model for testing\"\"\"\n    # return ChatAnthropic(model_name='claude-3-5-sonnet-20240620', timeout=25, stop=None)\n    return AzureChatOpenAI(\n        model=\"gpt-4o\",\n        api_version=\"2024-10-21\",\n        azure_endpoint=os.getenv(\"AZURE_OPENAI_ENDPOINT\", \"\"),\n        api_key=SecretStr(os.getenv(\"AZURE_OPENAI_KEY\", \"\")),\n    )\n# @pytest.mark.skip(reason=\"Skipping test for now\")",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_self_registered_actions",
        "documentation": {}
    },
    {
        "label": "TestAgent",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_service",
        "description": "autoppia_iwa.modules.browser-use.tests.test_service",
        "peekOfCode": "class TestAgent:\n    @pytest.fixture\n    def mock_controller(self):\n        controller = Mock(spec=Controller)\n        registry = Mock(spec=Registry)\n        registry.registry = MagicMock()\n        registry.registry.actions = {\"test_action\": MagicMock(param_model=MagicMock())}  # type: ignore\n        controller.registry = registry\n        return controller\n    @pytest.fixture",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_service",
        "documentation": {}
    },
    {
        "label": "TestRegistry",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_service",
        "description": "autoppia_iwa.modules.browser-use.tests.test_service",
        "peekOfCode": "class TestRegistry:\n    @pytest.fixture\n    def registry_with_excludes(self):\n        return Registry(exclude_actions=[\"excluded_action\"])\n    def test_action_decorator_with_excluded_action(self, registry_with_excludes):\n        \"\"\"\n        Test that the action decorator does not register an action\n        if it's in the exclude_actions list.\n        \"\"\"\n        # Define a function to be decorated",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_service",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_stress",
        "description": "autoppia_iwa.modules.browser-use.tests.test_stress",
        "peekOfCode": "def event_loop():\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"session\")\nasync def browser(event_loop):\n    browser_instance = Browser(\n        config=BrowserConfig(\n            headless=True,\n        )",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_stress",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_stress",
        "description": "autoppia_iwa.modules.browser-use.tests.test_stress",
        "peekOfCode": "def llm():\n    \"\"\"Initialize the language model\"\"\"\n    model = AzureChatOpenAI(\n        api_version=\"2024-10-21\",\n        model=\"gpt-4o\",\n        azure_endpoint=os.getenv(\"AZURE_OPENAI_ENDPOINT\", \"\"),\n        api_key=SecretStr(os.getenv(\"AZURE_OPENAI_KEY\", \"\")),\n    )\n    return model\ndef generate_random_text(length: int) -> str:",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_stress",
        "documentation": {}
    },
    {
        "label": "generate_random_text",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_stress",
        "description": "autoppia_iwa.modules.browser-use.tests.test_stress",
        "peekOfCode": "def generate_random_text(length: int) -> str:\n    \"\"\"Generate random text of specified length\"\"\"\n    return \"\".join(random.choices(string.ascii_letters + string.digits + \" \", k=length))\n@pytest.fixture\nasync def controller():\n    \"\"\"Initialize the controller\"\"\"\n    controller = Controller()\n    large_text = generate_random_text(10000)\n    @controller.action(\"call this magical function to get very special text\")\n    def get_very_special_text():",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_stress",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_vision",
        "description": "autoppia_iwa.modules.browser-use.tests.test_vision",
        "peekOfCode": "llm = ChatOpenAI(model=\"gpt-4o\")\ncontroller = Controller()\n# use this test to ask the model questions about the page like\n# which color do you see for bbox labels, list all with their label\n# whats the smallest bboxes with labels and\n@controller.registry.action(description=\"explain what you see on the screen and ask user for input\")\nasync def explain_screen(text: str) -> str:\n    pprint(text)\n    answer = input(\"\\nuser input next question: \\n\")\n    return answer",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_vision",
        "documentation": {}
    },
    {
        "label": "controller",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_vision",
        "description": "autoppia_iwa.modules.browser-use.tests.test_vision",
        "peekOfCode": "controller = Controller()\n# use this test to ask the model questions about the page like\n# which color do you see for bbox labels, list all with their label\n# whats the smallest bboxes with labels and\n@controller.registry.action(description=\"explain what you see on the screen and ask user for input\")\nasync def explain_screen(text: str) -> str:\n    pprint(text)\n    answer = input(\"\\nuser input next question: \\n\")\n    return answer\n@controller.registry.action(description=\"done\")",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_vision",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.tests.test_vision",
        "description": "autoppia_iwa.modules.browser-use.tests.test_vision",
        "peekOfCode": "agent = Agent(\n    task=\"call explain_screen all the time the user asks you questions e.g. about the page like bbox which you see are labels  - your task is to expalin it and get the next question\",\n    llm=llm,\n    controller=controller,\n    browser=Browser(config=BrowserConfig(disable_security=True, headless=False)),\n)\n@pytest.mark.skip(reason=\"this is for local testing only\")\nasync def test_vision():\n    history: AgentHistoryList = await agent.run(20)",
        "detail": "autoppia_iwa.modules.browser-use.tests.test_vision",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.browser-use.conftest",
        "description": "autoppia_iwa.modules.browser-use.conftest",
        "peekOfCode": "project_root = os.path.dirname(os.path.abspath(__file__))\nsys.path.insert(0, project_root)\nsetup_logging()",
        "detail": "autoppia_iwa.modules.browser-use.conftest",
        "documentation": {}
    },
    {
        "label": "test_generate_endpoint_working_200_OK",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.llm_local.test.test",
        "description": "autoppia_iwa.modules.llm_local.test.test",
        "peekOfCode": "def test_generate_endpoint_working_200_OK():\n    \"\"\"\n    Basic test\n    \"\"\"\n    try:\n        response = requests.post(URL, json=payload)\n        assert response.status_code == 200, f\"Expected 200, got {response.status_code}\"\n        response_data = response.json()\n        assert \"output\" in response_data, \"Missing 'output' in response\"\n        print(\"Response from server:\", response_data[\"output\"])",
        "detail": "autoppia_iwa.modules.llm_local.test.test",
        "documentation": {}
    },
    {
        "label": "URL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.llm_local.test.test",
        "description": "autoppia_iwa.modules.llm_local.test.test",
        "peekOfCode": "URL = \"http://127.0.0.1:6000/generate\"\npayload = {\n    \"input\": {\n        \"text\": \"Hello, how are you?\",\n        \"ctx\": 2048,\n        \"llm_kwargs\": {},\n        \"chat_completion_kwargs\": {},\n    }\n}\ndef test_generate_endpoint_working_200_OK():",
        "detail": "autoppia_iwa.modules.llm_local.test.test",
        "documentation": {}
    },
    {
        "label": "payload",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.llm_local.test.test",
        "description": "autoppia_iwa.modules.llm_local.test.test",
        "peekOfCode": "payload = {\n    \"input\": {\n        \"text\": \"Hello, how are you?\",\n        \"ctx\": 2048,\n        \"llm_kwargs\": {},\n        \"chat_completion_kwargs\": {},\n    }\n}\ndef test_generate_endpoint_working_200_OK():\n    \"\"\"",
        "detail": "autoppia_iwa.modules.llm_local.test.test",
        "documentation": {}
    },
    {
        "label": "generate_data",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.llm_local.run_local_llm",
        "description": "autoppia_iwa.modules.llm_local.run_local_llm",
        "peekOfCode": "def generate_data(\n    model_path: str,\n    message_payload: List[Dict[str, str]],\n    ctx: int,\n    llm_kwargs: dict = None,\n    chat_completion_kwargs: dict = None,\n) -> str:\n    \"\"\"\n    Generate data using the Llama model.\n    :param model_path: Path to the Llama model file.",
        "detail": "autoppia_iwa.modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.llm_local.run_local_llm",
        "description": "autoppia_iwa.modules.llm_local.run_local_llm",
        "peekOfCode": "def handler():\n    \"\"\"\n    Handle incoming POST requests to generate data using the model.\n    :return: A JSON response containing the output or error message.\n    \"\"\"\n    try:\n        inputs = request.json\n        message_payload = inputs.get(\"input\", {}).get(\"text\", \"\")\n        ctx = int(inputs.get(\"input\", {}).get(\"ctx\", 32768))\n        if not message_payload:",
        "detail": "autoppia_iwa.modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.llm_local.run_local_llm",
        "description": "autoppia_iwa.modules.llm_local.run_local_llm",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nMODEL_PATH = \"qwen2.5-coder-14b-instruct-q4_k_m.gguf\"\ndef generate_data(\n    model_path: str,\n    message_payload: List[Dict[str, str]],\n    ctx: int,\n    llm_kwargs: dict = None,",
        "detail": "autoppia_iwa.modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.llm_local.run_local_llm",
        "description": "autoppia_iwa.modules.llm_local.run_local_llm",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nMODEL_PATH = \"qwen2.5-coder-14b-instruct-q4_k_m.gguf\"\ndef generate_data(\n    model_path: str,\n    message_payload: List[Dict[str, str]],\n    ctx: int,\n    llm_kwargs: dict = None,\n    chat_completion_kwargs: dict = None,\n) -> str:",
        "detail": "autoppia_iwa.modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "MODEL_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.llm_local.run_local_llm",
        "description": "autoppia_iwa.modules.llm_local.run_local_llm",
        "peekOfCode": "MODEL_PATH = \"qwen2.5-coder-14b-instruct-q4_k_m.gguf\"\ndef generate_data(\n    model_path: str,\n    message_payload: List[Dict[str, str]],\n    ctx: int,\n    llm_kwargs: dict = None,\n    chat_completion_kwargs: dict = None,\n) -> str:\n    \"\"\"\n    Generate data using the Llama model.",
        "detail": "autoppia_iwa.modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0001_initial",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0009_alter_user_last_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0002_auto_20190326_1754",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0002_auto_20190326_1754",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterModelManagers(\n            name='user',\n            managers=[\n                ('objects', accounts.managers.UserManager()),\n            ],",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0002_auto_20190326_1754",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0003_alter_user_first_name",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0003_alter_user_first_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0002_auto_20190326_1754\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"user\",\n            name=\"first_name\",\n            field=models.CharField(\n                blank=True, max_length=150, verbose_name=\"first name\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0003_alter_user_first_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0004_alter_user_id",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0004_alter_user_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0003_alter_user_first_name\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"user\",\n            name=\"id\",\n            field=models.BigAutoField(\n                auto_created=True, primary_key=True, serialize=False, verbose_name=\"ID\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0004_alter_user_id",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.apps",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    name = 'accounts'",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.apps",
        "documentation": {}
    },
    {
        "label": "EmployeeRegistrationForm",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "peekOfCode": "class EmployeeRegistrationForm(UserCreationForm):\n    # gender = forms.MultipleChoiceField(widget=forms.CheckboxSelectMultiple, choices=GENDER_CHOICES)\n    def __init__(self, *args, **kwargs):\n        self.request = kwargs.pop('request', None)\n        super().__init__(*args, **kwargs)\n        # Update field attributes\n        self.fields['gender'].required = True\n        self.fields['first_name'].label = \"First Name\"\n        self.fields['last_name'].label = \"Last Name\"\n        self.fields['password1'].label = \"Password\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "documentation": {}
    },
    {
        "label": "EmployerRegistrationForm",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "peekOfCode": "class EmployerRegistrationForm(UserCreationForm):\n    def __init__(self, *args, **kwargs):\n        self.request = kwargs.pop('request', None)\n        super().__init__(*args, **kwargs)\n        # Update field attributes\n        self.fields['first_name'].label = \"Company Name\"\n        self.fields['last_name'].label = \"Company Address\"\n        self.fields['password1'].label = \"Password\"\n        self.fields['password2'].label = \"Confirm Password\"\n        self.fields['first_name'].widget.attrs.update({'placeholder': 'Enter Company Name'})",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "documentation": {}
    },
    {
        "label": "UserLoginForm",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "peekOfCode": "class UserLoginForm(forms.Form):\n    email = forms.EmailField()\n    password = forms.CharField(\n        label=\"Password\",\n        strip=False,\n        widget=forms.PasswordInput,\n    )\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.user = None",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "documentation": {}
    },
    {
        "label": "EmployeeProfileUpdateForm",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "peekOfCode": "class EmployeeProfileUpdateForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        self.request = kwargs.pop('request', None)\n        super().__init__(*args, **kwargs)\n        self.fields['first_name'].widget.attrs.update({'placeholder': 'Enter First Name'})\n        self.fields['last_name'].widget.attrs.update({'placeholder': 'Enter Last Name'})\n    class Meta:\n        model = User\n        fields = [\"first_name\", \"last_name\", \"gender\"]\n    def save(self, commit=True):",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "documentation": {}
    },
    {
        "label": "GENDER_CHOICES",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "peekOfCode": "GENDER_CHOICES = (\n    ('male', 'Male'),\n    ('female', 'Female')\n)\nclass EmployeeRegistrationForm(UserCreationForm):\n    # gender = forms.MultipleChoiceField(widget=forms.CheckboxSelectMultiple, choices=GENDER_CHOICES)\n    def __init__(self, *args, **kwargs):\n        self.request = kwargs.pop('request', None)\n        super().__init__(*args, **kwargs)\n        # Update field attributes",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.managers",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.managers",
        "peekOfCode": "class UserManager(BaseUserManager):\n    \"\"\"Define a model manager for User model with no username field.\"\"\"\n    use_in_migrations = True\n    def _create_user(self, email, password, **extra_fields):\n        \"\"\"Create and save a User with the given email and password.\"\"\"\n        if not email:\n            raise ValueError('The given email must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.managers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.models",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.models",
        "peekOfCode": "class User(AbstractUser):\n    username = None\n    role = models.CharField(max_length=12, error_messages={\n        'required': \"Role must be provided\"\n    })\n    gender = models.CharField(max_length=10, blank=True, null=True, default=\"\")\n    email = models.EmailField(unique=True, blank=False,\n                              error_messages={\n                                  'unique': \"A user with that email already exists.\",\n                              })",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.models",
        "documentation": {}
    },
    {
        "label": "GENDER_CHOICES",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.models",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.models",
        "peekOfCode": "GENDER_CHOICES = (\n    ('male', 'Male'),\n    ('female', 'Female'))\nclass User(AbstractUser):\n    username = None\n    role = models.CharField(max_length=12, error_messages={\n        'required': \"Role must be provided\"\n    })\n    gender = models.CharField(max_length=10, blank=True, null=True, default=\"\")\n    email = models.EmailField(unique=True, blank=False,",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.urls",
        "peekOfCode": "app_name = \"accounts\"\nurlpatterns = [\n                  path('employee/register', RegisterEmployeeView.as_view(), name='employee-register'),\n                  path('employer/register', RegisterEmployerView.as_view(), name='employer-register'),\n                  path('employee/profile/update', EditProfileView.as_view(), name='employer-profile-update'),\n                  path('logout', LogoutView.as_view(), name='logout'),\n                  path('login', LoginView.as_view(), name='login'),\n              ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.urls",
        "peekOfCode": "urlpatterns = [\n                  path('employee/register', RegisterEmployeeView.as_view(), name='employee-register'),\n                  path('employer/register', RegisterEmployerView.as_view(), name='employer-register'),\n                  path('employee/profile/update', EditProfileView.as_view(), name='employer-profile-update'),\n                  path('logout', LogoutView.as_view(), name='logout'),\n                  path('login', LoginView.as_view(), name='login'),\n              ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.urls",
        "documentation": {}
    },
    {
        "label": "BaseRegistrationView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "peekOfCode": "class BaseRegistrationView(CreateView):\n    model = User\n    success_url = reverse_lazy('accounts:login')\n    extra_context = {'title': 'Register'}\n    def dispatch(self, request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return redirect(self.success_url)\n        return super().dispatch(request, *args, **kwargs)\n    def post(self, request, *args, **kwargs):\n        form = self.form_class(request.POST)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "documentation": {}
    },
    {
        "label": "RegisterEmployeeView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "peekOfCode": "class RegisterEmployeeView(BaseRegistrationView):\n    form_class = EmployeeRegistrationForm\n    template_name = 'accounts/employee/register.html'\n    def post_event(self, user):\n        web_agent_id = self.request.headers.get(\"X-WebAgent-Id\")\n        create_event(user=user, event_type='profile_update', description='Employee profile created', web_agent_id=web_agent_id)\nclass RegisterEmployerView(BaseRegistrationView):\n    form_class = EmployerRegistrationForm\n    template_name = 'accounts/employer/register.html'\n    def post_event(self, user):",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "documentation": {}
    },
    {
        "label": "RegisterEmployerView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "peekOfCode": "class RegisterEmployerView(BaseRegistrationView):\n    form_class = EmployerRegistrationForm\n    template_name = 'accounts/employer/register.html'\n    def post_event(self, user):\n        web_agent_id = self.request.headers.get(\"X-WebAgent-Id\")\n        create_event(user=user, event_type='profile_update', description='Employer profile created', web_agent_id=web_agent_id)\nclass LoginView(FormView):\n    \"\"\"\n    Provides the ability to login as a user with an email and password.\n    \"\"\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "peekOfCode": "class LoginView(FormView):\n    \"\"\"\n    Provides the ability to login as a user with an email and password.\n    \"\"\"\n    success_url = '/'\n    form_class = UserLoginForm\n    template_name = 'accounts/login.html'\n    extra_context = {'title': 'Login'}\n    def dispatch(self, request, *args, **kwargs):\n        if request.user.is_authenticated:",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "peekOfCode": "class LogoutView(RedirectView):\n    \"\"\"\n    Provides users the ability to logout.\n    \"\"\"\n    url = '/login'\n    def get(self, request, *args, **kwargs):\n        web_agent_id = request.headers.get(\"X-WebAgent-Id\")\n        create_event(user=request.user, event_type='logout', description='User logged out', web_agent_id=web_agent_id)\n        auth.logout(request)\n        messages.success(request, 'You are now logged out')",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0001_initial",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Event\",\n            fields=[\n                (",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0002_alter_event_event_type",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0002_alter_event_event_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"events\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"event\",\n            name=\"event_type\",\n            field=models.CharField(\n                choices=[",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0002_alter_event_event_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0003_event_web_agent_id",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0003_event_web_agent_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"events\", \"0002_alter_event_event_type\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"event\",\n            name=\"web_agent_id\",\n            field=models.CharField(blank=True, max_length=100, null=True),\n        ),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0003_event_web_agent_id",
        "documentation": {}
    },
    {
        "label": "EventsConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.apps",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.apps",
        "peekOfCode": "class EventsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"events\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.apps",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.events",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.events",
        "peekOfCode": "EVENTS_ALLOWED = [\n    \"registration\",\n    \"login\",\n    \"logout\",\n    \"password_change\",\n    \"profile_update\",\n    \"job_application\",\n    \"job_post_creation\",\n    \"job_post_update\",\n    \"job_post_deletion\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.events",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.models",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.models",
        "peekOfCode": "class Event(models.Model):\n    EVENT_TYPES = [\n        ('registration', 'User Registration'),\n        ('login', 'User Login'),\n        ('logout', 'User Logout'),\n        ('password_change', 'Password Change'),\n        ('profile_update', 'Profile Update'),\n        ('job_application', 'Job Application'),\n        ('job_post_creation', 'Job Post Creation'),\n        ('job_post_update', 'Job Post Update'),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.models",
        "documentation": {}
    },
    {
        "label": "EventSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.serializers",
        "peekOfCode": "class EventSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Event\n        fields = '__all__'",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"events/list/\", get_events, name=\"event-list\"),\n    path(\"events/my/\", my_events, name=\"my_events\"),\n    path(\"events/reset/\", reset_events, name=\"reset_events\"),\n    path(\"events/add/\", add_event, name=\"add_events\"),\n]",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.urls",
        "documentation": {}
    },
    {
        "label": "create_event",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.utils",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.utils",
        "peekOfCode": "def create_event(user, event_type, description, data=None, web_agent_id=None):\n    \"\"\"\n    Create an event in the database.\n    Args:\n        user (User): The user associated with the event (can be None).\n        event_type (str): The type of the event (must be one of Event.EVENT_TYPES).\n        description (str): A brief description of the event.\n        data (dict): Additional data to store with the event.\n    \"\"\"\n    Event.objects.create(",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.utils",
        "documentation": {}
    },
    {
        "label": "get_events",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "peekOfCode": "def get_events(request):\n    \"\"\"\n    Fetch events for the web_agent identified by the provided `web_agent_id`.\n    \"\"\"\n    web_agent_id = request.headers.get(\"X-WebAgent-Id\")  # Retrieve web_agent_id from query params\n    if not web_agent_id:\n        return Response({\"error\": \"X-WebAgent-Id is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n    events = Event.objects.filter(web_agent_id=web_agent_id).order_by(\"-created_at\")\n    serializer = EventSerializer(events, many=True)\n    return Response(serializer.data)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "documentation": {}
    },
    {
        "label": "my_events",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "peekOfCode": "def my_events(request):\n    \"\"\"\n    Get all my events\n    \"\"\"\n    # user = request.user\n    # user_email = request.data.get(\"user_email\")\n    # user = User.objects.get(email=user_email)\n    events = Event.objects.order_by(\"-created_at\")\n    serializer = EventSerializer(events, many=True)\n    return Response(serializer.data)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "documentation": {}
    },
    {
        "label": "reset_events",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "peekOfCode": "def reset_events(request):\n    \"\"\"\n    Delete Events\n    \"\"\"\n    web_agent_id = request.headers.get(\"X-WebAgent-Id\")\n    if not web_agent_id:\n        return Response({\"error\": \"X-WebAgent-Id is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n    Event.objects.filter(web_agent_id=web_agent_id).delete()\n    return Response(\n        {\"message\": f\"Events for web_agent '{web_agent_id}' have been deleted successfully.\"},",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "documentation": {}
    },
    {
        "label": "add_event",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "peekOfCode": "def add_event(request):\n    \"\"\"\n    Add a new event to the database.\n    Expected JSON payload:\n    {\n        \"web_agent_id\": \"example-webAgent-id\",\n        \"event_type\": \"example-event-type\",\n        \"event_data\": { ... }  # JSON object with event-specific data\n    }\n    \"\"\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parents[1]\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get(\"SECRET_KEY\", \"fallback-insecure-key\")\nDEBUG = os.environ.get(\"DEBUG\", \"True\") == \"True\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"job_portal_test_bittensor\"),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get(\"SECRET_KEY\", \"fallback-insecure-key\")\nDEBUG = os.environ.get(\"DEBUG\", \"True\") == \"True\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"job_portal_test_bittensor\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"postgres\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "DEBUG = os.environ.get(\"DEBUG\", \"True\") == \"True\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"job_portal_test_bittensor\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"postgres\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),\n    }",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"job_portal_test_bittensor\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"postgres\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),\n    }\n}",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"jobsapp\",\n    \"accounts\",\n    \"rest_framework\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"whitenoise.middleware.WhiteNoiseMiddleware\",\n]",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "ROOT_URLCONF = \"jobs.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "WSGI_APPLICATION = \"jobs.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/2.1/ref/settings/#databases\n# DATABASES = {\n#     \"default\": {\n#         \"ENGINE\": \"django.db.backends.sqlite3\",\n#         \"NAME\": BASE_DIR / \"job_portal.sqlite3\",\n#     }\n# }\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Password validation\n# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    # {\n    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    # },\n    # {\n    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    # },",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    # {\n    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    # },\n    # {\n    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    # },\n    # {\n    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    # },",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nALLOWED_HOSTS = [\"django-portal.herokuapp.com\", \"localhost\", \"*\"]\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nALLOWED_HOSTS = [\"django-portal.herokuapp.com\", \"localhost\", \"*\"]\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nALLOWED_HOSTS = [\"django-portal.herokuapp.com\", \"localhost\", \"*\"]\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nALLOWED_HOSTS = [\"django-portal.herokuapp.com\", \"localhost\", \"*\"]\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nALLOWED_HOSTS = [\"django-portal.herokuapp.com\", \"localhost\", \"*\"]\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_STORAGE = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"django-portal.herokuapp.com\", \"localhost\", \"*\"]\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_STORAGE = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_STORAGE = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_STORAGE = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_STORAGE = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_STORAGE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "STATICFILES_STORAGE = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"API Docs\",\n        default_version=\"v1\",\n        description=\"\"\"An Online Job Portal Project in Django is a platform for job seekers to find appropriate jobs while companies can publish their vacancies and find good candidates.\nJobseekers can:\n1. Post their resumes.\n2. Browse for job searches.\n3. View personal work listings.\nCompanies can:",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"jobsapp.urls\")),\n    path(\"\", include(\"accounts.urls\")),\n    path(\n        \"api/\", include(\"events.urls\")\n    ),  # Incluye las URLs de la aplicación de eventos\n    re_path(\n        r\"^swagger(?P<format>\\.json|\\.yaml)$\",\n        schema_view.without_ui(cache_timeout=0),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.wsgi",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.wsgi",
        "peekOfCode": "application = get_wsgi_application()\napplication = WhiteNoise(application)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.wsgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.wsgi",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.wsgi",
        "peekOfCode": "application = WhiteNoise(application)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobs.wsgi",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.management.commands.seed_db",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.management.commands.seed_db",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Seeds the database with initial data.\"\n    def handle(self, *args, **options):\n        reset_database()\n        self.stdout.write(self.style.SUCCESS(\"Database seeded successfully.\"))",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.management.commands.seed_db",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0001_initial",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('accounts', '0002_auto_20190326_1754'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Job',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0002_auto_20190405_1920",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0002_auto_20190405_1920",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('jobsapp', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='job',\n            name='type',\n            field=models.CharField(choices=[('1', 'Full time'), ('2', 'Part time'), ('3', 'Internship')],\n                                   max_length=10),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0002_auto_20190405_1920",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0003_job_created_at",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0003_job_created_at",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('jobsapp', '0002_auto_20190405_1920'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='job',\n            name='created_at',\n            field=models.DateTimeField(default=django.utils.timezone.now),\n        ),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0003_job_created_at",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0004_job_filled",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0004_job_filled",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('jobsapp', '0003_job_created_at'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='job',\n            name='filled',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0004_job_filled",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0005_applicant",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0005_applicant",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0002_auto_20190326_1754'),\n        ('jobsapp', '0004_job_filled'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Applicant',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0005_applicant",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0006_auto_20190408_2005",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0006_auto_20190408_2005",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('jobsapp', '0005_applicant'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='applicant',\n            name='job',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applicants',\n                                    to='jobsapp.Job'),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0006_auto_20190408_2005",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0007_alter_applicant_id_alter_job_id",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0007_alter_applicant_id_alter_job_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"jobsapp\", \"0006_auto_20190408_2005\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"applicant\",\n            name=\"id\",\n            field=models.BigAutoField(\n                auto_created=True, primary_key=True, serialize=False, verbose_name=\"ID\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0007_alter_applicant_id_alter_job_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0008_contact_job_salary",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0008_contact_job_salary",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('jobsapp', '0007_alter_applicant_id_alter_job_id'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Contact',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0008_contact_job_salary",
        "documentation": {}
    },
    {
        "label": "is_already_applied",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.templatetags.is_already_applied",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.templatetags.is_already_applied",
        "peekOfCode": "def is_already_applied(job, user):\n    applied = Applicant.objects.filter(job=job, user=user)\n    if applied:\n        return True\n    else:\n        return False",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.templatetags.is_already_applied",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.templatetags.is_already_applied",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.templatetags.is_already_applied",
        "peekOfCode": "register = template.Library()\n@register.simple_tag(name='is_already_applied')\ndef is_already_applied(job, user):\n    applied = Applicant.objects.filter(job=job, user=user)\n    if applied:\n        return True\n    else:\n        return False",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.templatetags.is_already_applied",
        "documentation": {}
    },
    {
        "label": "EditProfileView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employee",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employee",
        "peekOfCode": "class EditProfileView(UpdateView):\n    model = User\n    form_class = EmployeeProfileUpdateForm\n    context_object_name = 'employee'\n    template_name = 'jobs/employee/edit-profile.html'\n    success_url = reverse_lazy('accounts:employer-profile-update')\n    @method_decorator(login_required(login_url=reverse_lazy('accounts:login')))\n    @method_decorator(user_is_employee)\n    def dispatch(self, request, *args, **kwargs):\n        return super().dispatch(self.request, *args, **kwargs)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employee",
        "documentation": {}
    },
    {
        "label": "DashboardView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "peekOfCode": "class DashboardView(ListView):\n    model = Job\n    template_name = 'jobs/employer/dashboard.html'\n    context_object_name = 'jobs'\n    def get_queryset(self):\n        return self.model.objects.filter(user_id=self.request.user.id)\n@method_decorator([login_required(login_url=reverse_lazy('accounts:login')), user_is_employer], name='dispatch')\nclass ApplicantPerJobView(ListView):\n    model = Applicant\n    template_name = 'jobs/employer/applicants.html'",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "documentation": {}
    },
    {
        "label": "ApplicantPerJobView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "peekOfCode": "class ApplicantPerJobView(ListView):\n    model = Applicant\n    template_name = 'jobs/employer/applicants.html'\n    context_object_name = 'applicants'\n    paginate_by = 10\n    def get_queryset(self):\n        return Applicant.objects.filter(job_id=self.kwargs['job_id']).order_by('id')\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['job'] = get_object_or_404(Job, id=self.kwargs['job_id'])",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "documentation": {}
    },
    {
        "label": "JobCreateView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "peekOfCode": "class JobCreateView(CreateView):\n    template_name = 'jobs/create.html'\n    form_class = CreateJobForm\n    extra_context = {\n        'title': 'Post New Job'\n    }\n    success_url = reverse_lazy('jobs:employer-dashboard')\n    @method_decorator(login_required(login_url=reverse_lazy('accounts:login')))\n    def dispatch(self, request, *args, **kwargs):\n        if not self.request.user.is_authenticated:",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "documentation": {}
    },
    {
        "label": "ApplicantsListView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "peekOfCode": "class ApplicantsListView(ListView):\n    model = Applicant\n    template_name = 'jobs/employer/all-applicants.html'\n    context_object_name = 'applicants'\n    def get_queryset(self):\n        # jobs = Job.objects.filter(user_id=self.request.user.id)\n        return self.model.objects.filter(job__user_id=self.request.user.id)\n@login_required(login_url=reverse_lazy('accounts:login'))\ndef filled(request, job_id=None):\n    job = get_object_or_404(Job, user_id=request.user.id, id=job_id)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "documentation": {}
    },
    {
        "label": "filled",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "peekOfCode": "def filled(request, job_id=None):\n    job = get_object_or_404(Job, user_id=request.user.id, id=job_id)\n    job.filled = True\n    job.save()\n    # Use the create_event utility function\n    create_event(\n        event_type='job_post_update',\n        description=f\"Job post '{job.title}' marked as filled.\",\n        user=request.user,\n        data={'job_id': job.id, 'title': job.title},",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "documentation": {}
    },
    {
        "label": "HomeView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class HomeView(ListView):\n    model = Job\n    template_name = 'home.html'\n    context_object_name = 'jobs'\n    def get_queryset(self):\n        return self.model.objects.all()[:6]\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['trendings'] = self.model.objects.filter(created_at__month=timezone.now().month)[:3]\n        # Log event for home page view",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "SearchView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class SearchView(ListView):\n    model = Job\n    template_name = 'jobs/search.html'\n    context_object_name = 'jobs'\n    def get_queryset(self):\n        location = self.request.GET.get('location', '')\n        position = self.request.GET.get('position', '')\n        queryset = self.model.objects.filter(location__icontains=location, title__icontains=position)\n        # Log event for search\n        if self.request.user.is_authenticated:",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "JobListView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class JobListView(ListView):\n    model = Job\n    template_name = 'jobs/jobs.html'\n    context_object_name = 'jobs'\n    paginate_by = 5\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        # Log event for job list view\n        if self.request.user.is_authenticated:\n            create_event(",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "JobDetailsView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class JobDetailsView(DetailView):\n    model = Job\n    template_name = 'jobs/details.html'\n    context_object_name = 'job'\n    pk_url_kwarg = 'id'\n    def get_object(self, queryset=None):\n        obj = super(JobDetailsView, self).get_object(queryset=queryset)\n        if obj is None:\n            raise Http404(\"Job doesn't exist\")\n        return obj",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "ApplyJobView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class ApplyJobView(CreateView):\n    model = Applicant\n    form_class = ApplyJobForm\n    slug_field = 'job_id'\n    slug_url_kwarg = 'job_id'\n    def post(self, request, *args, **kwargs):\n        form = self.get_form()\n        if form.is_valid():\n            messages.info(self.request, 'Successfully applied for the job!')\n            return self.form_valid(form)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "ContactView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class ContactView(View):\n    def get(self, request):\n        form = ContactForm()\n        return render(request, 'jobs/contact.html', {'form': form})\n    def post(self, request):\n        form = ContactForm(request.POST)\n        if form.is_valid():\n            # Process the form data\n            form.save()\n            return render(request, 'jobs/contact.html', {'form': form, 'success': True})",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "AboutView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class AboutView(TemplateView):\n    template_name = \"jobs/about.html\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "reset_seed",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.reset_events",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.reset_events",
        "peekOfCode": "def reset_seed(request):\n    \"\"\"Endpoint to reset the database and seed initial data.\"\"\"\n    if request.method == \"POST\":\n        try:\n            reset_database()\n            return JsonResponse({\"status\": \"success\", \"message\": \"Database reset and seeded successfully.\"}, status=200)\n        except Exception as e:\n            return JsonResponse({\"status\": \"error\", \"message\": str(e)}, status=500)\n    return JsonResponse({\"status\": \"error\", \"message\": \"Invalid request method.\"}, status=405)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.reset_events",
        "documentation": {}
    },
    {
        "label": "JobsAppConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.apps",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.apps",
        "peekOfCode": "class JobsAppConfig(AppConfig):\n    name = 'jobsapp'",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.apps",
        "documentation": {}
    },
    {
        "label": "user_is_employer",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.decorators",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.decorators",
        "peekOfCode": "def user_is_employer(function):\n    def wrap(request, *args, **kwargs):\n        user = request.user\n        if user.role == 'employer':\n            return function(request, *args, **kwargs)\n        else:\n            raise PermissionDenied\n    return wrap\ndef user_is_employee(function):\n    def wrap(request, *args, **kwargs):",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.decorators",
        "documentation": {}
    },
    {
        "label": "user_is_employee",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.decorators",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.decorators",
        "peekOfCode": "def user_is_employee(function):\n    def wrap(request, *args, **kwargs):\n        user = request.user\n        if user.role == 'employee':\n            return function(request, *args, **kwargs)\n        else:\n            raise PermissionDenied\n    return wrap",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.decorators",
        "documentation": {}
    },
    {
        "label": "CreateJobForm",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "peekOfCode": "class CreateJobForm(forms.ModelForm):\n    class Meta:\n        model = Job\n        exclude = ('user', 'created_at',)\n    def is_valid(self):\n        valid = super(CreateJobForm, self).is_valid()\n        # if already valid, then return True\n        if valid:\n            return valid\n        return valid",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "documentation": {}
    },
    {
        "label": "ApplyJobForm",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "peekOfCode": "class ApplyJobForm(forms.ModelForm):\n    class Meta:\n        model = Applicant\n        fields = ('job',)\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = Contact\n        fields = ['name', 'email', 'subject', 'message']\n        widgets = {\n            'message': forms.Textarea(attrs={'rows': 5}),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "peekOfCode": "class ContactForm(forms.ModelForm):\n    class Meta:\n        model = Contact\n        fields = ['name', 'email', 'subject', 'message']\n        widgets = {\n            'message': forms.Textarea(attrs={'rows': 5}),\n        }",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "peekOfCode": "class Job(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    title = models.CharField(max_length=300)\n    description = models.TextField()\n    location = models.CharField(max_length=150)\n    type = models.CharField(choices=JOB_TYPE, max_length=10)\n    category = models.CharField(max_length=100)\n    last_date = models.DateTimeField()\n    company_name = models.CharField(max_length=100)\n    company_description = models.CharField(max_length=300)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Applicant",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "peekOfCode": "class Applicant(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    job = models.ForeignKey(Job, on_delete=models.CASCADE, related_name='applicants')\n    created_at = models.DateTimeField(default=timezone.now)\n    def __str__(self):\n        return self.user.get_full_name()\nclass Contact(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    subject = models.CharField(max_length=150)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Contact",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "peekOfCode": "class Contact(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    subject = models.CharField(max_length=150)\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.subject",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "documentation": {}
    },
    {
        "label": "JOB_TYPE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "peekOfCode": "JOB_TYPE = (\n    ('1', \"Full time\"),\n    ('2', \"Part time\"),\n    ('3', \"Internship\"),\n)\nclass Job(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    title = models.CharField(max_length=300)\n    description = models.TextField()\n    location = models.CharField(max_length=150)",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.reset_seed",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.reset_seed",
        "peekOfCode": "def reset_database():\n    \"\"\"Reset the database state and re-seed with initial data.\"\"\"\n    # Clear the jobs table\n    Job.objects.all().delete()\n    Event.objects.all().delete()\n    print(\"All jobs deleted successfully.\")\n    # Get or create an admin user\n    user, created = User.objects.get_or_create(\n        email=\"admin@jobsapp.com\",\n        defaults={",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.reset_seed",
        "documentation": {}
    },
    {
        "label": "base_dir",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.reset_seed",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.reset_seed",
        "peekOfCode": "base_dir = Path(__file__).resolve().parent\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jobs.settings')\ndjango.setup()\nfrom jobsapp.models import Job\nfrom accounts.models import User\ndef reset_database():\n    \"\"\"Reset the database state and re-seed with initial data.\"\"\"\n    # Clear the jobs table\n    Job.objects.all().delete()\n    Event.objects.all().delete()",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.reset_seed",
        "documentation": {}
    },
    {
        "label": "JobSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.serializers",
        "peekOfCode": "class JobSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for Job model.\n    Fields:\n        - id: Integer, unique identifier for the job.\n        - title: String, title of the job.\n        - description: Text, detailed description of the job.\n        - location: String, location where the job is based.\n        - salary: Decimal, salary for the job.\n        - created_at: DateTime, timestamp when the job was created.",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.serializers",
        "documentation": {}
    },
    {
        "label": "ApplicantSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.serializers",
        "peekOfCode": "class ApplicantSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for Applicant model.\n    Fields:\n        - id: Integer, unique identifier for the applicant.\n        - job: ForeignKey, reference to the job being applied for.\n        - user: ForeignKey, reference to the user applying for the job.\n        - resume: File, resume of the applicant.\n        - cover_letter: Text, cover letter from the applicant.\n        - applied_at: DateTime, timestamp when the application was submitted.",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "peekOfCode": "app_name = \"jobs\"\nrouter = DefaultRouter()\nrouter.register(r'jobs', JobViewSet)\nrouter.register(r'applicants', ApplicantViewSet)\nurlpatterns = [\n    path('', RedirectView.as_view(url='/home', permanent=True), name='redirect-to-home'),  # Redirige / a /home\n    path('home', HomeView.as_view(), name='home'), path('search', SearchView.as_view(), name='search'),\n    path('contact/', ContactView.as_view(), name='contact'),\n    path('about/', AboutView.as_view(), name='about'),\n    path(\"reset_seed/\", reset_seed, name=\"reset_seed\"),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'jobs', JobViewSet)\nrouter.register(r'applicants', ApplicantViewSet)\nurlpatterns = [\n    path('', RedirectView.as_view(url='/home', permanent=True), name='redirect-to-home'),  # Redirige / a /home\n    path('home', HomeView.as_view(), name='home'), path('search', SearchView.as_view(), name='search'),\n    path('contact/', ContactView.as_view(), name='contact'),\n    path('about/', AboutView.as_view(), name='about'),\n    path(\"reset_seed/\", reset_seed, name=\"reset_seed\"),\n    path('employer/dashboard', include([",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "peekOfCode": "urlpatterns = [\n    path('', RedirectView.as_view(url='/home', permanent=True), name='redirect-to-home'),  # Redirige / a /home\n    path('home', HomeView.as_view(), name='home'), path('search', SearchView.as_view(), name='search'),\n    path('contact/', ContactView.as_view(), name='contact'),\n    path('about/', AboutView.as_view(), name='about'),\n    path(\"reset_seed/\", reset_seed, name=\"reset_seed\"),\n    path('employer/dashboard', include([\n        path('', DashboardView.as_view(), name='employer-dashboard'),\n        path('all-applicants', ApplicantsListView.as_view(), name='employer-all-applicants'),\n        path('applicants/<int:job_id>', ApplicantPerJobView.as_view(), name='employer-dashboard-applicants'),",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "documentation": {}
    },
    {
        "label": "JobViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.viewsets",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.viewsets",
        "peekOfCode": "class JobViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A viewset for viewing and editing job instances.\n    Provides endpoints:\n        - GET /jobs/: Retrieve a list of jobs.\n        - POST /jobs/: Create a new job.\n        - GET /jobs/{id}/: Retrieve a job by ID.\n        - PUT /jobs/{id}/: Update a job by ID.\n        - PATCH /jobs/{id}/: Partially update a job by ID.\n        - DELETE /jobs/{id}/: Delete a job by ID.",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.viewsets",
        "documentation": {}
    },
    {
        "label": "ApplicantViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.viewsets",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.viewsets",
        "peekOfCode": "class ApplicantViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A viewset for viewing and editing applicant instances.\n    Provides endpoints:\n        - GET /applicants/: Retrieve a list of applicants.\n        - POST /applicants/: Create a new applicant.\n        - GET /applicants/{id}/: Retrieve an applicant by ID.\n        - PUT /applicants/{id}/: Update an applicant by ID.\n        - PATCH /applicants/{id}/: Partially update an applicant by ID.\n        - DELETE /applicants/{id}/: Delete an applicant by ID.",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.jobsapp.viewsets",
        "documentation": {}
    },
    {
        "label": "DEMO_WEB_PROJECT_CONFIG",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.config",
        "description": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.config",
        "peekOfCode": "DEMO_WEB_PROJECT_CONFIG = {\n    \"name\" : \"Jobs Portal\",\n    \"events\" : EVENTS_ALLOWED\n}",
        "detail": "autoppia_iwa.modules.webs_demo.web_1_demo_django_jobs.config",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ROOT_DIR = Path(__file__).resolve(strict=True).parent.parent.parent\n# pythondjangocrud/\nAPPS_DIR = ROOT_DIR / \"pythondjangocrud\"\nenv = environ.Env()\n#READ_DOT_ENV_FILE = env.bool(\"DJANGO_READ_DOT_ENV_FILE\", default=False)\n#if READ_DOT_ENV_FILE:\n# OS environment variables take precedence over variables from .env\nenv.read_env(str(ROOT_DIR / \".env\"))\n# GENERAL\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "APPS_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "APPS_DIR = ROOT_DIR / \"pythondjangocrud\"\nenv = environ.Env()\n#READ_DOT_ENV_FILE = env.bool(\"DJANGO_READ_DOT_ENV_FILE\", default=False)\n#if READ_DOT_ENV_FILE:\n# OS environment variables take precedence over variables from .env\nenv.read_env(str(ROOT_DIR / \".env\"))\n# GENERAL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#debug\nDEBUG = env.bool(\"DJANGO_DEBUG\", False)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "env = environ.Env()\n#READ_DOT_ENV_FILE = env.bool(\"DJANGO_READ_DOT_ENV_FILE\", default=False)\n#if READ_DOT_ENV_FILE:\n# OS environment variables take precedence over variables from .env\nenv.read_env(str(ROOT_DIR / \".env\"))\n# GENERAL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#debug\nDEBUG = env.bool(\"DJANGO_DEBUG\", False)\n# Local time zone. Choices are",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "#READ_DOT_ENV_FILE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "#READ_DOT_ENV_FILE = env.bool(\"DJANGO_READ_DOT_ENV_FILE\", default=False)\n#if READ_DOT_ENV_FILE:\n# OS environment variables take precedence over variables from .env\nenv.read_env(str(ROOT_DIR / \".env\"))\n# GENERAL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#debug\nDEBUG = env.bool(\"DJANGO_DEBUG\", False)\n# Local time zone. Choices are\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "DEBUG = env.bool(\"DJANGO_DEBUG\", False)\n# Local time zone. Choices are\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# though not all of them may be available with every OS.\n# In Windows, this must be set to your system time zone.\nTIME_ZONE = \"UTC\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#language-code\nLANGUAGE_CODE = \"en-us\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#site-id\nSITE_ID = 1",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "TIME_ZONE = \"UTC\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#language-code\nLANGUAGE_CODE = \"en-us\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#site-id\nSITE_ID = 1\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-i18n\nUSE_I18N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-l10n\nUSE_L10N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#site-id\nSITE_ID = 1\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-i18n\nUSE_I18N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-l10n\nUSE_L10N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz\nUSE_TZ = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#locale-paths",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "SITE_ID = 1\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-i18n\nUSE_I18N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-l10n\nUSE_L10N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz\nUSE_TZ = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#locale-paths\nLOCALE_PATHS = [str(ROOT_DIR / \"locale\")]\n# DATABASES",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "USE_I18N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-l10n\nUSE_L10N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz\nUSE_TZ = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#locale-paths\nLOCALE_PATHS = [str(ROOT_DIR / \"locale\")]\n# DATABASES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#databases",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "USE_L10N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz\nUSE_TZ = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#locale-paths\nLOCALE_PATHS = [str(ROOT_DIR / \"locale\")]\n# DATABASES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#databases\nDATABASES = {\n    \"default\": env.db(\"DATABASE_URL\", default=\"postgres://postgres:12345678@localhost:5432/pythondjangocrud\")",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "USE_TZ = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#locale-paths\nLOCALE_PATHS = [str(ROOT_DIR / \"locale\")]\n# DATABASES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#databases\nDATABASES = {\n    \"default\": env.db(\"DATABASE_URL\", default=\"postgres://postgres:12345678@localhost:5432/pythondjangocrud\")\n}\nDATABASES[\"default\"][\"ATOMIC_REQUESTS\"] = True",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LOCALE_PATHS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "LOCALE_PATHS = [str(ROOT_DIR / \"locale\")]\n# DATABASES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#databases\nDATABASES = {\n    \"default\": env.db(\"DATABASE_URL\", default=\"postgres://postgres:12345678@localhost:5432/pythondjangocrud\")\n}\nDATABASES[\"default\"][\"ATOMIC_REQUESTS\"] = True\n# URLS\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "DATABASES = {\n    \"default\": env.db(\"DATABASE_URL\", default=\"postgres://postgres:12345678@localhost:5432/pythondjangocrud\")\n}\nDATABASES[\"default\"][\"ATOMIC_REQUESTS\"] = True\n# URLS\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#root-urlconf\nROOT_URLCONF = \"config.urls\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#wsgi-application\nWSGI_APPLICATION = \"config.wsgi.application\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DATABASES[\"default\"][\"ATOMIC_REQUESTS\"]",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "DATABASES[\"default\"][\"ATOMIC_REQUESTS\"] = True\n# URLS\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#root-urlconf\nROOT_URLCONF = \"config.urls\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#wsgi-application\nWSGI_APPLICATION = \"config.wsgi.application\"\n# APPS\n# ------------------------------------------------------------------------------\nDJANGO_APPS = [",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ROOT_URLCONF = \"config.urls\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#wsgi-application\nWSGI_APPLICATION = \"config.wsgi.application\"\n# APPS\n# ------------------------------------------------------------------------------\nDJANGO_APPS = [\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.sites\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "WSGI_APPLICATION = \"config.wsgi.application\"\n# APPS\n# ------------------------------------------------------------------------------\nDJANGO_APPS = [\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.sites\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DJANGO_APPS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "DJANGO_APPS = [\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.sites\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # \"django.contrib.humanize\", # Handy template tags\n    \"django.contrib.admin\",\n    \"django.forms\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "THIRD_PARTY_APPS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "THIRD_PARTY_APPS = [\n    \"crispy_forms\",\n    \"allauth\",\n    \"allauth.account\",\n    \"allauth.socialaccount\",\n    \"rest_framework\",\n    \"rest_framework.authtoken\",\n    \"corsheaders\",\n    \"drf_yasg\",\n    \"django_rest_passwordreset\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LOCAL_APPS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "LOCAL_APPS = [\n    \"pythondjangocrud.apps.users.apps.UsersConfig\",\n    \"pythondjangocrud.apps.employee.apps.EmployeeConfig\",\n    \"pythondjangocrud.apps.department.apps.DepartmentConfig\",\n    \"pythondjangocrud.apps.position.apps.PositionConfig\",\n    \"pythondjangocrud.apps.attendance.apps.AttendanceConfig\",\n    \"pythondjangocrud.apps.payroll.apps.PayrollConfig\",\n    \"pythondjangocrud.apps.events.apps.EventsConfig\",\n    # Your stuff: custom apps go here\n]",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS\n# MIGRATIONS\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#migration-modules\nMIGRATION_MODULES = {\"sites\": \"pythondjangocrud.contrib.sites.migrations\"}\n# AUTHENTICATION\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#authentication-backends\nAUTHENTICATION_BACKENDS = [\n    \"django.contrib.auth.backends.ModelBackend\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MIGRATION_MODULES",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "MIGRATION_MODULES = {\"sites\": \"pythondjangocrud.contrib.sites.migrations\"}\n# AUTHENTICATION\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#authentication-backends\nAUTHENTICATION_BACKENDS = [\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n]\n# https://docs.djangoproject.com/en/dev/ref/settings/#auth-user-model\nAUTH_USER_MODEL = \"users.User\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n]\n# https://docs.djangoproject.com/en/dev/ref/settings/#auth-user-model\nAUTH_USER_MODEL = \"users.User\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#login-redirect-url\n# LOGIN_REDIRECT_URL = \"users:redirect\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#login-url\n# LOGIN_URL = \"account_login\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "AUTH_USER_MODEL = \"users.User\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#login-redirect-url\n# LOGIN_REDIRECT_URL = \"users:redirect\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#login-url\n# LOGIN_URL = \"account_login\"\n# PASSWORDS\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers\nPASSWORD_HASHERS = [\n    # https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "PASSWORD_HASHERS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "PASSWORD_HASHERS = [\n    # https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django\n    \"django.contrib.auth.hashers.Argon2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\",\n    \"django.contrib.auth.hashers.BCryptSHA256PasswordHasher\",\n]\n# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\"\n    },\n    {\"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\"},\n    {\"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\"},\n    {\"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\"},\n]\n# MIDDLEWARE\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",\n    # \"whitenoise.middleware.WhiteNoiseMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.locale.LocaleMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "STATIC_ROOT = str(ROOT_DIR / \"staticfiles\")\n# https://docs.djangoproject.com/en/dev/ref/settings/#static-url\nSTATIC_URL = \"/static/\"\n# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS\nSTATICFILES_DIRS = [str(APPS_DIR / \"static\")]\n# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders\nSTATICFILES_FINDERS = [\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n]",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "STATIC_URL = \"/static/\"\n# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS\nSTATICFILES_DIRS = [str(APPS_DIR / \"static\")]\n# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders\nSTATICFILES_FINDERS = [\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n]\n# MEDIA\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "STATICFILES_DIRS = [str(APPS_DIR / \"static\")]\n# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders\nSTATICFILES_FINDERS = [\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n]\n# MEDIA\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#media-root\nMEDIA_ROOT = str(APPS_DIR / \"media\")",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATICFILES_FINDERS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "STATICFILES_FINDERS = [\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n]\n# MEDIA\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#media-root\nMEDIA_ROOT = str(APPS_DIR / \"media\")\n# https://docs.djangoproject.com/en/dev/ref/settings/#media-url\nMEDIA_URL = \"/media/\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "MEDIA_ROOT = str(APPS_DIR / \"media\")\n# https://docs.djangoproject.com/en/dev/ref/settings/#media-url\nMEDIA_URL = \"/media/\"\n# TEMPLATES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#templates\nTEMPLATES = [\n    {\n        # https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TEMPLATES-BACKEND\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "MEDIA_URL = \"/media/\"\n# TEMPLATES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#templates\nTEMPLATES = [\n    {\n        # https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TEMPLATES-BACKEND\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        # https://docs.djangoproject.com/en/dev/ref/settings/#template-dirs\n        \"DIRS\": [str(APPS_DIR / \"templates\")],",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "TEMPLATES = [\n    {\n        # https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TEMPLATES-BACKEND\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        # https://docs.djangoproject.com/en/dev/ref/settings/#template-dirs\n        \"DIRS\": [str(APPS_DIR / \"templates\")],\n        \"OPTIONS\": {\n            # https://docs.djangoproject.com/en/dev/ref/settings/#template-loaders\n            # https://docs.djangoproject.com/en/dev/ref/templates/api/#loader-types\n            \"loaders\": [",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "FORM_RENDERER",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "FORM_RENDERER = \"django.forms.renderers.TemplatesSetting\"\n# http://django-crispy-forms.readthedocs.io/en/latest/install.html#template-packs\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\n# FIXTURES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#fixture-dirs\nFIXTURE_DIRS = (str(APPS_DIR / \"fixtures\"),)\n# SECURITY\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = \"bootstrap4\"\n# FIXTURES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#fixture-dirs\nFIXTURE_DIRS = (str(APPS_DIR / \"fixtures\"),)\n# SECURITY\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly\nSESSION_COOKIE_HTTPONLY = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "FIXTURE_DIRS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "FIXTURE_DIRS = (str(APPS_DIR / \"fixtures\"),)\n# SECURITY\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly\nSESSION_COOKIE_HTTPONLY = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly\nCSRF_COOKIE_HTTPONLY = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-browser-xss-filter\nSECURE_BROWSER_XSS_FILTER = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_HTTPONLY",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "SESSION_COOKIE_HTTPONLY = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly\nCSRF_COOKIE_HTTPONLY = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-browser-xss-filter\nSECURE_BROWSER_XSS_FILTER = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options\nX_FRAME_OPTIONS = \"DENY\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_HTTPONLY",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "CSRF_COOKIE_HTTPONLY = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-browser-xss-filter\nSECURE_BROWSER_XSS_FILTER = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options\nX_FRAME_OPTIONS = \"DENY\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\nEMAIL_BACKEND = env(\n    \"DJANGO_EMAIL_BACKEND\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SECURE_BROWSER_XSS_FILTER",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "SECURE_BROWSER_XSS_FILTER = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options\nX_FRAME_OPTIONS = \"DENY\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\nEMAIL_BACKEND = env(\n    \"DJANGO_EMAIL_BACKEND\",\n    default=\"django.core.mail.backends.smtp.EmailBackend\",\n)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "X_FRAME_OPTIONS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "X_FRAME_OPTIONS = \"DENY\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\nEMAIL_BACKEND = env(\n    \"DJANGO_EMAIL_BACKEND\",\n    default=\"django.core.mail.backends.smtp.EmailBackend\",\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-timeout\nEMAIL_TIMEOUT = 5",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "EMAIL_BACKEND = env(\n    \"DJANGO_EMAIL_BACKEND\",\n    default=\"django.core.mail.backends.smtp.EmailBackend\",\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-timeout\nEMAIL_TIMEOUT = 5\n# ADMIN\n# ------------------------------------------------------------------------------\n# Django Admin URL.\nADMIN_URL = \"admin/\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_TIMEOUT",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "EMAIL_TIMEOUT = 5\n# ADMIN\n# ------------------------------------------------------------------------------\n# Django Admin URL.\nADMIN_URL = \"admin/\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#admins\nADMINS = [(\"\"\"Daniel Roy Greenfeld\"\"\", \"daniel-roy-greenfeld@example.com\")]\n# https://docs.djangoproject.com/en/dev/ref/settings/#managers\nMANAGERS = ADMINS\n# LOGGING",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ADMIN_URL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ADMIN_URL = \"admin/\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#admins\nADMINS = [(\"\"\"Daniel Roy Greenfeld\"\"\", \"daniel-roy-greenfeld@example.com\")]\n# https://docs.djangoproject.com/en/dev/ref/settings/#managers\nMANAGERS = ADMINS\n# LOGGING\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#logging\n# See https://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ADMINS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ADMINS = [(\"\"\"Daniel Roy Greenfeld\"\"\", \"daniel-roy-greenfeld@example.com\")]\n# https://docs.djangoproject.com/en/dev/ref/settings/#managers\nMANAGERS = ADMINS\n# LOGGING\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#logging\n# See https://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    \"version\": 1,",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MANAGERS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "MANAGERS = ADMINS\n# LOGGING\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#logging\n# See https://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"verbose\": {\n            \"format\": \"%(levelname)s %(asctime)s %(module)s \"\n                        \"%(process)d %(thread)d %(message)s\"\n        }\n    },\n    \"handlers\": {",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_ALLOW_REGISTRATION",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ACCOUNT_ALLOW_REGISTRATION = env.bool(\"DJANGO_ACCOUNT_ALLOW_REGISTRATION\", True)\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_AUTHENTICATION_METHOD = \"username\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_EMAIL_REQUIRED = True\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.AccountAdapter\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_AUTHENTICATION_METHOD",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ACCOUNT_AUTHENTICATION_METHOD = \"username\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_EMAIL_REQUIRED = True\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.AccountAdapter\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nSOCIALACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.SocialAccountAdapter\"\n# django-rest-framework",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = True\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.AccountAdapter\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nSOCIALACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.SocialAccountAdapter\"\n# django-rest-framework\n# -------------------------------------------------------------------------------\n# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_VERIFICATION",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.AccountAdapter\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nSOCIALACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.SocialAccountAdapter\"\n# django-rest-framework\n# -------------------------------------------------------------------------------\n# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_ADAPTER",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.AccountAdapter\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nSOCIALACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.SocialAccountAdapter\"\n# django-rest-framework\n# -------------------------------------------------------------------------------\n# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',\n        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_ADAPTER",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "SOCIALACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.SocialAccountAdapter\"\n# django-rest-framework\n# -------------------------------------------------------------------------------\n# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',\n        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',\n    ),\n    'DEFAULT_PARSER_CLASSES': (",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',\n        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',\n    ),\n    'DEFAULT_PARSER_CLASSES': (\n        'djangorestframework_camel_case.parser.CamelCaseFormParser',\n        'djangorestframework_camel_case.parser.CamelCaseMultiPartParser',\n        'djangorestframework_camel_case.parser.CamelCaseJSONParser',\n    ),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "JWT_AUTH",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "JWT_AUTH = {\n    'JWT_VERIFY': True,\n    'JWT_VERIFY_EXPIRATION': True,\n    'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=15),\n    'JWT_ALLOW_REFRESH': True,\n    'JWT_AUTH_HEADER_PREFIX': 'JWT',\n}\n# django-cors-headers - https://github.com/adamchainz/django-cors-headers#setup\n# CORS_URLS_REGEX = r\"^/api/.*$\"\n# Your stuff...",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_ALLOW_ALL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "CORS_ORIGIN_ALLOW_ALL = True",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "SECRET_KEY = os.environ.get(\"SECRET_KEY\", \"fallback-insecure-key\")\nDEBUG = os.environ.get(\"DEBUG\", \"True\") == \"True\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"web2_personal_mgmt\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "DEBUG = os.environ.get(\"DEBUG\", \"True\") == \"True\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"web2_personal_mgmt\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),\n    }",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"web2_personal_mgmt\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),\n    }\n}",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "ALLOWED_HOSTS = [\"localhost\", \"0.0.0.0\", \"127.0.0.1\"]\n# CACHES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#caches\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n        \"LOCATION\": \"\",\n    }\n}",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n        \"LOCATION\": \"\",\n    }\n}\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\nEMAIL_BACKEND = env(",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "EMAIL_BACKEND = env(\n    \"DJANGO_EMAIL_BACKEND\", default=\"django.core.mail.backends.console.EmailBackend\"\n)\n# django-debug-toolbar\n# ------------------------------------------------------------------------------\n# https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#prerequisites\nINSTALLED_APPS += [\"debug_toolbar\"]  # noqa F405\n# https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#middleware\nMIDDLEWARE += [\"debug_toolbar.middleware.DebugToolbarMiddleware\"]  # noqa F405\n# https://django-debug-toolbar.readthedocs.io/en/latest/configuration.html#debug-toolbar-config",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "DEBUG_TOOLBAR_CONFIG",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "DEBUG_TOOLBAR_CONFIG = {\n    \"DISABLE_PANELS\": [\"debug_toolbar.panels.redirects.RedirectsPanel\"],\n    \"SHOW_TEMPLATE_CONTEXT\": True,\n}\n# https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#internal-ips\nINTERNAL_IPS = [\"127.0.0.1\", \"10.0.2.2\"]\nif env(\"USE_DOCKER\") == \"yes\":\n    import socket\n    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())\n    INTERNAL_IPS += [\".\".join(ip.split(\".\")[:-1] + [\"1\"]) for ip in ips]",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "INTERNAL_IPS = [\"127.0.0.1\", \"10.0.2.2\"]\nif env(\"USE_DOCKER\") == \"yes\":\n    import socket\n    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())\n    INTERNAL_IPS += [\".\".join(ip.split(\".\")[:-1] + [\"1\"]) for ip in ips]\n# django-extensions\n# ------------------------------------------------------------------------------\n# https://django-extensions.readthedocs.io/en/latest/installation_instructions.html#configuration\nINSTALLED_APPS += [\"django_extensions\"]  # noqa F405\n# Your stuff...",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parents[2]\n# GENERAL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#secret-key\nSECRET_KEY = env(\"DJANGO_SECRET_KEY\")\n# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts\nALLOWED_HOSTS = env.list(\"DJANGO_ALLOWED_HOSTS\", default=[\"deelop.com\"])\n# DATABASES\n# ------------------------------------------------------------------------------\n# DATABASES[\"default\"] = env.db(\"DATABASE_URL\")  # noqa F405",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECRET_KEY = env(\"DJANGO_SECRET_KEY\")\n# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts\nALLOWED_HOSTS = env.list(\"DJANGO_ALLOWED_HOSTS\", default=[\"deelop.com\"])\n# DATABASES\n# ------------------------------------------------------------------------------\n# DATABASES[\"default\"] = env.db(\"DATABASE_URL\")  # noqa F405\n# DATABASES[\"default\"][\"ATOMIC_REQUESTS\"] = True  # noqa F405\n# DATABASES[\"default\"][\"CONN_MAX_AGE\"] = env.int(\"CONN_MAX_AGE\", default=60)  # noqa F405\nDATABASES = {\n    \"default\": {",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "ALLOWED_HOSTS = env.list(\"DJANGO_ALLOWED_HOSTS\", default=[\"deelop.com\"])\n# DATABASES\n# ------------------------------------------------------------------------------\n# DATABASES[\"default\"] = env.db(\"DATABASE_URL\")  # noqa F405\n# DATABASES[\"default\"][\"ATOMIC_REQUESTS\"] = True  # noqa F405\n# DATABASES[\"default\"][\"CONN_MAX_AGE\"] = env.int(\"CONN_MAX_AGE\", default=60)  # noqa F405\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",  # Ajusta el nombre de tu archivo SQLite",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",  # Ajusta el nombre de tu archivo SQLite\n        \"ATOMIC_REQUESTS\": True,\n        \"CONN_MAX_AGE\": 60,\n    }\n}\n# CACHES\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": env(\"REDIS_URL\"),\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            # Mimicing memcache behavior.\n            # https://github.com/jazzband/django-redis#memcached-exceptions-behavior\n            \"IGNORE_EXCEPTIONS\": True,\n        },",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_PROXY_SSL_HEADER",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-ssl-redirect\nSECURE_SSL_REDIRECT = env.bool(\"DJANGO_SECURE_SSL_REDIRECT\", default=True)\n# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-secure\nSESSION_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-secure\nCSRF_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/topics/security/#ssl-https\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-seconds\n# TODO: set this to 60 seconds first and then to 518400 once you prove the former works",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_SSL_REDIRECT",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECURE_SSL_REDIRECT = env.bool(\"DJANGO_SECURE_SSL_REDIRECT\", default=True)\n# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-secure\nSESSION_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-secure\nCSRF_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/topics/security/#ssl-https\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-seconds\n# TODO: set this to 60 seconds first and then to 518400 once you prove the former works\nSECURE_HSTS_SECONDS = 60\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-include-subdomains",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_SECURE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SESSION_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-secure\nCSRF_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/topics/security/#ssl-https\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-seconds\n# TODO: set this to 60 seconds first and then to 518400 once you prove the former works\nSECURE_HSTS_SECONDS = 60\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-include-subdomains\nSECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool(\n    \"DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS\", default=True",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_SECURE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "CSRF_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/topics/security/#ssl-https\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-seconds\n# TODO: set this to 60 seconds first and then to 518400 once you prove the former works\nSECURE_HSTS_SECONDS = 60\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-include-subdomains\nSECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool(\n    \"DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS\", default=True\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-preload",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_HSTS_SECONDS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECURE_HSTS_SECONDS = 60\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-include-subdomains\nSECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool(\n    \"DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS\", default=True\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-preload\nSECURE_HSTS_PRELOAD = env.bool(\"DJANGO_SECURE_HSTS_PRELOAD\", default=True)\n# https://docs.djangoproject.com/en/dev/ref/middleware/#x-content-type-options-nosniff\nSECURE_CONTENT_TYPE_NOSNIFF = env.bool(\n    \"DJANGO_SECURE_CONTENT_TYPE_NOSNIFF\", default=True",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_HSTS_INCLUDE_SUBDOMAINS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool(\n    \"DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS\", default=True\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-preload\nSECURE_HSTS_PRELOAD = env.bool(\"DJANGO_SECURE_HSTS_PRELOAD\", default=True)\n# https://docs.djangoproject.com/en/dev/ref/middleware/#x-content-type-options-nosniff\nSECURE_CONTENT_TYPE_NOSNIFF = env.bool(\n    \"DJANGO_SECURE_CONTENT_TYPE_NOSNIFF\", default=True\n)\n# STORAGES",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_HSTS_PRELOAD",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECURE_HSTS_PRELOAD = env.bool(\"DJANGO_SECURE_HSTS_PRELOAD\", default=True)\n# https://docs.djangoproject.com/en/dev/ref/middleware/#x-content-type-options-nosniff\nSECURE_CONTENT_TYPE_NOSNIFF = env.bool(\n    \"DJANGO_SECURE_CONTENT_TYPE_NOSNIFF\", default=True\n)\n# STORAGES\n# ------------------------------------------------------------------------------\n# https://django-storages.readthedocs.io/en/latest/#installation\nINSTALLED_APPS += [\"storages\"]  # noqa F405\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_CONTENT_TYPE_NOSNIFF",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECURE_CONTENT_TYPE_NOSNIFF = env.bool(\n    \"DJANGO_SECURE_CONTENT_TYPE_NOSNIFF\", default=True\n)\n# STORAGES\n# ------------------------------------------------------------------------------\n# https://django-storages.readthedocs.io/en/latest/#installation\nINSTALLED_APPS += [\"storages\"]  # noqa F405\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_ACCESS_KEY_ID = env(\"DJANGO_AWS_ACCESS_KEY_ID\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_ACCESS_KEY_ID",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_ACCESS_KEY_ID = env(\"DJANGO_AWS_ACCESS_KEY_ID\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_SECRET_ACCESS_KEY = env(\"DJANGO_AWS_SECRET_ACCESS_KEY\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_STORAGE_BUCKET_NAME = env(\"DJANGO_AWS_STORAGE_BUCKET_NAME\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_QUERYSTRING_AUTH = False\n# DO NOT change these unless you know what you're doing.\n_AWS_EXPIRY = 60 * 60 * 24 * 7\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_SECRET_ACCESS_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_SECRET_ACCESS_KEY = env(\"DJANGO_AWS_SECRET_ACCESS_KEY\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_STORAGE_BUCKET_NAME = env(\"DJANGO_AWS_STORAGE_BUCKET_NAME\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_QUERYSTRING_AUTH = False\n# DO NOT change these unless you know what you're doing.\n_AWS_EXPIRY = 60 * 60 * 24 * 7\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": f\"max-age={_AWS_EXPIRY}, s-maxage={_AWS_EXPIRY}, must-revalidate\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_STORAGE_BUCKET_NAME",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_STORAGE_BUCKET_NAME = env(\"DJANGO_AWS_STORAGE_BUCKET_NAME\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_QUERYSTRING_AUTH = False\n# DO NOT change these unless you know what you're doing.\n_AWS_EXPIRY = 60 * 60 * 24 * 7\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": f\"max-age={_AWS_EXPIRY}, s-maxage={_AWS_EXPIRY}, must-revalidate\"\n}\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_QUERYSTRING_AUTH",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_QUERYSTRING_AUTH = False\n# DO NOT change these unless you know what you're doing.\n_AWS_EXPIRY = 60 * 60 * 24 * 7\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": f\"max-age={_AWS_EXPIRY}, s-maxage={_AWS_EXPIRY}, must-revalidate\"\n}\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_REGION_NAME = env(\"DJANGO_AWS_S3_REGION_NAME\", default=None)\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#cloudfront",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "_AWS_EXPIRY",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "_AWS_EXPIRY = 60 * 60 * 24 * 7\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": f\"max-age={_AWS_EXPIRY}, s-maxage={_AWS_EXPIRY}, must-revalidate\"\n}\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_REGION_NAME = env(\"DJANGO_AWS_S3_REGION_NAME\", default=None)\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#cloudfront\nAWS_S3_CUSTOM_DOMAIN = env(\"DJANGO_AWS_S3_CUSTOM_DOMAIN\", default=None)\naws_s3_domain = AWS_S3_CUSTOM_DOMAIN or f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_S3_OBJECT_PARAMETERS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": f\"max-age={_AWS_EXPIRY}, s-maxage={_AWS_EXPIRY}, must-revalidate\"\n}\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_REGION_NAME = env(\"DJANGO_AWS_S3_REGION_NAME\", default=None)\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#cloudfront\nAWS_S3_CUSTOM_DOMAIN = env(\"DJANGO_AWS_S3_CUSTOM_DOMAIN\", default=None)\naws_s3_domain = AWS_S3_CUSTOM_DOMAIN or f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com\"\n# STATIC\n# ------------------------",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_S3_REGION_NAME",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_S3_REGION_NAME = env(\"DJANGO_AWS_S3_REGION_NAME\", default=None)\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#cloudfront\nAWS_S3_CUSTOM_DOMAIN = env(\"DJANGO_AWS_S3_CUSTOM_DOMAIN\", default=None)\naws_s3_domain = AWS_S3_CUSTOM_DOMAIN or f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com\"\n# STATIC\n# ------------------------\nSTATICFILES_STORAGE = \"django.contrib.staticfiles.storage.StaticFilesStorage\"\nCOLLECTFAST_STRATEGY = \"collectfast.strategies.boto3.Boto3Strategy\"\nSTATIC_URL = f\"https://{aws_s3_domain}/static/\"\n# MEDIA",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_S3_CUSTOM_DOMAIN",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_S3_CUSTOM_DOMAIN = env(\"DJANGO_AWS_S3_CUSTOM_DOMAIN\", default=None)\naws_s3_domain = AWS_S3_CUSTOM_DOMAIN or f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com\"\n# STATIC\n# ------------------------\nSTATICFILES_STORAGE = \"django.contrib.staticfiles.storage.StaticFilesStorage\"\nCOLLECTFAST_STRATEGY = \"collectfast.strategies.boto3.Boto3Strategy\"\nSTATIC_URL = f\"https://{aws_s3_domain}/static/\"\n# MEDIA\n# ------------------------------------------------------------------------------\nDEFAULT_FILE_STORAGE = \"pythondjangocrud.utils.storages.MediaRootS3Boto3Storage\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "aws_s3_domain",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "aws_s3_domain = AWS_S3_CUSTOM_DOMAIN or f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com\"\n# STATIC\n# ------------------------\nSTATICFILES_STORAGE = \"django.contrib.staticfiles.storage.StaticFilesStorage\"\nCOLLECTFAST_STRATEGY = \"collectfast.strategies.boto3.Boto3Strategy\"\nSTATIC_URL = f\"https://{aws_s3_domain}/static/\"\n# MEDIA\n# ------------------------------------------------------------------------------\nDEFAULT_FILE_STORAGE = \"pythondjangocrud.utils.storages.MediaRootS3Boto3Storage\"\nMEDIA_URL = f\"https://{aws_s3_domain}/media/\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "STATICFILES_STORAGE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "STATICFILES_STORAGE = \"django.contrib.staticfiles.storage.StaticFilesStorage\"\nCOLLECTFAST_STRATEGY = \"collectfast.strategies.boto3.Boto3Strategy\"\nSTATIC_URL = f\"https://{aws_s3_domain}/static/\"\n# MEDIA\n# ------------------------------------------------------------------------------\nDEFAULT_FILE_STORAGE = \"pythondjangocrud.utils.storages.MediaRootS3Boto3Storage\"\nMEDIA_URL = f\"https://{aws_s3_domain}/media/\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#default-from-email",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "COLLECTFAST_STRATEGY",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "COLLECTFAST_STRATEGY = \"collectfast.strategies.boto3.Boto3Strategy\"\nSTATIC_URL = f\"https://{aws_s3_domain}/static/\"\n# MEDIA\n# ------------------------------------------------------------------------------\nDEFAULT_FILE_STORAGE = \"pythondjangocrud.utils.storages.MediaRootS3Boto3Storage\"\nMEDIA_URL = f\"https://{aws_s3_domain}/media/\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#default-from-email\nDEFAULT_FROM_EMAIL = env(",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "STATIC_URL = f\"https://{aws_s3_domain}/static/\"\n# MEDIA\n# ------------------------------------------------------------------------------\nDEFAULT_FILE_STORAGE = \"pythondjangocrud.utils.storages.MediaRootS3Boto3Storage\"\nMEDIA_URL = f\"https://{aws_s3_domain}/media/\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#default-from-email\nDEFAULT_FROM_EMAIL = env(\n    \"DJANGO_DEFAULT_FROM_EMAIL\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FILE_STORAGE",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "DEFAULT_FILE_STORAGE = \"pythondjangocrud.utils.storages.MediaRootS3Boto3Storage\"\nMEDIA_URL = f\"https://{aws_s3_domain}/media/\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#default-from-email\nDEFAULT_FROM_EMAIL = env(\n    \"DJANGO_DEFAULT_FROM_EMAIL\",\n    default=\"pythondjangocrud <noreply@deelop.com>\",\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#server-email",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "MEDIA_URL = f\"https://{aws_s3_domain}/media/\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#default-from-email\nDEFAULT_FROM_EMAIL = env(\n    \"DJANGO_DEFAULT_FROM_EMAIL\",\n    default=\"pythondjangocrud <noreply@deelop.com>\",\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#server-email\nSERVER_EMAIL = env(\"DJANGO_SERVER_EMAIL\", default=DEFAULT_FROM_EMAIL)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "DEFAULT_FROM_EMAIL = env(\n    \"DJANGO_DEFAULT_FROM_EMAIL\",\n    default=\"pythondjangocrud <noreply@deelop.com>\",\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#server-email\nSERVER_EMAIL = env(\"DJANGO_SERVER_EMAIL\", default=DEFAULT_FROM_EMAIL)\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-subject-prefix\nEMAIL_SUBJECT_PREFIX = env(\n    \"DJANGO_EMAIL_SUBJECT_PREFIX\",\n    default=\"[pythondjangocrud]\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SERVER_EMAIL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SERVER_EMAIL = env(\"DJANGO_SERVER_EMAIL\", default=DEFAULT_FROM_EMAIL)\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-subject-prefix\nEMAIL_SUBJECT_PREFIX = env(\n    \"DJANGO_EMAIL_SUBJECT_PREFIX\",\n    default=\"[pythondjangocrud]\",\n)\n# ADMIN\n# ------------------------------------------------------------------------------\n# Django Admin URL regex.\nADMIN_URL = env(\"DJANGO_ADMIN_URL\")",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_SUBJECT_PREFIX",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "EMAIL_SUBJECT_PREFIX = env(\n    \"DJANGO_EMAIL_SUBJECT_PREFIX\",\n    default=\"[pythondjangocrud]\",\n)\n# ADMIN\n# ------------------------------------------------------------------------------\n# Django Admin URL regex.\nADMIN_URL = env(\"DJANGO_ADMIN_URL\")\n# Anymail\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "ADMIN_URL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "ADMIN_URL = env(\"DJANGO_ADMIN_URL\")\n# Anymail\n# ------------------------------------------------------------------------------\n# https://anymail.readthedocs.io/en/stable/installation/#installing-anymail\nINSTALLED_APPS += [\"anymail\"]  # noqa F405\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\n# https://anymail.readthedocs.io/en/stable/installation/#anymail-settings-reference\n# https://anymail.readthedocs.io/en/stable/esps/mailgun/\nEMAIL_BACKEND = \"anymail.backends.mailgun.EmailBackend\"\nANYMAIL = {",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "EMAIL_BACKEND = \"anymail.backends.mailgun.EmailBackend\"\nANYMAIL = {\n    \"MAILGUN_API_KEY\": env(\"MAILGUN_API_KEY\"),\n    \"MAILGUN_SENDER_DOMAIN\": env(\"MAILGUN_DOMAIN\"),\n    \"MAILGUN_API_URL\": env(\"MAILGUN_API_URL\", default=\"https://api.mailgun.net/v3\"),\n}\n# Collectfast\n# ------------------------------------------------------------------------------\n# https://github.com/antonagestam/collectfast#installation\nINSTALLED_APPS = [\"collectfast\"] + INSTALLED_APPS  # noqa F405",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "ANYMAIL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "ANYMAIL = {\n    \"MAILGUN_API_KEY\": env(\"MAILGUN_API_KEY\"),\n    \"MAILGUN_SENDER_DOMAIN\": env(\"MAILGUN_DOMAIN\"),\n    \"MAILGUN_API_URL\": env(\"MAILGUN_API_URL\", default=\"https://api.mailgun.net/v3\"),\n}\n# Collectfast\n# ------------------------------------------------------------------------------\n# https://github.com/antonagestam/collectfast#installation\nINSTALLED_APPS = [\"collectfast\"] + INSTALLED_APPS  # noqa F405\n# LOGGING",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "INSTALLED_APPS = [\"collectfast\"] + INSTALLED_APPS  # noqa F405\n# LOGGING\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#logging\n# See https://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": True,\n    \"formatters\": {",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": True,\n    \"formatters\": {\n        \"verbose\": {\n            \"format\": \"%(levelname)s %(asctime)s %(module)s \"\n            \"%(process)d %(thread)d %(message)s\"\n        }\n    },\n    \"handlers\": {",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SENTRY_DSN",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SENTRY_DSN = env(\"SENTRY_DSN\")\nSENTRY_LOG_LEVEL = env.int(\"DJANGO_SENTRY_LOG_LEVEL\", logging.INFO)\nsentry_logging = LoggingIntegration(\n    level=SENTRY_LOG_LEVEL,  # Capture info and above as breadcrumbs\n    event_level=logging.ERROR,  # Send errors as events\n)\nintegrations = [sentry_logging, DjangoIntegration(), RedisIntegration()]\nsentry_sdk.init(\n    dsn=SENTRY_DSN,\n    integrations=integrations,",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SENTRY_LOG_LEVEL",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SENTRY_LOG_LEVEL = env.int(\"DJANGO_SENTRY_LOG_LEVEL\", logging.INFO)\nsentry_logging = LoggingIntegration(\n    level=SENTRY_LOG_LEVEL,  # Capture info and above as breadcrumbs\n    event_level=logging.ERROR,  # Send errors as events\n)\nintegrations = [sentry_logging, DjangoIntegration(), RedisIntegration()]\nsentry_sdk.init(\n    dsn=SENTRY_DSN,\n    integrations=integrations,\n    environment=env(\"SENTRY_ENVIRONMENT\", default=\"production\"),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "sentry_logging",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "sentry_logging = LoggingIntegration(\n    level=SENTRY_LOG_LEVEL,  # Capture info and above as breadcrumbs\n    event_level=logging.ERROR,  # Send errors as events\n)\nintegrations = [sentry_logging, DjangoIntegration(), RedisIntegration()]\nsentry_sdk.init(\n    dsn=SENTRY_DSN,\n    integrations=integrations,\n    environment=env(\"SENTRY_ENVIRONMENT\", default=\"production\"),\n    traces_sample_rate=env.float(\"SENTRY_TRACES_SAMPLE_RATE\", default=0.0),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "integrations",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "integrations = [sentry_logging, DjangoIntegration(), RedisIntegration()]\nsentry_sdk.init(\n    dsn=SENTRY_DSN,\n    integrations=integrations,\n    environment=env(\"SENTRY_ENVIRONMENT\", default=\"production\"),\n    traces_sample_rate=env.float(\"SENTRY_TRACES_SAMPLE_RATE\", default=0.0),\n)\n# Your stuff...\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "peekOfCode": "SECRET_KEY = env(\n    \"DJANGO_SECRET_KEY\",\n    default=\"LPMKcs5vJCBeiJYCD9ircFBAZAdgDp9LCjI1RL3DkEHj5Mwp5F2Ts0aMrq9JKZVN\",\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#test-runner\nTEST_RUNNER = \"django.test.runner.DiscoverRunner\"\n# PASSWORDS\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers\nPASSWORD_HASHERS = [\"django.contrib.auth.hashers.MD5PasswordHasher\"]",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "documentation": {}
    },
    {
        "label": "TEST_RUNNER",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "peekOfCode": "TEST_RUNNER = \"django.test.runner.DiscoverRunner\"\n# PASSWORDS\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers\nPASSWORD_HASHERS = [\"django.contrib.auth.hashers.MD5PasswordHasher\"]\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\nEMAIL_BACKEND = \"django.core.mail.backends.locmem.EmailBackend\"\n# Your stuff...",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "documentation": {}
    },
    {
        "label": "PASSWORD_HASHERS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "peekOfCode": "PASSWORD_HASHERS = [\"django.contrib.auth.hashers.MD5PasswordHasher\"]\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\nEMAIL_BACKEND = \"django.core.mail.backends.locmem.EmailBackend\"\n# Your stuff...\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.locmem.EmailBackend\"\n# Your stuff...\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.api_router",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.api_router",
        "peekOfCode": "app_name = \"api\"\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.api_router",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.api_router",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.api_router",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.api_router",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.swagger",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.swagger",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"API Documentation\",\n        default_version='v1',\n        description=\"API's description\",\n        terms_of_service=\"https://www.google.com/policies/terms/\",\n        contact=openapi.Contact(email=\"contact@deelop.com\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.swagger",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.urls",
        "peekOfCode": "urlpatterns = [\n                    # Django Admin, use {% url 'admin:index' %}\n                    path(settings.ADMIN_URL, admin.site.urls),\n                    re_path('^$', lambda request: redirect('swagger/', permanent=False)),\n                    path(\"api/\", include(\"pythondjangocrud.apps.events.urls\")),\n                    path('api/v1/', include(('pythondjangocrud.urls.apis', 'api'), namespace='api')),\n                    # Django Docs - Swagger\n                    url(r'^swagger(?P<format>.json|.yaml)$', schema_view.without_ui(cache_timeout=0),\n                        name='schema-json'),\n                    url(r'^swagger/$', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.urls",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.wsgi",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.wsgi",
        "peekOfCode": "ROOT_DIR = Path(__file__).resolve(strict=True).parent.parent\nsys.path.append(str(ROOT_DIR / \"pythondjangocrud\"))\n# We defer to a DJANGO_SETTINGS_MODULE already in the environment. This breaks\n# if running multiple sites in the same mod_wsgi process. To fix this, use\n# mod_wsgi daemon mode with each site in its own daemon process, or use\n# os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"config.settings.production\"\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings.production\")\n# This application object is used by any WSGI server configured to use this\n# file. This includes Django's development server, if the WSGI_APPLICATION\n# setting points here.",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.wsgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.wsgi",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.wsgi",
        "peekOfCode": "application = get_wsgi_application()\n# Apply WSGI middleware here.\n# from helloworld.wsgi import HelloWorldApplication\n# application = HelloWorldApplication(application)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.wsgi",
        "documentation": {}
    },
    {
        "label": "os.environ[\"DATABASE_URL\"]",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "os.environ[\"DATABASE_URL\"] = \"sqlite:///readthedocs.db\"\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings.local\")\ndjango.setup()\n# -- Project information -----------------------------------------------------\nproject = \"pythondjangocrud\"\ncopyright = \"\"\"2022, Deelop\"\"\"\nauthor = \"Deelop\"\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "project = \"pythondjangocrud\"\ncopyright = \"\"\"2022, Deelop\"\"\"\nauthor = \"Deelop\"\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "copyright = \"\"\"2022, Deelop\"\"\"\nauthor = \"Deelop\"\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n]",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "author = \"Deelop\"\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n]\n# Add any paths that contain templates here, relative to this directory.",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "extensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n]\n# Add any paths that contain templates here, relative to this directory.\n# templates_path = [\"_templates\"]\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = [\"_build\", \"Thumbs.db\", \".DS_Store\"]",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "exclude_patterns = [\"_build\", \"Thumbs.db\", \".DS_Store\"]\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \"alabaster\"\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\n# html_static_path = [\"_static\"]",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "html_theme = \"alabaster\"\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\n# html_static_path = [\"_static\"]",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.migrations.0001_initial",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('employee', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Attendance',\n            fields=[\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AttendanceAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.admin",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.admin",
        "peekOfCode": "class AttendanceAdmin(AuditAdminMixin, admin.ModelAdmin):\n    \"\"\"\n    Admin options for Learning model.\n    \"\"\"\n    list_display = ['employee_id','date','status']",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.admin",
        "documentation": {}
    },
    {
        "label": "AttendanceConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.apps",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.apps",
        "peekOfCode": "class AttendanceConfig(AppConfig):\n    name = \"pythondjangocrud.apps.attendance\"\n    verbose_name = _(\"Attendance\")\n    def ready(self):\n        try:\n            import pythondjangocrud.apps.attendance.signals  # noqa F401\n        except ImportError:\n            pass",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.apps",
        "documentation": {}
    },
    {
        "label": "Attendance",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.models",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.models",
        "peekOfCode": "class Attendance(AbstractChoice):\n    \"\"\"\n        Model Attendance\n    \"\"\"\n    id = models.BigAutoField(primary_key=True)\n    date = models.DateField(auto_now = False , auto_now_add = False)\n    status = models.TextField()\n    employee_id = models.ForeignKey(Employee, related_name=\"attendance\",\n      on_delete=models.SET_NULL, blank=True, null=True, default=None,)\n    class Meta:",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.models",
        "documentation": {}
    },
    {
        "label": "AttendanceSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.serializers",
        "peekOfCode": "class AttendanceSerializer(serializers.ModelSerializer):\n    \"\"\"\n        Serializer attendance\n    \"\"\"\n    class Meta(AuditSerializerMixin.Meta):\n        model = Attendance",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "peekOfCode": "app_name = \"attendance\"\nrouter = DefaultRouter()\nrouter.register(r'attendance', AttendanceViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'attendance', AttendanceViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "documentation": {}
    },
    {
        "label": "AttendanceViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.views",
        "peekOfCode": "class AttendanceViewSet(ModelViewSet):\n    \"\"\"\n        Viewset AttendanceViewSet\n    \"\"\"\n    queryset = Attendance.objects.actives()\n    serializer_class = AttendanceSerializer\n    permission_classes = (AllowAny,)\n    def perform_create(self, serializer):\n        \"\"\"\n        Override perform_create to log event when an attendance record is created.",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.migrations.0001_initial",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Department',\n            fields=[\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),\n                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='record creation date', verbose_name='creation date')),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "DepartmentAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.admin",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.admin",
        "peekOfCode": "class DepartmentAdmin(AuditAdminMixin, admin.ModelAdmin):\n    \"\"\"\n    Admin options for Learning model.\n    \"\"\"\n    list_display = ['name','location']",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.admin",
        "documentation": {}
    },
    {
        "label": "DepartmentConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.apps",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.apps",
        "peekOfCode": "class DepartmentConfig(AppConfig):\n    name = \"pythondjangocrud.apps.department\"\n    verbose_name = _(\"Department\")\n    def ready(self):\n        try:\n            import pythondjangocrud.apps.department.signals  # noqa F401\n        except ImportError:\n            pass",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.apps",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.models",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.models",
        "peekOfCode": "class Department(AbstractChoice):\n    \"\"\"\n        Model Department\n    \"\"\"\n    id = models.BigAutoField(primary_key=True)\n    name = models.TextField()\n    location = models.TextField()\n    class Meta:\n        db_table = 'department'\n        verbose_name = _('department')",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.models",
        "documentation": {}
    },
    {
        "label": "DepartmentSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.serializers",
        "peekOfCode": "class DepartmentSerializer(serializers.ModelSerializer):\n    \"\"\"\n        Serializer department\n    \"\"\"\n    class Meta(AuditSerializerMixin.Meta):\n        model = Department",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "peekOfCode": "app_name = \"department\"\nrouter = DefaultRouter()\nrouter.register(r'department', DepartmentViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'department', DepartmentViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "documentation": {}
    },
    {
        "label": "DepartmentViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.views",
        "peekOfCode": "class DepartmentViewSet(ModelViewSet):\n    \"\"\"\n        Viewset DepartmentViewSet\n    \"\"\"\n    queryset = Department.objects.actives()\n    serializer_class = DepartmentSerializer\n    permission_classes = (AllowAny,)\n    def perform_create(self, serializer):\n        \"\"\"\n        Override perform_create to log event when a department record is created.",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.migrations.0001_initial",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Employee',\n            fields=[\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),\n                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='record creation date', verbose_name='creation date')),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "EmployeeAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.admin",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.admin",
        "peekOfCode": "class EmployeeAdmin(AuditAdminMixin, admin.ModelAdmin):\n    \"\"\"\n    Admin options for Learning model.\n    \"\"\"\n    list_display = ['first_name','last_name','email','hire_date']",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.admin",
        "documentation": {}
    },
    {
        "label": "EmployeeConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.apps",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.apps",
        "peekOfCode": "class EmployeeConfig(AppConfig):\n    name = \"pythondjangocrud.apps.employee\"\n    verbose_name = _(\"Employee\")\n    def ready(self):\n        try:\n            import pythondjangocrud.apps.employee.signals  # noqa F401\n        except ImportError:\n            pass",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.apps",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.models",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.models",
        "peekOfCode": "class Employee(AbstractChoice):\n    \"\"\"\n        Model Employee\n    \"\"\"\n    id = models.BigAutoField(primary_key=True)\n    first_name = models.TextField()\n    last_name = models.TextField()\n    email = models.TextField()\n    hire_date = models.DateField(auto_now = False , auto_now_add = False)\n    class Meta:",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.models",
        "documentation": {}
    },
    {
        "label": "EmployeeSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.serializers",
        "peekOfCode": "class EmployeeSerializer(serializers.ModelSerializer):\n    \"\"\"\n        Serializer employee\n    \"\"\"\n    class Meta(AuditSerializerMixin.Meta):\n        model = Employee",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "peekOfCode": "app_name = \"employee\"\nrouter = DefaultRouter()\nrouter.register(r'employee', EmployeeViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'employee', EmployeeViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "documentation": {}
    },
    {
        "label": "EmployeeViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.views",
        "peekOfCode": "class EmployeeViewSet(ModelViewSet):\n    \"\"\"\n        Viewset EmployeeViewSet\n    \"\"\"\n    queryset = Employee.objects.actives()\n    serializer_class = EmployeeSerializer\n    permission_classes = (AllowAny,)\n    def perform_create(self, serializer):\n        \"\"\"\n        Override perform_create to log event when an employee record is created.",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.management.commands.seed_db",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.management.commands.seed_db",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Seeds the database with initial data.\"\n    def handle(self, *args, **options):\n        reset_database()\n        self.stdout.write(self.style.SUCCESS(\"Database seeded successfully.\"))",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.management.commands.seed_db",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.migrations.0001_initial",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Event',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "EventsConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.apps",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.apps",
        "peekOfCode": "class EventsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"pythondjangocrud.apps.events\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.apps",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.events",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.events",
        "peekOfCode": "EVENTS_ALLOWED = [\n    \"attendance_create\",\n    \"attendance_update\",\n    \"attendance_delete\",\n    \"department_create\",\n    \"department_update\",\n    \"department_delete\",\n    \"employee_create\",\n    \"employee_update\",\n    \"employee_delete\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.events",
        "documentation": {}
    },
    {
        "label": "PageViewMiddleware",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.middleware",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.middleware",
        "peekOfCode": "class PageViewMiddleware:\n    \"\"\"\n    Middleware to log page view events for all GET requests.\n    \"\"\"\n    IGNORED_PATHS = [\n        \"/favicon.ico\",  # Ignorar favicon\n        \"/favicon.png\",  # Variación adicional\n        \"/\"\n    ]\n    def __init__(self, get_response):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.middleware",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.models",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.models",
        "peekOfCode": "class Event(models.Model):\n    EVENT_TYPES = [\n        ('attendance_create', 'Attendance Created'),\n        ('attendance_update', 'Attendance Updated'),\n        ('attendance_delete', 'Attendance Deleted'),\n        ('department_create', 'Department Created'),\n        ('department_update', 'Department Updated'),\n        ('department_delete', 'Department Deleted'),\n        ('employee_create', 'Employee Created'),\n        ('employee_update', 'Employee Updated'),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.models",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.reset_seed",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.reset_seed",
        "peekOfCode": "def reset_database():\n    \"\"\"Reset the database state and re-seed with initial data.\"\"\"\n    # Clear the jobs table\n    Event.objects.all().delete()\n    print(\"All jobs deleted successfully.\")\n    # Get or create an admin user\n    user, created = User.objects.get_or_create(\n        email=\"test@test.com\",\n        defaults={\n            \"is_staff\": True,",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.reset_seed",
        "documentation": {}
    },
    {
        "label": "base_dir",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.reset_seed",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.reset_seed",
        "peekOfCode": "base_dir = Path(__file__).resolve().parent\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jobs.settings')\ndjango.setup()\nfrom pythondjangocrud.apps.users.models import User\ndef reset_database():\n    \"\"\"Reset the database state and re-seed with initial data.\"\"\"\n    # Clear the jobs table\n    Event.objects.all().delete()\n    print(\"All jobs deleted successfully.\")\n    # Get or create an admin user",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.reset_seed",
        "documentation": {}
    },
    {
        "label": "EventSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.serializers",
        "peekOfCode": "class EventSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Event\n        fields = '__all__'",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"events/list/\", get_events, name=\"event-list\"),\n    path(\"events/my/\", my_events, name=\"my_events\"),\n    path(\"events/reset/\", reset_events, name=\"reset_events\"),\n    path(\"events/add/\", add_event, name=\"add_events\"),\n]",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.urls",
        "documentation": {}
    },
    {
        "label": "create_event",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.utils",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.utils",
        "peekOfCode": "def create_event(user, event_type, description, data=None, web_agent_id=None):\n    \"\"\"\n    Create an event in the database.\n    Args:\n        user (User or None): The user associated with the event (can be None).\n        event_type (str): The type of the event (must be one of Event.EVENT_TYPES).\n        description (str): A brief description of the event.\n        data (dict, optional): Additional data to store with the event. Defaults to an empty dictionary.\n        web_agent_id (int, optional): The web_agent ID associated with the event. Defaults to None.\n    \"\"\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "get_events",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "peekOfCode": "def get_events(request):\n    \"\"\"\n    Fetch events for the web_agent identified by the provided `web_agent_id`.\n    \"\"\"\n    web_agent_id = request.headers.get(\"X-WebAgent-Id\")  # Retrieve web_agent_id from query params\n    if not web_agent_id:\n        return Response({\"error\": \"X-WebAgent-Id is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n    events = Event.objects.filter(web_agent_id=web_agent_id).order_by(\"-created_at\")\n    serializer = EventSerializer(events, many=True)\n    return Response(serializer.data)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "documentation": {}
    },
    {
        "label": "my_events",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "peekOfCode": "def my_events(request):\n    \"\"\"\n    Get all my events\n    \"\"\"\n    # user = request.user\n    # user_email = request.data.get(\"user_email\")\n    # user = User.objects.get(email=user_email)\n    events = Event.objects.order_by(\"-created_at\")\n    serializer = EventSerializer(events, many=True)\n    return Response(serializer.data)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "documentation": {}
    },
    {
        "label": "reset_events",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "peekOfCode": "def reset_events(request):\n    \"\"\"\n    Delete Events\n    \"\"\"\n    web_agent_id = request.headers.get(\"X-WebAgent-Id\")\n    if not web_agent_id:\n        return Response({\"error\": \"X-WebAgent-Id is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n    Event.objects.filter(web_agent_id=web_agent_id).delete()\n    return Response(\n        {\"message\": f\"Events for web_agent '{web_agent_id}' have been deleted successfully.\"},",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "documentation": {}
    },
    {
        "label": "add_event",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "peekOfCode": "def add_event(request):\n    \"\"\"\n    Add a new event to the database.\n    Expected JSON payload:\n    {\n        \"web_agent_id\": \"example-webAgent-id\",\n        \"event_type\": \"example-event-type\",\n        \"event_data\": { ... }  # JSON object with event-specific data\n    }\n    \"\"\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.migrations.0001_initial",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('employee', '__first__'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Payroll',\n            fields=[\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PayrollAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.admin",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.admin",
        "peekOfCode": "class PayrollAdmin(AuditAdminMixin, admin.ModelAdmin):\n    \"\"\"\n    Admin options for Learning model.\n    \"\"\"\n    list_display = ['employee_id','pay_date','amount']",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.admin",
        "documentation": {}
    },
    {
        "label": "PayrollConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.apps",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.apps",
        "peekOfCode": "class PayrollConfig(AppConfig):\n    name = \"pythondjangocrud.apps.payroll\"\n    verbose_name = _(\"Payroll\")\n    def ready(self):\n        try:\n            import pythondjangocrud.apps.payroll.signals  # noqa F401\n        except ImportError:\n            pass",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.apps",
        "documentation": {}
    },
    {
        "label": "Payroll",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.models",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.models",
        "peekOfCode": "class Payroll(AbstractChoice):\n    \"\"\"\n        Model Payroll\n    \"\"\"\n    id = models.BigAutoField(primary_key=True)\n    pay_date = models.DateField(auto_now = False , auto_now_add = False)\n    amount = models.FloatField()\n    employee_id = models.ForeignKey(Employee, related_name=\"payroll\",\n      on_delete=models.SET_NULL, blank=True, null=True, default=None,)\n    class Meta:",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.models",
        "documentation": {}
    },
    {
        "label": "PayrollSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.serializers",
        "peekOfCode": "class PayrollSerializer(serializers.ModelSerializer):\n    \"\"\"\n        Serializer payroll\n    \"\"\"\n    class Meta(AuditSerializerMixin.Meta):\n        model = Payroll",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "peekOfCode": "app_name = \"payroll\"\nrouter = DefaultRouter()\nrouter.register(r'payroll', PayrollViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'payroll', PayrollViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "documentation": {}
    },
    {
        "label": "PayrollViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.views",
        "peekOfCode": "class PayrollViewSet(ModelViewSet):\n    \"\"\"\n    Viewset for Payroll, with event logging for create, update, and delete.\n    \"\"\"\n    queryset = Payroll.objects.actives()\n    serializer_class = PayrollSerializer\n    permission_classes = (AllowAny,)\n    def perform_create(self, serializer):\n        \"\"\"\n        Override perform_create to log event when a payroll record is created.",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.migrations.0001_initial",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Position',\n            fields=[\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),\n                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='record creation date', verbose_name='creation date')),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PositionAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.admin",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.admin",
        "peekOfCode": "class PositionAdmin(AuditAdminMixin, admin.ModelAdmin):\n    \"\"\"\n    Admin options for Learning model.\n    \"\"\"\n    list_display = ['title','salary']",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.admin",
        "documentation": {}
    },
    {
        "label": "PositionConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.apps",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.apps",
        "peekOfCode": "class PositionConfig(AppConfig):\n    name = \"pythondjangocrud.apps.position\"\n    verbose_name = _(\"Position\")\n    def ready(self):\n        try:\n            import pythondjangocrud.apps.position.signals  # noqa F401\n        except ImportError:\n            pass",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.apps",
        "documentation": {}
    },
    {
        "label": "Position",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.models",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.models",
        "peekOfCode": "class Position(AbstractChoice):\n    \"\"\"\n        Model Position\n    \"\"\"\n    id = models.BigAutoField(primary_key=True)\n    title = models.TextField()\n    salary = models.FloatField()\n    class Meta:\n        db_table = 'position'\n        verbose_name = _('position')",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.models",
        "documentation": {}
    },
    {
        "label": "PositionSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.serializers",
        "peekOfCode": "class PositionSerializer(serializers.ModelSerializer):\n    \"\"\"\n        Serializer position\n    \"\"\"\n    class Meta(AuditSerializerMixin.Meta):\n        model = Position",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "peekOfCode": "app_name = \"position\"\nrouter = DefaultRouter()\nrouter.register(r'position', PositionViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'position', PositionViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "documentation": {}
    },
    {
        "label": "PositionViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.views",
        "peekOfCode": "class PositionViewSet(ModelViewSet):\n    \"\"\"\n        Viewset PositionViewSet\n    \"\"\"\n    queryset = Position.objects.actives()\n    serializer_class = PositionSerializer\n    permission_classes = (AllowAny,)\n    def perform_create(self, serializer):\n        \"\"\"\n        Override perform_create to log event when a position record is created.",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.views",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = [\"username\", \"name\", \"url\"]\n        extra_kwargs = {\n            \"url\": {\"view_name\": \"api:user-detail\", \"lookup_field\": \"username\"}\n        }",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = [\"username\", \"name\", \"url\"]\n        extra_kwargs = {\n            \"url\": {\"view_name\": \"api:user-detail\", \"lookup_field\": \"username\"}\n        }",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.serializers",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.views",
        "peekOfCode": "class UserViewSet(RetrieveModelMixin, ListModelMixin, UpdateModelMixin, GenericViewSet):\n    serializer_class = UserSerializer\n    queryset = User.objects.all()\n    lookup_field = \"username\"\n    def get_queryset(self, *args, **kwargs):\n        assert isinstance(self.request.user.id, int)\n        return self.queryset.filter(id=self.request.user.id)\n    @action(detail=False)\n    def me(self, request):\n        serializer = UserSerializer(request.user, context={\"request\": request})",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.views",
        "peekOfCode": "User = get_user_model()\nclass UserViewSet(RetrieveModelMixin, ListModelMixin, UpdateModelMixin, GenericViewSet):\n    serializer_class = UserSerializer\n    queryset = User.objects.all()\n    lookup_field = \"username\"\n    def get_queryset(self, *args, **kwargs):\n        assert isinstance(self.request.user.id, int)\n        return self.queryset.filter(id=self.request.user.id)\n    @action(detail=False)\n    def me(self, request):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.migrations.0001_initial",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserFactory",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.factories",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.factories",
        "peekOfCode": "class UserFactory(DjangoModelFactory):\n    username = Faker(\"user_name\")\n    email = Faker(\"email\")\n    name = Faker(\"name\")\n    @post_generation\n    def password(self, create: bool, extracted: Sequence[Any], **kwargs):\n        password = (\n            extracted\n            if extracted\n            else Faker(",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.factories",
        "documentation": {}
    },
    {
        "label": "TestUserAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_admin",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_admin",
        "peekOfCode": "class TestUserAdmin:\n    def test_changelist(self, admin_client):\n        url = reverse(\"admin:users_user_changelist\")\n        response = admin_client.get(url)\n        assert response.status_code == 200\n    def test_search(self, admin_client):\n        url = reverse(\"admin:users_user_changelist\")\n        response = admin_client.get(url, data={\"q\": \"test\"})\n        assert response.status_code == 200\n    def test_add(self, admin_client):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_admin",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_admin",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_admin",
        "peekOfCode": "pytestmark = pytest.mark.django_db\nclass TestUserAdmin:\n    def test_changelist(self, admin_client):\n        url = reverse(\"admin:users_user_changelist\")\n        response = admin_client.get(url)\n        assert response.status_code == 200\n    def test_search(self, admin_client):\n        url = reverse(\"admin:users_user_changelist\")\n        response = admin_client.get(url, data={\"q\": \"test\"})\n        assert response.status_code == 200",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_admin",
        "documentation": {}
    },
    {
        "label": "test_user_detail",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "peekOfCode": "def test_user_detail(user: User):\n    assert (\n        reverse(\"api:user-detail\", kwargs={\"username\": user.username})\n        == f\"/api/users/{user.username}/\"\n    )\n    assert resolve(f\"/api/users/{user.username}/\").view_name == \"api:user-detail\"\ndef test_user_list():\n    assert reverse(\"api:user-list\") == \"/api/users/\"\n    assert resolve(\"/api/users/\").view_name == \"api:user-list\"\ndef test_user_me():",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "documentation": {}
    },
    {
        "label": "test_user_list",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "peekOfCode": "def test_user_list():\n    assert reverse(\"api:user-list\") == \"/api/users/\"\n    assert resolve(\"/api/users/\").view_name == \"api:user-list\"\ndef test_user_me():\n    assert reverse(\"api:user-me\") == \"/api/users/me/\"\n    assert resolve(\"/api/users/me/\").view_name == \"api:user-me\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "documentation": {}
    },
    {
        "label": "test_user_me",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "peekOfCode": "def test_user_me():\n    assert reverse(\"api:user-me\") == \"/api/users/me/\"\n    assert resolve(\"/api/users/me/\").view_name == \"api:user-me\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "peekOfCode": "pytestmark = pytest.mark.django_db\ndef test_user_detail(user: User):\n    assert (\n        reverse(\"api:user-detail\", kwargs={\"username\": user.username})\n        == f\"/api/users/{user.username}/\"\n    )\n    assert resolve(f\"/api/users/{user.username}/\").view_name == \"api:user-detail\"\ndef test_user_list():\n    assert reverse(\"api:user-list\") == \"/api/users/\"\n    assert resolve(\"/api/users/\").view_name == \"api:user-list\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "documentation": {}
    },
    {
        "label": "TestUserViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_views",
        "peekOfCode": "class TestUserViewSet:\n    def test_get_queryset(self, user: User, rf: RequestFactory):\n        view = UserViewSet()\n        request = rf.get(\"/fake-url/\")\n        request.user = user\n        view.request = request\n        assert user in view.get_queryset()\n    def test_me(self, user: User, rf: RequestFactory):\n        view = UserViewSet()\n        request = rf.get(\"/fake-url/\")",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_views",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_views",
        "peekOfCode": "pytestmark = pytest.mark.django_db\nclass TestUserViewSet:\n    def test_get_queryset(self, user: User, rf: RequestFactory):\n        view = UserViewSet()\n        request = rf.get(\"/fake-url/\")\n        request.user = user\n        view.request = request\n        assert user in view.get_queryset()\n    def test_me(self, user: User, rf: RequestFactory):\n        view = UserViewSet()",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_views",
        "documentation": {}
    },
    {
        "label": "TestUserAdminCreationForm",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_forms",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_forms",
        "peekOfCode": "class TestUserAdminCreationForm:\n    \"\"\"\n    Test class for all tests related to the UserAdminCreationForm\n    \"\"\"\n    def test_username_validation_error_msg(self, user: User):\n        \"\"\"\n        Tests UserAdminCreation Form's unique validator functions correctly by testing:\n            1) A new user with an existing username cannot be added.\n            2) Only 1 error is raised by the UserCreation Form\n            3) The desired error message is raised",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_forms",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_forms",
        "peekOfCode": "pytestmark = pytest.mark.django_db\nclass TestUserAdminCreationForm:\n    \"\"\"\n    Test class for all tests related to the UserAdminCreationForm\n    \"\"\"\n    def test_username_validation_error_msg(self, user: User):\n        \"\"\"\n        Tests UserAdminCreation Form's unique validator functions correctly by testing:\n            1) A new user with an existing username cannot be added.\n            2) Only 1 error is raised by the UserCreation Form",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "test_user_get_absolute_url",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_models",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_models",
        "peekOfCode": "def test_user_get_absolute_url(user: User):\n    assert user.get_absolute_url() == f\"/users/{user.username}/\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_models",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_models",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_models",
        "peekOfCode": "pytestmark = pytest.mark.django_db\ndef test_user_get_absolute_url(user: User):\n    assert user.get_absolute_url() == f\"/users/{user.username}/\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_swagger_accessible_by_admin",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "peekOfCode": "def test_swagger_accessible_by_admin(admin_client):\n    url = reverse(\"api-docs\")\n    response = admin_client.get(url)\n    assert response.status_code == 200\ndef test_swagger_ui_not_accessible_by_normal_user(client):\n    url = reverse(\"api-docs\")\n    response = client.get(url)\n    assert response.status_code == 403\ndef test_api_schema_generated_successfully(admin_client):\n    url = reverse(\"api-schema\")",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "documentation": {}
    },
    {
        "label": "test_swagger_ui_not_accessible_by_normal_user",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "peekOfCode": "def test_swagger_ui_not_accessible_by_normal_user(client):\n    url = reverse(\"api-docs\")\n    response = client.get(url)\n    assert response.status_code == 403\ndef test_api_schema_generated_successfully(admin_client):\n    url = reverse(\"api-schema\")\n    response = admin_client.get(url)\n    assert response.status_code == 200",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "documentation": {}
    },
    {
        "label": "test_api_schema_generated_successfully",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "peekOfCode": "def test_api_schema_generated_successfully(admin_client):\n    url = reverse(\"api-schema\")\n    response = admin_client.get(url)\n    assert response.status_code == 200",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "peekOfCode": "pytestmark = pytest.mark.django_db\ndef test_swagger_accessible_by_admin(admin_client):\n    url = reverse(\"api-docs\")\n    response = admin_client.get(url)\n    assert response.status_code == 200\ndef test_swagger_ui_not_accessible_by_normal_user(client):\n    url = reverse(\"api-docs\")\n    response = client.get(url)\n    assert response.status_code == 403\ndef test_api_schema_generated_successfully(admin_client):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "documentation": {}
    },
    {
        "label": "test_detail",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "peekOfCode": "def test_detail(user: User):\n    assert (\n        reverse(\"users:detail\", kwargs={\"username\": user.username})\n        == f\"/users/{user.username}/\"\n    )\n    assert resolve(f\"/users/{user.username}/\").view_name == \"users:detail\"\ndef test_update():\n    assert reverse(\"users:update\") == \"/users/~update/\"\n    assert resolve(\"/users/~update/\").view_name == \"users:update\"\ndef test_redirect():",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "documentation": {}
    },
    {
        "label": "test_update",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "peekOfCode": "def test_update():\n    assert reverse(\"users:update\") == \"/users/~update/\"\n    assert resolve(\"/users/~update/\").view_name == \"users:update\"\ndef test_redirect():\n    assert reverse(\"users:redirect\") == \"/users/~redirect/\"\n    assert resolve(\"/users/~redirect/\").view_name == \"users:redirect\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "documentation": {}
    },
    {
        "label": "test_redirect",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "peekOfCode": "def test_redirect():\n    assert reverse(\"users:redirect\") == \"/users/~redirect/\"\n    assert resolve(\"/users/~redirect/\").view_name == \"users:redirect\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "peekOfCode": "pytestmark = pytest.mark.django_db\ndef test_detail(user: User):\n    assert (\n        reverse(\"users:detail\", kwargs={\"username\": user.username})\n        == f\"/users/{user.username}/\"\n    )\n    assert resolve(f\"/users/{user.username}/\").view_name == \"users:detail\"\ndef test_update():\n    assert reverse(\"users:update\") == \"/users/~update/\"\n    assert resolve(\"/users/~update/\").view_name == \"users:update\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "documentation": {}
    },
    {
        "label": "TestUserUpdateView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "peekOfCode": "class TestUserUpdateView:\n    \"\"\"\n    TODO:\n        extracting view initialization code as class-scoped fixture\n        would be great if only pytest-django supported non-function-scoped\n        fixture db access -- this is a work-in-progress for now:\n        https://github.com/pytest-dev/pytest-django/pull/258\n    \"\"\"\n    def dummy_get_response(self, request: HttpRequest):\n        return None",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TestUserRedirectView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "peekOfCode": "class TestUserRedirectView:\n    def test_get_redirect_url(self, user: User, rf: RequestFactory):\n        view = UserRedirectView()\n        request = rf.get(\"/fake-url\")\n        request.user = user\n        view.request = request\n        assert view.get_redirect_url() == f\"/users/{user.username}/\"\nclass TestUserDetailView:\n    def test_authenticated(self, user: User, rf: RequestFactory):\n        request = rf.get(\"/fake-url/\")",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TestUserDetailView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "peekOfCode": "class TestUserDetailView:\n    def test_authenticated(self, user: User, rf: RequestFactory):\n        request = rf.get(\"/fake-url/\")\n        request.user = UserFactory()\n        response = user_detail_view(request, username=user.username)\n        assert response.status_code == 200\n    def test_not_authenticated(self, user: User, rf: RequestFactory):\n        request = rf.get(\"/fake-url/\")\n        request.user = AnonymousUser()\n        response = user_detail_view(request, username=user.username)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "peekOfCode": "pytestmark = pytest.mark.django_db\nclass TestUserUpdateView:\n    \"\"\"\n    TODO:\n        extracting view initialization code as class-scoped fixture\n        would be great if only pytest-django supported non-function-scoped\n        fixture db access -- this is a work-in-progress for now:\n        https://github.com/pytest-dev/pytest-django/pull/258\n    \"\"\"\n    def dummy_get_response(self, request: HttpRequest):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AccountAdapter",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.adapters",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.adapters",
        "peekOfCode": "class AccountAdapter(DefaultAccountAdapter):\n    def is_open_for_signup(self, request: HttpRequest):\n        return getattr(settings, \"ACCOUNT_ALLOW_REGISTRATION\", True)\nclass SocialAccountAdapter(DefaultSocialAccountAdapter):\n    def is_open_for_signup(self, request: HttpRequest, sociallogin: Any):\n        return getattr(settings, \"ACCOUNT_ALLOW_REGISTRATION\", True)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.adapters",
        "documentation": {}
    },
    {
        "label": "SocialAccountAdapter",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.adapters",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.adapters",
        "peekOfCode": "class SocialAccountAdapter(DefaultSocialAccountAdapter):\n    def is_open_for_signup(self, request: HttpRequest, sociallogin: Any):\n        return getattr(settings, \"ACCOUNT_ALLOW_REGISTRATION\", True)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.adapters",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.admin",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.admin",
        "peekOfCode": "class UserAdmin(auth_admin.UserAdmin):\n    form = UserAdminChangeForm\n    add_form = UserAdminCreationForm\n    fieldsets = (\n        (None, {\"fields\": (\"username\", \"password\")}),\n        (_(\"Personal info\"), {\"fields\": (\"name\", \"email\")}),\n        (\n            _(\"Permissions\"),\n            {\n                \"fields\": (",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.admin",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.admin",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.admin",
        "peekOfCode": "User = get_user_model()\n@admin.register(User)\nclass UserAdmin(auth_admin.UserAdmin):\n    form = UserAdminChangeForm\n    add_form = UserAdminCreationForm\n    fieldsets = (\n        (None, {\"fields\": (\"username\", \"password\")}),\n        (_(\"Personal info\"), {\"fields\": (\"name\", \"email\")}),\n        (\n            _(\"Permissions\"),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.admin",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.apps",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    name = \"pythondjangocrud.apps.users\"\n    verbose_name = _(\"Users\")\n    def ready(self):\n        try:\n            import pythondjangocrud.apps.users.signals  # noqa F401\n        except ImportError:\n            pass",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.apps",
        "documentation": {}
    },
    {
        "label": "allauth_settings",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.context_processors",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.context_processors",
        "peekOfCode": "def allauth_settings(request):\n    \"\"\"Expose some settings from django-allauth in templates.\"\"\"\n    return {\n        \"ACCOUNT_ALLOW_REGISTRATION\": settings.ACCOUNT_ALLOW_REGISTRATION,\n    }",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.context_processors",
        "documentation": {}
    },
    {
        "label": "UserAdminChangeForm",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "peekOfCode": "class UserAdminChangeForm(admin_forms.UserChangeForm):\n    class Meta(admin_forms.UserChangeForm.Meta):\n        model = User\nclass UserAdminCreationForm(admin_forms.UserCreationForm):\n    \"\"\"\n    Form for User Creation in the Admin Area.\n    To change user signup, see UserSignupForm and UserSocialSignupForm.\n    \"\"\"\n    class Meta(admin_forms.UserCreationForm.Meta):\n        model = User",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "UserAdminCreationForm",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "peekOfCode": "class UserAdminCreationForm(admin_forms.UserCreationForm):\n    \"\"\"\n    Form for User Creation in the Admin Area.\n    To change user signup, see UserSignupForm and UserSocialSignupForm.\n    \"\"\"\n    class Meta(admin_forms.UserCreationForm.Meta):\n        model = User\n        error_messages = {\n            \"username\": {\"unique\": _(\"This username has already been taken.\")}\n        }",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "UserSignupForm",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "peekOfCode": "class UserSignupForm(SignupForm):\n    \"\"\"\n    Form that will be rendered on a user sign up section/screen.\n    Default fields will be added automatically.\n    Check UserSocialSignupForm for accounts created from social.\n    \"\"\"\nclass UserSocialSignupForm(SocialSignupForm):\n    \"\"\"\n    Renders the form when user has signed up using social accounts.\n    Default fields will be added automatically.",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "UserSocialSignupForm",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "peekOfCode": "class UserSocialSignupForm(SocialSignupForm):\n    \"\"\"\n    Renders the form when user has signed up using social accounts.\n    Default fields will be added automatically.\n    See UserSignupForm otherwise.\n    \"\"\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "peekOfCode": "User = get_user_model()\nclass UserAdminChangeForm(admin_forms.UserChangeForm):\n    class Meta(admin_forms.UserChangeForm.Meta):\n        model = User\nclass UserAdminCreationForm(admin_forms.UserCreationForm):\n    \"\"\"\n    Form for User Creation in the Admin Area.\n    To change user signup, see UserSignupForm and UserSocialSignupForm.\n    \"\"\"\n    class Meta(admin_forms.UserCreationForm.Meta):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.models",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.models",
        "peekOfCode": "class User(AbstractUser):\n    \"\"\"\n    Default custom user model for pythondjangocrud.\n    If adding fields that need to be filled at user signup,\n    check forms.SignupForm and forms.SocialSignupForms accordingly.\n    \"\"\"\n    #: First and last name do not cover name patterns around the globe\n    name = CharField(_(\"Name of User\"), blank=True, max_length=255)\n    first_name = None  # type: ignore\n    last_name = None  # type: ignore",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "peekOfCode": "app_name = \"users\"\nrouter = DefaultRouter()\nrouter.register(r'users', user_views.UserViewSet, basename='users')\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'users', user_views.UserViewSet, basename='users')\nurlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "documentation": {}
    },
    {
        "label": "UserDetailView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "class UserDetailView(LoginRequiredMixin, DetailView):\n    model = User\n    slug_field = \"username\"\n    slug_url_kwarg = \"username\"\n    def get(self, request, *args, **kwargs):\n        # Log the event when the user views their profile\n        create_event(\n            user=request.user,\n            event_type='user_view',\n            description=f'User {request.user.username} viewed their profile',",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "UserUpdateView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "class UserUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = User\n    fields = [\"name\"]\n    success_message = _(\"Information successfully updated\")\n    def get_success_url(self):\n        assert (\n            self.request.user.is_authenticated\n        )  # for mypy to know that the user is authenticated\n        return self.request.user.get_absolute_url()\n    def get_object(self):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "UserRedirectView",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "class UserRedirectView(LoginRequiredMixin, RedirectView):\n    permanent = False\n    def get_redirect_url(self):\n        # Log the event when the user is redirected\n        create_event(\n            user=self.request.user,\n            event_type='user_redirect',\n            description=f'User {self.request.user.username} was redirected to their profile',\n            data={'username': self.request.user.username},\n            miner_id=self.request.headers.get(\"X-Miner-Id\", None)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "User = get_user_model()\nclass UserDetailView(LoginRequiredMixin, DetailView):\n    model = User\n    slug_field = \"username\"\n    slug_url_kwarg = \"username\"\n    def get(self, request, *args, **kwargs):\n        # Log the event when the user views their profile\n        create_event(\n            user=request.user,\n            event_type='user_view',",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "user_detail_view",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "user_detail_view = UserDetailView.as_view()\nclass UserUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = User\n    fields = [\"name\"]\n    success_message = _(\"Information successfully updated\")\n    def get_success_url(self):\n        assert (\n            self.request.user.is_authenticated\n        )  # for mypy to know that the user is authenticated\n        return self.request.user.get_absolute_url()",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "user_update_view",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "user_update_view = UserUpdateView.as_view()\nclass UserRedirectView(LoginRequiredMixin, RedirectView):\n    permanent = False\n    def get_redirect_url(self):\n        # Log the event when the user is redirected\n        create_event(\n            user=self.request.user,\n            event_type='user_redirect',\n            description=f'User {self.request.user.username} was redirected to their profile',\n            data={'username': self.request.user.username},",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "user_redirect_view",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "user_redirect_view = UserRedirectView.as_view()",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0001_initial",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"Site\",\n            fields=[\n                (\n                    \"id\",\n                    models.AutoField(\n                        verbose_name=\"ID\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0002_alter_domain_unique",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0002_alter_domain_unique",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"sites\", \"0001_initial\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"site\",\n            name=\"domain\",\n            field=models.CharField(\n                max_length=100,\n                unique=True,\n                validators=[django.contrib.sites.models._simple_domain_name_validator],",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0002_alter_domain_unique",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"sites\", \"0002_alter_domain_unique\")]\n    operations = [migrations.RunPython(update_site_forward, update_site_backward)]",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "documentation": {}
    },
    {
        "label": "update_site_forward",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "peekOfCode": "def update_site_forward(apps, schema_editor):\n    \"\"\"Set site domain and name.\"\"\"\n    Site = apps.get_model(\"sites\", \"Site\")\n    _update_or_create_site_with_sequence(\n        Site,\n        schema_editor.connection,\n        \"deelop.com\",\n        \"pythondjangocrud\",\n    )\ndef update_site_backward(apps, schema_editor):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "documentation": {}
    },
    {
        "label": "update_site_backward",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "peekOfCode": "def update_site_backward(apps, schema_editor):\n    \"\"\"Revert site domain and name to default.\"\"\"\n    Site = apps.get_model(\"sites\", \"Site\")\n    _update_or_create_site_with_sequence(\n        Site,\n        schema_editor.connection,\n        \"example.com\",\n        \"example.com\",\n    )\nclass Migration(migrations.Migration):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0004_alter_options_ordering_domain",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0004_alter_options_ordering_domain",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"sites\", \"0003_set_site_domain_and_name\"),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name=\"site\",\n            options={\n                \"ordering\": [\"domain\"],\n                \"verbose_name\": \"site\",",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0004_alter_options_ordering_domain",
        "documentation": {}
    },
    {
        "label": "CoreManager",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.managers",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.managers",
        "peekOfCode": "class CoreManager(models.Manager):\n    def actives(self):\n        return super(CoreManager, self).get_queryset().filter(is_active=True)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.managers",
        "documentation": {}
    },
    {
        "label": "AbstractAudit",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "peekOfCode": "class AbstractAudit(models.Model):\n    \"\"\"\n    An abstract model that manages the modifications made to a model\n    \"\"\"\n    is_active = models.BooleanField(\n        _('active'),\n        default=True,\n        help_text=_(\n            'Designates whether this record should be treated as active. '\n            'Unselect this instead of deleting accounts.'",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "documentation": {}
    },
    {
        "label": "AbstractChoice",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "peekOfCode": "class AbstractChoice(AbstractAudit):\n    \"\"\"\n    An abstract model for and id and name entry (i.e. field).\n    \"\"\"\n    name = models.CharField(\n        _('name'),\n        max_length=200,\n        blank=True,\n        null=True,\n        default=None,",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "documentation": {}
    },
    {
        "label": "AbstractAttachment",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "peekOfCode": "class AbstractAttachment(AbstractAudit):\n    title = models.CharField(max_length=90, null=True, blank=True)\n    category = models.CharField(max_length=90, null=True, blank=True)\n    description = models.CharField(max_length=90, null=True, blank=True)\n    class Meta:\n        abstract = True\n    def __str__(self):\n        return \"{} - {}\".format(self.id, self.title)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "documentation": {}
    },
    {
        "label": "AbstractChoiceAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.admin",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.admin",
        "peekOfCode": "class AbstractChoiceAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin options for AbstractChoice abstract model.\n    \"\"\"\n    list_display = ['id', 'name', 'code']\nclass AuditAdminMixin:\n    ordering = ['pk']\n    def get_merge_fields(self, origin_fields, fields):\n        fields = list(fields)\n        for field in origin_fields:",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "AuditAdminMixin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.admin",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.admin",
        "peekOfCode": "class AuditAdminMixin:\n    ordering = ['pk']\n    def get_merge_fields(self, origin_fields, fields):\n        fields = list(fields)\n        for field in origin_fields:\n            if field not in fields:\n                fields.append(field)\n        return fields\n    def get_all_fields(self, fields):\n        audit_fields = ['is_active', 'creation_date', 'created_by', 'update_date', 'update_by']",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "RatingTypeEnum",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.constants",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.constants",
        "peekOfCode": "class RatingTypeEnum(IntEnum):\n    \"\"\" Enum Rating Type \"\"\"\n    RATING_1 = 1\n    RATING_2 = 2\n    RATING_3 = 3\n    RATING_4 = 4\n    RATING_5 = 5",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.constants",
        "documentation": {}
    },
    {
        "label": "PostFilterType",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "peekOfCode": "class PostFilterType(IntEnum):\n    LIST_ALL = 1\nclass FilterFieldsMixin(GenericAPIView):\n    \"\"\"\n    Mixin to filter queryset.\n    \"\"\"\n    ignore_fields = ['limit', 'offset', 'ordering']\n    filterset_fields = []\n    text_filter_fields = []\n    list_filter_fields = []",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "documentation": {}
    },
    {
        "label": "FilterFieldsMixin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "peekOfCode": "class FilterFieldsMixin(GenericAPIView):\n    \"\"\"\n    Mixin to filter queryset.\n    \"\"\"\n    ignore_fields = ['limit', 'offset', 'ordering']\n    filterset_fields = []\n    text_filter_fields = []\n    list_filter_fields = []\n    list_all_filter_fields = []\n    alias_filter_fields = {}",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "documentation": {}
    },
    {
        "label": "FilterByKwargFieldMixin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "peekOfCode": "class FilterByKwargFieldMixin:\n    kwargs_fields = []\n    def filter_queryset(self, queryset):\n        queryset = super(FilterByKwargFieldMixin, self).filter_queryset(queryset)\n        filter_fields = dict()\n        for kwarg_name, filter_name in self.kwargs_fields:\n            kwarg_value = self.kwargs.get(kwarg_name, None)\n            if kwarg_value:\n                filter_fields[filter_name] = kwarg_value\n        if filter_fields:",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "documentation": {}
    },
    {
        "label": "SerializerSetMixin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "peekOfCode": "class SerializerSetMixin(object):\n    serializer_class = None\n    min_serializer = None\n    list_serializer = None\n    detail_serializer = None\n    create_serializer = None\n    update_serializer = None\n    def get_serializer_class(self):\n        action = getattr(self, 'action', 'list')\n        if action in ('list',):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "documentation": {}
    },
    {
        "label": "AuditSerializerMixin",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.serializers",
        "peekOfCode": "class AuditSerializerMixin:\n    \"\"\"\n    Mixin that excludes the audit fields from serializers.\n    \"\"\"\n    class Meta:\n        exclude = ['creation_date', 'created_by', 'update_date', 'update_by']\nclass AbstractChoiceSerializer(serializers.Serializer):\n    \"\"\"\n    ListSerializer for AbstractChoice model.\n    \"\"\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.serializers",
        "documentation": {}
    },
    {
        "label": "AbstractChoiceSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.serializers",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.serializers",
        "peekOfCode": "class AbstractChoiceSerializer(serializers.Serializer):\n    \"\"\"\n    ListSerializer for AbstractChoice model.\n    \"\"\"\n    id = serializers.IntegerField(allow_null=True)\n    name = serializers.CharField()\n    code = serializers.CharField(allow_null=True)\n    is_active = serializers.BooleanField(allow_null=True)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.serializers",
        "documentation": {}
    },
    {
        "label": "date_range",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def date_range(start_date: date, end_date: date):\n    for n in range(int((end_date - start_date).days) + 1):\n        yield start_date + timedelta(n)\ndef str_to_datetime(date_time_str, format='%Y-%m-%d %H:%M:%S.%f', default=datetime.now()):\n    \"\"\" Conviente de str a datetime desde un formato o retorna default\n    :param date_time_str: String que se dese convertir\n    :param format: Formato del string\n    :param default: En caso el formato no corresponda\n    :return: datetime\n    \"\"\"",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "str_to_datetime",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def str_to_datetime(date_time_str, format='%Y-%m-%d %H:%M:%S.%f', default=datetime.now()):\n    \"\"\" Conviente de str a datetime desde un formato o retorna default\n    :param date_time_str: String que se dese convertir\n    :param format: Formato del string\n    :param default: En caso el formato no corresponda\n    :return: datetime\n    \"\"\"\n    try:\n        date_time_obj = datetime.strptime(date_time_str, format)\n    except (ValueError, TypeError, Exception):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "camel_to_snake_str",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def camel_to_snake_str(camel_str):\n    upper_snake_str = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', camel_str)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', upper_snake_str).lower()\ndef camel_to_snake_object_keys(obj):\n    return dict([(camel_to_snake_str(key), obj.get(key, None)) for key in obj.keys()])\ndef choices_to_list(choices):\n    return [{'id': id, 'name': name} for (id, name) in choices]\ndef named_tuple_fetch_all(cursor):\n    \"\"\"\n    Return all rows from a cursor as a namedtuple.",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "camel_to_snake_object_keys",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def camel_to_snake_object_keys(obj):\n    return dict([(camel_to_snake_str(key), obj.get(key, None)) for key in obj.keys()])\ndef choices_to_list(choices):\n    return [{'id': id, 'name': name} for (id, name) in choices]\ndef named_tuple_fetch_all(cursor):\n    \"\"\"\n    Return all rows from a cursor as a namedtuple.\n    \"\"\"\n    desc = cursor.description\n    nt_result = namedtuple('Result', [col[0] for col in desc])",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "choices_to_list",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def choices_to_list(choices):\n    return [{'id': id, 'name': name} for (id, name) in choices]\ndef named_tuple_fetch_all(cursor):\n    \"\"\"\n    Return all rows from a cursor as a namedtuple.\n    \"\"\"\n    desc = cursor.description\n    nt_result = namedtuple('Result', [col[0] for col in desc])\n    return [nt_result(*row) for row in cursor.fetchall()]\ndef try_or(item, keys, default):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "named_tuple_fetch_all",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def named_tuple_fetch_all(cursor):\n    \"\"\"\n    Return all rows from a cursor as a namedtuple.\n    \"\"\"\n    desc = cursor.description\n    nt_result = namedtuple('Result', [col[0] for col in desc])\n    return [nt_result(*row) for row in cursor.fetchall()]\ndef try_or(item, keys, default):\n    temp = item\n    try:",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "try_or",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def try_or(item, keys, default):\n    temp = item\n    try:\n        for key in keys:\n            temp = temp.get(key)\n        return temp or default\n    except:\n        return default\ndef group_days(total_days):\n    YEAR = 365",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "group_days",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def group_days(total_days):\n    YEAR = 365\n    MONTH = 30\n    years = int(total_days / YEAR)\n    months = int((total_days % YEAR) / MONTH)\n    days = (total_days % YEAR) % MONTH\n    return years, months, days",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "peekOfCode": "router = DefaultRouter()\napp_name = \"api\"\nurlpatterns = [\n    path('', include(('pythondjangocrud.apps.users.urls', 'users'), namespace='users')),\n    path('', include(('pythondjangocrud.apps.employee.urls', 'employee'), namespace='employee')),\n    path('', include(('pythondjangocrud.apps.department.urls', 'department'), namespace='department')),\n    path('', include(('pythondjangocrud.apps.position.urls', 'position'), namespace='position')),\n    path('', include(('pythondjangocrud.apps.attendance.urls', 'attendance'), namespace='attendance')),\n    path('', include(('pythondjangocrud.apps.payroll.urls', 'payroll'), namespace='payroll')),\n    # Urls JWT",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "peekOfCode": "app_name = \"api\"\nurlpatterns = [\n    path('', include(('pythondjangocrud.apps.users.urls', 'users'), namespace='users')),\n    path('', include(('pythondjangocrud.apps.employee.urls', 'employee'), namespace='employee')),\n    path('', include(('pythondjangocrud.apps.department.urls', 'department'), namespace='department')),\n    path('', include(('pythondjangocrud.apps.position.urls', 'position'), namespace='position')),\n    path('', include(('pythondjangocrud.apps.attendance.urls', 'attendance'), namespace='attendance')),\n    path('', include(('pythondjangocrud.apps.payroll.urls', 'payroll'), namespace='payroll')),\n    # Urls JWT\n    path('auth/token-auth/', obtain_jwt_token),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "peekOfCode": "urlpatterns = [\n    path('', include(('pythondjangocrud.apps.users.urls', 'users'), namespace='users')),\n    path('', include(('pythondjangocrud.apps.employee.urls', 'employee'), namespace='employee')),\n    path('', include(('pythondjangocrud.apps.department.urls', 'department'), namespace='department')),\n    path('', include(('pythondjangocrud.apps.position.urls', 'position'), namespace='position')),\n    path('', include(('pythondjangocrud.apps.attendance.urls', 'attendance'), namespace='attendance')),\n    path('', include(('pythondjangocrud.apps.payroll.urls', 'payroll'), namespace='payroll')),\n    # Urls JWT\n    path('auth/token-auth/', obtain_jwt_token),\n    path('auth/token-refresh/', refresh_jwt_token),",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "documentation": {}
    },
    {
        "label": "StaticRootS3Boto3Storage",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.utils.storages",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.utils.storages",
        "peekOfCode": "class StaticRootS3Boto3Storage(S3Boto3Storage):\n    location = \"static\"\n    default_acl = \"public-read\"\nclass MediaRootS3Boto3Storage(S3Boto3Storage):\n    location = \"media\"\n    file_overwrite = False",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.utils.storages",
        "documentation": {}
    },
    {
        "label": "MediaRootS3Boto3Storage",
        "kind": 6,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.utils.storages",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.utils.storages",
        "peekOfCode": "class MediaRootS3Boto3Storage(S3Boto3Storage):\n    location = \"media\"\n    file_overwrite = False",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.utils.storages",
        "documentation": {}
    },
    {
        "label": "media_storage",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.conftest",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.conftest",
        "peekOfCode": "def media_storage(settings, tmpdir):\n    settings.MEDIA_ROOT = tmpdir.strpath\n@pytest.fixture\ndef user() -> User:\n    return UserFactory()",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.conftest",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.conftest",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.conftest",
        "peekOfCode": "def user() -> User:\n    return UserFactory()",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.conftest",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "def merge(\n    output_file_path: str, merged_file_paths: Sequence[str], append_linesep: bool = True\n) -> None:\n    with open(output_file_path, \"w\") as output_file:\n        for merged_file_path in merged_file_paths:\n            with open(merged_file_path, \"r\") as merged_file:\n                merged_file_content = merged_file.read()\n                output_file.write(merged_file_content)\n                if append_linesep:\n                    output_file.write(os.linesep)",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "def main():\n    merge(DOTENV_FILE_PATH, PRODUCTION_DOTENV_FILE_PATHS)\n@pytest.mark.parametrize(\"merged_file_count\", range(3))\n@pytest.mark.parametrize(\"append_linesep\", [True, False])\ndef test_merge(tmpdir_factory, merged_file_count: int, append_linesep: bool):\n    tmp_dir_path = Path(str(tmpdir_factory.getbasetemp()))\n    output_file_path = tmp_dir_path / \".env\"\n    expected_output_file_content = \"\"\n    merged_file_paths = []\n    for i in range(merged_file_count):",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "test_merge",
        "kind": 2,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "def test_merge(tmpdir_factory, merged_file_count: int, append_linesep: bool):\n    tmp_dir_path = Path(str(tmpdir_factory.getbasetemp()))\n    output_file_path = tmp_dir_path / \".env\"\n    expected_output_file_content = \"\"\n    merged_file_paths = []\n    for i in range(merged_file_count):\n        merged_file_ord = i + 1\n        merged_filename = \".service{}\".format(merged_file_ord)\n        merged_file_path = tmp_dir_path / merged_filename\n        merged_file_content = merged_filename * merged_file_ord",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "ROOT_DIR_PATH = Path(__file__).parent.resolve()\nPRODUCTION_DOTENVS_DIR_PATH = ROOT_DIR_PATH / \".envs\" / \".production\"\nPRODUCTION_DOTENV_FILE_PATHS = [\n    PRODUCTION_DOTENVS_DIR_PATH / \".django\",\n    PRODUCTION_DOTENVS_DIR_PATH / \".postgres\",\n]\nDOTENV_FILE_PATH = ROOT_DIR_PATH / \".env\"\ndef merge(\n    output_file_path: str, merged_file_paths: Sequence[str], append_linesep: bool = True\n) -> None:",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "PRODUCTION_DOTENVS_DIR_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "PRODUCTION_DOTENVS_DIR_PATH = ROOT_DIR_PATH / \".envs\" / \".production\"\nPRODUCTION_DOTENV_FILE_PATHS = [\n    PRODUCTION_DOTENVS_DIR_PATH / \".django\",\n    PRODUCTION_DOTENVS_DIR_PATH / \".postgres\",\n]\nDOTENV_FILE_PATH = ROOT_DIR_PATH / \".env\"\ndef merge(\n    output_file_path: str, merged_file_paths: Sequence[str], append_linesep: bool = True\n) -> None:\n    with open(output_file_path, \"w\") as output_file:",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "PRODUCTION_DOTENV_FILE_PATHS",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "PRODUCTION_DOTENV_FILE_PATHS = [\n    PRODUCTION_DOTENVS_DIR_PATH / \".django\",\n    PRODUCTION_DOTENVS_DIR_PATH / \".postgres\",\n]\nDOTENV_FILE_PATH = ROOT_DIR_PATH / \".env\"\ndef merge(\n    output_file_path: str, merged_file_paths: Sequence[str], append_linesep: bool = True\n) -> None:\n    with open(output_file_path, \"w\") as output_file:\n        for merged_file_path in merged_file_paths:",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "DOTENV_FILE_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "DOTENV_FILE_PATH = ROOT_DIR_PATH / \".env\"\ndef merge(\n    output_file_path: str, merged_file_paths: Sequence[str], append_linesep: bool = True\n) -> None:\n    with open(output_file_path, \"w\") as output_file:\n        for merged_file_path in merged_file_paths:\n            with open(merged_file_path, \"r\") as merged_file:\n                merged_file_content = merged_file.read()\n                output_file.write(merged_file_content)\n                if append_linesep:",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "DEMO_WEB_PROJECT_CONFIG",
        "kind": 5,
        "importPath": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.config",
        "description": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.config",
        "peekOfCode": "DEMO_WEB_PROJECT_CONFIG = {\n    \"name\" : \"Personal Management\",\n    \"events\" : EVENTS_ALLOWED\n}",
        "detail": "autoppia_iwa.modules.webs_demo.web_2_demo_angular_django_personal_management.config",
        "documentation": {}
    },
    {
        "label": "TestActionsGenerationAndEvaluation",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.data_generation.task_execution_and_evaluation.test_execute_one_task",
        "description": "autoppia_iwa.tests.data_generation.task_execution_and_evaluation.test_execute_one_task",
        "peekOfCode": "class TestActionsGenerationAndEvaluation(unittest.TestCase):\n    \"\"\"\n    Unit tests for action generation and evaluation.\n    \"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Set up shared resources for the test class.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()",
        "detail": "autoppia_iwa.tests.data_generation.task_execution_and_evaluation.test_execute_one_task",
        "documentation": {}
    },
    {
        "label": "TestNewActionsGeneration",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.data_generation.test_actions.test_actions_generation_pipeline",
        "description": "autoppia_iwa.tests.data_generation.test_actions.test_actions_generation_pipeline",
        "peekOfCode": "class TestNewActionsGeneration(unittest.TestCase):\n    \"\"\"\n    Unit tests for generating new actions based on task configurations.\n    \"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Set up shared resources for all tests in the class.\n        \"\"\"\n        # Initialize the application bootstrap and LLM service",
        "detail": "autoppia_iwa.tests.data_generation.test_actions.test_actions_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationByEasyDifficultyTest",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.easy_tasks",
        "description": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.easy_tasks",
        "peekOfCode": "class TaskGenerationByEasyDifficultyTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Initialize dependencies and prepare output directory.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()\n        cls.llm_service = cls.app_bootstrap.container.llm_service()\n        cls.domain = \"localhost:8000\"\n        cls.start_url = f\"http://{cls.domain}/\"",
        "detail": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.easy_tasks",
        "documentation": {}
    },
    {
        "label": "TaskGenerationByHardDifficultyTest",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.hard_tasks",
        "description": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.hard_tasks",
        "peekOfCode": "class TaskGenerationByHardDifficultyTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Initialize dependencies and prepare output directory.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()\n        cls.llm_service = cls.app_bootstrap.container.llm_service()\n        cls.domain = \"localhost:8000\"\n        cls.start_url = \"http://localhost:8000/\"",
        "detail": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.hard_tasks",
        "documentation": {}
    },
    {
        "label": "TaskGenerationByMediumDifficultyTest",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.medium_tasks",
        "description": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.medium_tasks",
        "peekOfCode": "class TaskGenerationByMediumDifficultyTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Initialize dependencies and prepare output directory.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()\n        cls.llm_service = cls.app_bootstrap.container.llm_service()\n        cls.domain = \"localhost:8000\"\n        cls.start_url = \"http://localhost:8000/\"",
        "detail": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.medium_tasks",
        "documentation": {}
    },
    {
        "label": "TestTaskPromptGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.test_prompt_generator",
        "description": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.test_prompt_generator",
        "peekOfCode": "class TestTaskPromptGenerator(unittest.TestCase):\n    \"\"\"Unit tests for TaskPromptGenerator.\"\"\"\n    def setUp(self):\n        \"\"\"Set up test dependencies.\"\"\"\n        self.app_boostrap = AppBootstrap()\n        self.llm_service = self.app_boostrap.container.llm_service()\n        self.domain = \"localhost:8000\"\n        self.test_data = self._get_mock_web_analysis()\n        self.web_analysis = DomainAnalysis(**self.test_data)\n    def _get_mock_web_analysis(self):",
        "detail": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.test_prompt_generator",
        "documentation": {}
    },
    {
        "label": "TestTaskTestGenerationWithWebAnalysis",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_test_generation.test_tests_generator",
        "description": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_test_generation.test_tests_generator",
        "peekOfCode": "class TestTaskTestGenerationWithWebAnalysis(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls) -> None:\n        \"\"\"\n        Set up class-level test environment.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()\n        cls.analysis_repo = cls.app_bootstrap.container.analysis_repository()\n        cls.llm_service = cls.app_bootstrap.container.llm_service()\n        # Local testing setup",
        "detail": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_task_test_generation.test_tests_generator",
        "documentation": {}
    },
    {
        "label": "TestTaskGenerationPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_complete_task_generation_pipeline",
        "description": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_complete_task_generation_pipeline",
        "peekOfCode": "class TestTaskGenerationPipeline(unittest.TestCase):\n    \"\"\"\n    Unit tests for the TaskGenerationPipeline.\n    Ensures the pipeline generates structured tasks based on the provided input.\n    \"\"\"\n    @classmethod\n    def setUpClass(cls) -> None:\n        \"\"\"\n        Set up the environment and dependencies once for all tests.\n        \"\"\"",
        "detail": "autoppia_iwa.tests.data_generation.test_generation_pipeline.test_complete_task_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "StressTestDataGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.evaluation.data_generator_and_tester",
        "description": "autoppia_iwa.tests.evaluation.data_generator_and_tester",
        "peekOfCode": "class StressTestDataGenerator(unittest.TestCase):\n    OUTPUT_FILE_256 = \"actions_data.json\"\n    OUTPUT_FILE_GROUPED = \"grouped_actions.json\"\n    RESULT_FILE_256 = \"hard_tasks.json\"\n    RESULT_FILE_GROUPED = \"grouped_tasks.json\"\n    @classmethod\n    def setUpClass(cls) -> None:\n        cls.EVALUATION_DIR = Path(__file__).parent.resolve()\n        cls.task_data_template = {\n            \"prompt\": \"Click on the \\\"Login\\\" link in the header. Then fill the form with email:employee@employee.com and password:employee and click on login\",",
        "detail": "autoppia_iwa.tests.evaluation.data_generator_and_tester",
        "documentation": {}
    },
    {
        "label": "ConcurrentTaskEvaluationTest",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.evaluation.stress_tests",
        "description": "autoppia_iwa.tests.evaluation.stress_tests",
        "peekOfCode": "class ConcurrentTaskEvaluationTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Initialize dependencies and prepare output directory.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()\n        cls.domain = \"localhost:8000\"\n        cls.start_url = \"http://localhost:8000/\"\n        cls.difficulty_level = TaskDifficultyLevel.EASY",
        "detail": "autoppia_iwa.tests.evaluation.stress_tests",
        "documentation": {}
    },
    {
        "label": "TestActionExecution",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.evaluation.test_evaluator_actions",
        "description": "autoppia_iwa.tests.evaluation.test_evaluator_actions",
        "peekOfCode": "class TestActionExecution(unittest.TestCase):\n    \"\"\"\n    Unit test for evaluating task execution and action processing.\n    \"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Class-level setup that initializes the application bootstrap and task/action data.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()",
        "detail": "autoppia_iwa.tests.evaluation.test_evaluator_actions",
        "documentation": {}
    },
    {
        "label": "TestWebAnalysisPipelineWithCache",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.web_analysis.web_analyzer.test_web_analysis_with_cache",
        "description": "autoppia_iwa.tests.web_analysis.web_analyzer.test_web_analysis_with_cache",
        "peekOfCode": "class TestWebAnalysisPipelineWithCache(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Set up resources for all tests.\"\"\"\n        cls.app_boostrap = AppBootstrap()\n        cls.analysis_repository = cls.app_boostrap.container.analysis_repository()\n        cls.llm_service = cls.app_boostrap.container.llm_service()\n        cls.enable_crawl = False\n        cls.data = {\n            \"domain\": \"localhost:8000\",",
        "detail": "autoppia_iwa.tests.web_analysis.web_analyzer.test_web_analysis_with_cache",
        "documentation": {}
    },
    {
        "label": "TestWebAnalysisPipelineWithNoCrawling",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.web_analysis.web_analyzer.test_web_analyzer_without_crawl",
        "description": "autoppia_iwa.tests.web_analysis.web_analyzer.test_web_analyzer_without_crawl",
        "peekOfCode": "class TestWebAnalysisPipelineWithNoCrawling(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        cls.app_boostrap = AppBootstrap()\n        cls.analysis_repository = cls.app_boostrap.container.analysis_repository()\n        cls.llm_service = cls.app_boostrap.container.llm_service()\n        cls.url = \"http://localhost:8000/\"\n        cls.enable_crawl = False\n        cls.get_analysis_from_cache = False\n        cls.save_results_in_db = True",
        "detail": "autoppia_iwa.tests.web_analysis.web_analyzer.test_web_analyzer_without_crawl",
        "documentation": {}
    },
    {
        "label": "TestWebAnalysisPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.web_analysis.web_analyzer.test_web_complete_analyzer",
        "description": "autoppia_iwa.tests.web_analysis.web_analyzer.test_web_complete_analyzer",
        "peekOfCode": "class TestWebAnalysisPipeline(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        cls.app_boostrap = AppBootstrap()\n        cls.analysis_repository = cls.app_boostrap.container.analysis_repository()\n        cls.llm_service = cls.app_boostrap.container.llm_service()\n        cls.start_url = \"http://localhost:8000/\"\n    def test_pipeline(self):\n        \"\"\"\n        Test the pipeline with a real website to verify the complete flow.",
        "detail": "autoppia_iwa.tests.web_analysis.web_analyzer.test_web_complete_analyzer",
        "documentation": {}
    },
    {
        "label": "WebCrawler",
        "kind": 6,
        "importPath": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "description": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "peekOfCode": "class WebCrawler:\n    def __init__(self, startUrl):\n        parsed = urlparse(startUrl)\n        self.domain = f\"{parsed.scheme}://{parsed.netloc}\"\n    def crawl_urls(self, start_url, max_depth=2):\n        visited_urls = set()\n        all_urls = []\n        def strip_query_params(url):\n            parsed = urlparse(url)\n            return f\"{parsed.scheme}://{parsed.netloc}{parsed.path}\"",
        "detail": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "documentation": {}
    },
    {
        "label": "crawler_config",
        "kind": 5,
        "importPath": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "description": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "peekOfCode": "crawler_config = WebCrawlerConfig(start_url=\"https://ajedrezenmadrid.com\", max_depth=2)\n# Initialize the web crawler with the start URL\nweb_crawler = WebCrawler(crawler_config.start_url)\n# Use the crawler to get URLs up to the maximum depth\ncrawled_urls = web_crawler.crawl_urls(crawler_config.start_url, crawler_config.max_depth)\n# Print the crawled URLs\nprint(\"Crawled URLs:\")\nfor url in crawled_urls:\n    print(url)\n# Get links from a specific URL using Selenium",
        "detail": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "documentation": {}
    },
    {
        "label": "web_crawler",
        "kind": 5,
        "importPath": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "description": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "peekOfCode": "web_crawler = WebCrawler(crawler_config.start_url)\n# Use the crawler to get URLs up to the maximum depth\ncrawled_urls = web_crawler.crawl_urls(crawler_config.start_url, crawler_config.max_depth)\n# Print the crawled URLs\nprint(\"Crawled URLs:\")\nfor url in crawled_urls:\n    print(url)\n# Get links from a specific URL using Selenium\nselenium_links = web_crawler.get_links_selenium(\"https://ajedrezenmadrid.com\")\n# Print the links obtained using Selenium",
        "detail": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "documentation": {}
    },
    {
        "label": "crawled_urls",
        "kind": 5,
        "importPath": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "description": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "peekOfCode": "crawled_urls = web_crawler.crawl_urls(crawler_config.start_url, crawler_config.max_depth)\n# Print the crawled URLs\nprint(\"Crawled URLs:\")\nfor url in crawled_urls:\n    print(url)\n# Get links from a specific URL using Selenium\nselenium_links = web_crawler.get_links_selenium(\"https://ajedrezenmadrid.com\")\n# Print the links obtained using Selenium\nprint(\"Links obtained using Selenium:\")\nfor link in selenium_links:",
        "detail": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "documentation": {}
    },
    {
        "label": "selenium_links",
        "kind": 5,
        "importPath": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "description": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "peekOfCode": "selenium_links = web_crawler.get_links_selenium(\"https://ajedrezenmadrid.com\")\n# Print the links obtained using Selenium\nprint(\"Links obtained using Selenium:\")\nfor link in selenium_links:\n    print(link)\n# Create a graph of the crawled URLs\ngraph, links = web_crawler.create_graph(crawler_config.start_url)\n# Print the links in the graph\nprint(\"Links in the graph:\")\nfor link in links:",
        "detail": "autoppia_iwa.tests.web_analysis.web_crawler.test_web_crawler",
        "documentation": {}
    },
    {
        "label": "here",
        "kind": 5,
        "importPath": "autoppia_iwa.setup",
        "description": "autoppia_iwa.setup",
        "peekOfCode": "here = Path(__file__).parent.resolve()\nwith open(here / \"requirements.txt\", encoding=\"utf-8\") as f:\n    required = f.read().splitlines()\nsetuptools.setup(\n    name=\"autoppia_iwa\",\n    version=\"0.0.1\",\n    description=\"A short description of the autoppia_iwa package\",\n    packages=[\"autoppia_iwa\"],\n    install_requires=required,\n    python_requires=\">=3.11\",",
        "detail": "autoppia_iwa.setup",
        "documentation": {}
    },
    {
        "label": "Miner",
        "kind": 6,
        "importPath": "neurons.miner",
        "description": "neurons.miner",
        "peekOfCode": "class Miner(BaseMinerNeuron):\n    \"\"\"\n    Your miner neuron class. You should use this class to define your miner's behavior. In particular, you should replace the forward function with your own logic. You may also want to override the blacklist and priority functions according to your needs.\n    This class inherits from the BaseMinerNeuron class, which in turn inherits from BaseNeuron. The BaseNeuron class takes care of routine tasks such as setting up wallet, subtensor, metagraph, logging directory, parsing config, etc. You can override any of the methods in BaseNeuron if you need to customize the behavior.\n    This class provides reasonable default behavior for a miner such as blacklisting unrecognized hotkeys, prioritizing requests based on stake, and forwarding requests to the forward function. If you need to define custom\n    \"\"\"\n    def __init__(self, config=None):\n        super(Miner, self).__init__(config=config)\n        self.agent = DefaultWebAgent()\n    async def forward(self, synapse: TaskSynapse) -> TaskSynapse:",
        "detail": "neurons.miner",
        "documentation": {}
    },
    {
        "label": "Validator",
        "kind": 6,
        "importPath": "neurons.validator",
        "description": "neurons.validator",
        "peekOfCode": "class Validator(BaseValidatorNeuron):\n    \"\"\"\n    Your validator neuron class. You should use this class to define your validator's behavior. In particular, you should replace the forward function with your own logic.\n    This class inherits from the BaseValidatorNeuron class, which in turn inherits from BaseNeuron. The BaseNeuron class takes care of routine tasks such as setting up wallet, subtensor, metagraph, logging directory, parsing config, etc. You can override any of the methods in BaseNeuron if you need to customize the behavior.\n    This class provides reasonable default behavior for a validator such as keeping a moving average of the scores of the miners and using them to set weights at the end of each epoch. Additionally, the scores are reset for new hotkeys at the end of each epoch.\n    \"\"\"\n    def __init__(self, config=None):\n        super(Validator, self).__init__(config=config)\n        bt.logging.info(\"load_state()\")\n        self.load_state()",
        "detail": "neurons.validator",
        "documentation": {}
    },
    {
        "label": "normalize_max_weight",
        "kind": 2,
        "importPath": "src.base.utils.weight_utils",
        "description": "src.base.utils.weight_utils",
        "peekOfCode": "def normalize_max_weight(x: np.ndarray, limit: float = 0.1) -> np.ndarray:\n    r\"\"\"Normalizes the numpy array x so that sum(x) = 1 and the max value is not greater than the limit.\n    Args:\n        x (:obj:`np.ndarray`):\n            Array to be max_value normalized.\n        limit: float:\n            Max value after normalization.\n    Returns:\n        y (:obj:`np.ndarray`):\n            Normalized x array.",
        "detail": "src.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "convert_weights_and_uids_for_emit",
        "kind": 2,
        "importPath": "src.base.utils.weight_utils",
        "description": "src.base.utils.weight_utils",
        "peekOfCode": "def convert_weights_and_uids_for_emit(\n    uids: np.ndarray, weights: np.ndarray\n) -> Tuple[List[int], List[int]]:\n    r\"\"\"Converts weights into integer u32 representation that sum to MAX_INT_WEIGHT.\n    Args:\n        uids (:obj:`np.ndarray,`):\n            Array of uids as destinations for passed weights.\n        weights (:obj:`np.ndarray,`):\n            Array of weights.\n    Returns:",
        "detail": "src.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "process_weights_for_netuid",
        "kind": 2,
        "importPath": "src.base.utils.weight_utils",
        "description": "src.base.utils.weight_utils",
        "peekOfCode": "def process_weights_for_netuid(\n    uids,\n    weights: np.ndarray,\n    netuid: int,\n    subtensor: \"bittensor.subtensor\",\n    metagraph: \"bittensor.metagraph\" = None,\n    exclude_quantile: int = 0,\n) -> Union[\n    tuple[\n        ndarray[Any, dtype[Any]],",
        "detail": "src.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "U32_MAX",
        "kind": 5,
        "importPath": "src.base.utils.weight_utils",
        "description": "src.base.utils.weight_utils",
        "peekOfCode": "U32_MAX = 4294967295\nU16_MAX = 65535\ndef normalize_max_weight(x: np.ndarray, limit: float = 0.1) -> np.ndarray:\n    r\"\"\"Normalizes the numpy array x so that sum(x) = 1 and the max value is not greater than the limit.\n    Args:\n        x (:obj:`np.ndarray`):\n            Array to be max_value normalized.\n        limit: float:\n            Max value after normalization.\n    Returns:",
        "detail": "src.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "U16_MAX",
        "kind": 5,
        "importPath": "src.base.utils.weight_utils",
        "description": "src.base.utils.weight_utils",
        "peekOfCode": "U16_MAX = 65535\ndef normalize_max_weight(x: np.ndarray, limit: float = 0.1) -> np.ndarray:\n    r\"\"\"Normalizes the numpy array x so that sum(x) = 1 and the max value is not greater than the limit.\n    Args:\n        x (:obj:`np.ndarray`):\n            Array to be max_value normalized.\n        limit: float:\n            Max value after normalization.\n    Returns:\n        y (:obj:`np.ndarray`):",
        "detail": "src.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "BaseMinerNeuron",
        "kind": 6,
        "importPath": "src.base.miner",
        "description": "src.base.miner",
        "peekOfCode": "class BaseMinerNeuron(BaseNeuron):\n    \"\"\"\n    Base class for Bittensor miners.\n    \"\"\"\n    neuron_type: str = \"MinerNeuron\"\n    @classmethod\n    def add_args(cls, parser: argparse.ArgumentParser):\n        super().add_args(parser)\n        add_miner_args(cls, parser)\n    def __init__(self, config=None):",
        "detail": "src.base.miner",
        "documentation": {}
    },
    {
        "label": "BaseNeuron",
        "kind": 6,
        "importPath": "src.base.neuron",
        "description": "src.base.neuron",
        "peekOfCode": "class BaseNeuron(ABC):\n    \"\"\"\n    Base class for Bittensor miners. This class is abstract and should be inherited by a subclass. It contains the core logic for all neurons; validators and miners.\n    In addition to creating a wallet, subtensor, and metagraph, this class also handles the synchronization of the network state via a basic checkpointing mechanism based on epoch length.\n    \"\"\"\n    neuron_type: str = \"BaseNeuron\"\n    @classmethod\n    def check_config(cls, config: \"bt.Config\"):\n        check_config(cls, config)\n    @classmethod",
        "detail": "src.base.neuron",
        "documentation": {}
    },
    {
        "label": "BaseValidatorNeuron",
        "kind": 6,
        "importPath": "src.base.validator",
        "description": "src.base.validator",
        "peekOfCode": "class BaseValidatorNeuron(BaseNeuron):\n    \"\"\"\n    Base class for Bittensor validators. Your validator should inherit from this class.\n    \"\"\"\n    neuron_type: str = \"ValidatorNeuron\"\n    @classmethod\n    def add_args(cls, parser: argparse.ArgumentParser):\n        super().add_args(parser)\n        add_validator_args(cls, parser)\n    def __init__(self, config=None):",
        "detail": "src.base.validator",
        "documentation": {}
    },
    {
        "label": "is_cuda_available",
        "kind": 2,
        "importPath": "src.utils.config",
        "description": "src.utils.config",
        "peekOfCode": "def is_cuda_available():\n    try:\n        output = subprocess.check_output(\n            [\"nvidia-smi\", \"-L\"], stderr=subprocess.STDOUT\n        )\n        if \"NVIDIA\" in output.decode(\"utf-8\"):\n            return \"cuda\"\n    except Exception:\n        pass\n    try:",
        "detail": "src.utils.config",
        "documentation": {}
    },
    {
        "label": "check_config",
        "kind": 2,
        "importPath": "src.utils.config",
        "description": "src.utils.config",
        "peekOfCode": "def check_config(cls, config: \"bt.Config\"):\n    r\"\"\"Checks/validates the config namespace object.\"\"\"\n    bt.logging.check_config(config)\n    full_path = os.path.expanduser(\n        \"{}/{}/{}/netuid{}/{}\".format(\n            config.logging.logging_dir,  # TODO: change from ~/.bittensor/miners to ~/.bittensor/neurons\n            config.wallet.name,\n            config.wallet.hotkey,\n            config.netuid,\n            config.neuron.name,",
        "detail": "src.utils.config",
        "documentation": {}
    },
    {
        "label": "add_args",
        "kind": 2,
        "importPath": "src.utils.config",
        "description": "src.utils.config",
        "peekOfCode": "def add_args(cls, parser):\n    \"\"\"\n    Adds relevant arguments to the parser for operation.\n    \"\"\"\n    parser.add_argument(\"--netuid\", type=int, help=\"Subnet netuid\", default=1)\n    parser.add_argument(\n        \"--neuron.device\",\n        type=str,\n        help=\"Device to run on.\",\n        default=is_cuda_available(),",
        "detail": "src.utils.config",
        "documentation": {}
    },
    {
        "label": "add_miner_args",
        "kind": 2,
        "importPath": "src.utils.config",
        "description": "src.utils.config",
        "peekOfCode": "def add_miner_args(cls, parser):\n    \"\"\"Add miner specific arguments to the parser.\"\"\"\n    parser.add_argument(\n        \"--neuron.name\",\n        type=str,\n        help=\"Trials for this neuron go in neuron.root / (wallet_cold - wallet_hot) / neuron.name. \",\n        default=\"miner\",\n    )\n    parser.add_argument(\n        \"--blacklist.force_validator_permit\",",
        "detail": "src.utils.config",
        "documentation": {}
    },
    {
        "label": "add_validator_args",
        "kind": 2,
        "importPath": "src.utils.config",
        "description": "src.utils.config",
        "peekOfCode": "def add_validator_args(cls, parser):\n    \"\"\"Add validator specific arguments to the parser.\"\"\"\n    parser.add_argument(\n        \"--neuron.name\",\n        type=str,\n        help=\"Trials for this neuron go in neuron.root / (wallet_cold - wallet_hot) / neuron.name. \",\n        default=\"validator\",\n    )\n    parser.add_argument(\n        \"--neuron.timeout\",",
        "detail": "src.utils.config",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 2,
        "importPath": "src.utils.config",
        "description": "src.utils.config",
        "peekOfCode": "def config(cls):\n    \"\"\"\n    Returns the configuration object specific to this miner or validator after adding relevant arguments.\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    bt.wallet.add_args(parser)\n    bt.subtensor.add_args(parser)\n    bt.logging.add_args(parser)\n    bt.axon.add_args(parser)\n    cls.add_args(parser)",
        "detail": "src.utils.config",
        "documentation": {}
    },
    {
        "label": "setup_events_logger",
        "kind": 2,
        "importPath": "src.utils.logging",
        "description": "src.utils.logging",
        "peekOfCode": "def setup_events_logger(full_path, events_retention_size):\n    logging.addLevelName(EVENTS_LEVEL_NUM, \"EVENT\")\n    logger = logging.getLogger(\"event\")\n    logger.setLevel(EVENTS_LEVEL_NUM)\n    def event(self, message, *args, **kws):\n        if self.isEnabledFor(EVENTS_LEVEL_NUM):\n            self._log(EVENTS_LEVEL_NUM, message, args, **kws)\n    logging.Logger.event = event\n    formatter = logging.Formatter(\n        \"%(asctime)s | %(levelname)s | %(message)s\",",
        "detail": "src.utils.logging",
        "documentation": {}
    },
    {
        "label": "EVENTS_LEVEL_NUM",
        "kind": 5,
        "importPath": "src.utils.logging",
        "description": "src.utils.logging",
        "peekOfCode": "EVENTS_LEVEL_NUM = 38\nDEFAULT_LOG_BACKUP_COUNT = 10\ndef setup_events_logger(full_path, events_retention_size):\n    logging.addLevelName(EVENTS_LEVEL_NUM, \"EVENT\")\n    logger = logging.getLogger(\"event\")\n    logger.setLevel(EVENTS_LEVEL_NUM)\n    def event(self, message, *args, **kws):\n        if self.isEnabledFor(EVENTS_LEVEL_NUM):\n            self._log(EVENTS_LEVEL_NUM, message, args, **kws)\n    logging.Logger.event = event",
        "detail": "src.utils.logging",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOG_BACKUP_COUNT",
        "kind": 5,
        "importPath": "src.utils.logging",
        "description": "src.utils.logging",
        "peekOfCode": "DEFAULT_LOG_BACKUP_COUNT = 10\ndef setup_events_logger(full_path, events_retention_size):\n    logging.addLevelName(EVENTS_LEVEL_NUM, \"EVENT\")\n    logger = logging.getLogger(\"event\")\n    logger.setLevel(EVENTS_LEVEL_NUM)\n    def event(self, message, *args, **kws):\n        if self.isEnabledFor(EVENTS_LEVEL_NUM):\n            self._log(EVENTS_LEVEL_NUM, message, args, **kws)\n    logging.Logger.event = event\n    formatter = logging.Formatter(",
        "detail": "src.utils.logging",
        "documentation": {}
    },
    {
        "label": "ttl_cache",
        "kind": 2,
        "importPath": "src.utils.misc",
        "description": "src.utils.misc",
        "peekOfCode": "def ttl_cache(maxsize: int = 128, typed: bool = False, ttl: int = -1):\n    \"\"\"\n    Decorator that creates a cache of the most recently used function calls with a time-to-live (TTL) feature.\n    The cache evicts the least recently used entries if the cache exceeds the `maxsize` or if an entry has\n    been in the cache longer than the `ttl` period.\n    Args:\n        maxsize (int): Maximum size of the cache. Once the cache grows to this size, subsequent entries\n                       replace the least recently used ones. Defaults to 128.\n        typed (bool): If set to True, arguments of different types will be cached separately. For example,\n                      f(3) and f(3.0) will be treated as distinct calls with distinct results. Defaults to False.",
        "detail": "src.utils.misc",
        "documentation": {}
    },
    {
        "label": "ttl_get_block",
        "kind": 2,
        "importPath": "src.utils.misc",
        "description": "src.utils.misc",
        "peekOfCode": "def ttl_get_block(self) -> int:\n    \"\"\"\n    Retrieves the current block number from the blockchain. This method is cached with a time-to-live (TTL)\n    of 12 seconds, meaning that it will only refresh the block number from the blockchain at most every 12 seconds,\n    reducing the number of calls to the underlying blockchain interface.\n    Returns:\n        int: The current block number on the blockchain.\n    This method is useful for applications that need to access the current block number frequently and can\n    tolerate a delay of up to 12 seconds for the latest information. By using a cache with TTL, the method\n    efficiently reduces the workload on the blockchain interface.",
        "detail": "src.utils.misc",
        "documentation": {}
    },
    {
        "label": "check_uid_availability",
        "kind": 2,
        "importPath": "src.utils.uids",
        "description": "src.utils.uids",
        "peekOfCode": "def check_uid_availability(\n    metagraph: \"bt.metagraph.Metagraph\", uid: int, vpermit_tao_limit: int\n) -> bool:\n    \"\"\"Check if uid is available. The UID should be available if it is serving and has less than vpermit_tao_limit stake\n    Args:\n        metagraph (:obj: bt.metagraph.Metagraph): Metagraph object\n        uid (int): uid to be checked\n        vpermit_tao_limit (int): Validator permit tao limit\n    Returns:\n        bool: True if uid is available, False otherwise",
        "detail": "src.utils.uids",
        "documentation": {}
    },
    {
        "label": "get_random_uids",
        "kind": 2,
        "importPath": "src.utils.uids",
        "description": "src.utils.uids",
        "peekOfCode": "def get_random_uids(self, k: int, exclude: List[int] = None) -> np.ndarray:\n    \"\"\"Returns k available random uids from the metagraph.\n    Args:\n        k (int): Number of uids to return.\n        exclude (List[int]): List of uids to exclude from the random sampling.\n    Returns:\n        uids (np.ndarray): Randomly sampled available uids.\n    Notes:\n        If `k` is larger than the number of available `uids`, set `k` to the number of available `uids`.\n    \"\"\"",
        "detail": "src.utils.uids",
        "documentation": {}
    },
    {
        "label": "read_config",
        "kind": 2,
        "importPath": "src.validator.config",
        "description": "src.validator.config",
        "peekOfCode": "def read_config() -> bt.config:\n    parser = argparse.ArgumentParser()\n    bt.logging.add_args(parser)\n    bt.wallet.add_args(parser)\n    bt.subtensor.add_args(parser)\n    bt.axon.add_args(parser)\n    parser.add_argument(\"--netuid\", type=int, help=\"Subnet netuid\", default=36)\n    parser.add_argument(\n        \"--neuron.name\",\n        type=str,",
        "detail": "src.validator.config",
        "documentation": {}
    },
    {
        "label": "FORWARD_SLEEP_SECONDS",
        "kind": 5,
        "importPath": "src.validator.forward",
        "description": "src.validator.forward",
        "peekOfCode": "FORWARD_SLEEP_SECONDS = 5\nasync def forward(self) -> None:\n    \"\"\"\n    The forward function is called by the validator every time step.\n    It is responsible for querying the network and scoring the responses.\n    Args:\n        self (:obj:`bittensor.neuron.Neuron`): The neuron object which contains all the necessary state for the validator.\n    \"\"\"\n    # 1) Get Demo Web Projects\n    demo_web_projects = get_demo_webs_projects()",
        "detail": "src.validator.forward",
        "documentation": {}
    },
    {
        "label": "get_rewards",
        "kind": 2,
        "importPath": "src.validator.reward",
        "description": "src.validator.reward",
        "peekOfCode": "def get_rewards(\n    self,\n    task_solutions: List[TaskSolution],\n    web_url: str,\n) -> np.ndarray:\n    \"\"\"\n    Returns an array of rewards for the given query and responses,\n    evaluating one Task per response with a ConcurrentEvaluator.\n    Args:\n        self: Typically your validator/neuron instance.",
        "detail": "src.validator.reward",
        "documentation": {}
    },
    {
        "label": "get_score_from_evaluation_result",
        "kind": 2,
        "importPath": "src.validator.reward",
        "description": "src.validator.reward",
        "peekOfCode": "def get_score_from_evaluation_result(result:EvaluationResult) -> float:\n    return result.final_score",
        "detail": "src.validator.reward",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "__version__ = 1.0",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "TaskSynapse",
        "kind": 6,
        "importPath": "src.protocol",
        "description": "src.protocol",
        "peekOfCode": "class TaskSynapse(bt.Synapse):\n    \"\"\"\n    A protocol representation which uses bt.Synapse as its base.\n    This protocol helps in handling request and response communication between\n    the miner and the validator.\n    Attributes:\n    - texts: List of texts that needs to be evaluated for AI generation\n    - predictions: List of probabilities in response to texts\n    \"\"\"\n    version: str = \"\"",
        "detail": "src.protocol",
        "documentation": {}
    },
    {
        "label": "Dummy",
        "kind": 6,
        "importPath": "src.protocol",
        "description": "src.protocol",
        "peekOfCode": "class Dummy:\n    pass",
        "detail": "src.protocol",
        "documentation": {}
    },
    {
        "label": "DefaultWebAgent",
        "kind": 5,
        "importPath": "web_agents.default_web_agent",
        "description": "web_agents.default_web_agent",
        "peekOfCode": "DefaultWebAgent = AutoppiaWebAgent\n# TODO: You should create your Custom Web Agent implemeting IWebAgent interface.",
        "detail": "web_agents.default_web_agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "kind": 6,
        "importPath": "web_agents.random",
        "description": "web_agents.random",
        "peekOfCode": "class RandomClickerWebAgent(IWebAgent):\n    \"\"\"\n    Web Agent that executes random actions within the screen dimensions.\n    \"\"\"\n    def __init__(self):\n        pass\n    def generate_actions(self, task: Task) -> TaskSolution:\n        \"\"\"\n        Generates a list of random click actions within the screen dimensions.\n        :param task: The task for which actions are being generated.",
        "detail": "web_agents.random",
        "documentation": {}
    },
    {
        "label": "read_requirements",
        "kind": 2,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "def read_requirements(path):\n    with open(path, \"r\") as f:\n        requirements = f.read().splitlines()\n        processed_requirements = []\n        for req in requirements:\n            # For git or other VCS links\n            if req.startswith(\"git+\") or \"@\" in req:\n                pkg_name = re.search(r\"(#egg=)([\\w\\-_]+)\", req)\n                if pkg_name:\n                    processed_requirements.append(pkg_name.group(2))",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "requirements",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "requirements = read_requirements(\"requirements.txt\")\nhere = path.abspath(path.dirname(__file__))\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n# loading version from setup.py\nwith codecs.open(\n        os.path.join(here, \"template/__init__.py\"), encoding=\"utf-8\"\n) as init_file:\n    version_match = re.search(\n        r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", init_file.read(), re.M",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "here",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "here = path.abspath(path.dirname(__file__))\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n# loading version from setup.py\nwith codecs.open(\n        os.path.join(here, \"template/__init__.py\"), encoding=\"utf-8\"\n) as init_file:\n    version_match = re.search(\n        r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", init_file.read(), re.M\n    )",
        "detail": "setup",
        "documentation": {}
    }
]